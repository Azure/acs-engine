version: 2
experimental:
  notify:
    branches:
      only:
        - master
jobs:
  test:
    working_directory: /go/src/github.com/Azure/acs-engine
    docker:
      - image: quay.io/deis/go-dev:v1.8.1
        environment:
          GOPATH: /go
    steps:
      - checkout
      - run: |
          echo 'export PATH=$GOPATH/bin:$PATH' >> $BASH_ENV
          echo 'export CLIENT_ID=${CLUSTER_SERVICE_PRINCIPAL_CLIENT_ID}' >> $BASH_ENV
          echo 'export CLIENT_SECRET=${CLUSTER_SERVICE_PRINCIPAL_CLIENT_SECRET}' >> $BASH_ENV
      - run:
          name: Install dependencies
          command: make bootstrap
      - run:
          name: Run linting rules
          command: make test-style
      - run:
          name: Build binaries
          command: make build-binary
      - run:
          name: Run unit tests
          command: make test
      - store_test_results:
          path: test/junit
  swarm-e2e:
    working_directory: /go/src/github.com/Azure/acs-engine
    docker:
      - image: quay.io/deis/go-dev:v1.8.1
        environment:
          GOPATH: /go
    steps:
      - checkout
      - run: |
          echo 'export PATH=$GOPATH/bin:$PATH' >> $BASH_ENV
          echo 'export BUILD_NUM=${CIRCLE_BUILD_NUM}' >> $BASH_ENV
          echo 'export RESOURCE_GROUP_PREFIX=y' >> $BASH_ENV
          echo 'export SKIP_METRICS=y' >> $BASH_ENV
          echo 'export STAGE_TIMEOUT_MIN=30' >> $BASH_ENV
          echo 'export NUM_OF_RETRIES=2' >> $BASH_ENV
          echo 'export SUBSCRIPTION_ID=${SUBSCRIPTION_ID_PR_E2E}' >> $BASH_ENV
          echo 'export SERVICE_PRINCIPAL_CLIENT_ID=${SERVICE_PRINCIPAL_CLIENT_ID_PR_E2E_2}' >> $BASH_ENV
          echo 'export SERVICE_PRINCIPAL_CLIENT_SECRET=${SERVICE_PRINCIPAL_CLIENT_SECRET_PR_E2E_2}' >> $BASH_ENV
          echo 'export CLUSTER_SERVICE_PRINCIPAL_CLIENT_ID=${CLUSTER_SERVICE_PRINCIPAL_CLIENT_ID_2}' >> $BASH_ENV
          echo 'export CLUSTER_SERVICE_PRINCIPAL_CLIENT_SECRET=${CLUSTER_SERVICE_PRINCIPAL_CLIENT_SECRET_2}' >> $BASH_ENV
          echo 'export TEST_CONFIG=test/e2e/swarm-deployments.json' >> $BASH_ENV
      - run:
          name: Swarm feature validation tests
          command: make bootstrap build test-e2e
          no_output_timeout: "30m"
      - store_artifacts:
          path: /go/src/github.com/Azure/acs-engine/_logs
  dcos-e2e:
    working_directory: /go/src/github.com/Azure/acs-engine
    docker:
      - image: quay.io/deis/go-dev:v1.8.1
        environment:
          GOPATH: /go
    steps:
      - checkout
      - run: |
          echo 'export TIMEOUT=20m' >> $BASH_ENV
          echo 'export CLUSTER_DEFINITION=examples/dcos.json' >> $BASH_ENV
          echo 'export SUBSCRIPTION_ID=${SUBSCRIPTION_ID_E2E_DCOS}' >> $BASH_ENV
          echo 'export RETAIN_SSH=false' >> $BASH_ENV
          echo 'export CLIENT_ID=${SERVICE_PRINCIPAL_CLIENT_ID_E2E_DCOS}' >> $BASH_ENV
          echo 'export CLIENT_SECRET=${SERVICE_PRINCIPAL_CLIENT_SECRET_E2E_DCOS}' >> $BASH_ENV
      - run:
          name: ginkgo dcos e2e tests
          command: make build-binary test-dcos
          no_output_timeout: "30m"
      - store_artifacts:
          path: /go/src/github.com/Azure/acs-engine/_logs
      - store_artifacts:
          path: /go/src/github.com/Azure/acs-engine/_output
  swarmmode-e2e:
    working_directory: /go/src/github.com/Azure/acs-engine
    docker:
      - image: quay.io/deis/go-dev:v1.8.1
        environment:
          GOPATH: /go
    steps:
      - checkout
      - run: |
          echo 'export PATH=$GOPATH/bin:$PATH' >> $BASH_ENV
          echo 'export BUILD_NUM=${CIRCLE_BUILD_NUM}' >> $BASH_ENV
          echo 'export RESOURCE_GROUP_PREFIX=y' >> $BASH_ENV
          echo 'export SKIP_METRICS=y' >> $BASH_ENV
          echo 'export STAGE_TIMEOUT_MIN=30' >> $BASH_ENV
          echo 'export NUM_OF_RETRIES=2' >> $BASH_ENV
          echo 'export SUBSCRIPTION_ID=${SUBSCRIPTION_ID_PR_E2E}' >> $BASH_ENV
          echo 'export SERVICE_PRINCIPAL_CLIENT_ID=${SERVICE_PRINCIPAL_CLIENT_ID_PR_E2E_2}' >> $BASH_ENV
          echo 'export SERVICE_PRINCIPAL_CLIENT_SECRET=${SERVICE_PRINCIPAL_CLIENT_SECRET_PR_E2E_2}' >> $BASH_ENV
          echo 'export CLUSTER_SERVICE_PRINCIPAL_CLIENT_ID=${CLUSTER_SERVICE_PRINCIPAL_CLIENT_ID_2}' >> $BASH_ENV
          echo 'export CLUSTER_SERVICE_PRINCIPAL_CLIENT_SECRET=${CLUSTER_SERVICE_PRINCIPAL_CLIENT_SECRET_2}' >> $BASH_ENV
          echo 'export TEST_CONFIG=test/e2e/swarmmode-deployments.json' >> $BASH_ENV
      - run:
          name: Swarm Mode feature validation tests
          command: make bootstrap build test-e2e
          no_output_timeout: "30m"
      - store_artifacts:
          path: /go/src/github.com/Azure/acs-engine/_logs        
  k8s-1.7-release-e2e:
    working_directory: /go/src/github.com/Azure/acs-engine
    docker:
      - image: quay.io/deis/go-dev:v1.8.1
        environment:
          GOPATH: /go
    steps:
      - checkout
      - run: |
          echo 'export TIMEOUT=20m' >> $BASH_ENV
          echo 'export ORCHESTRATOR_RELEASE=1.7' >> $BASH_ENV
          echo 'export CLUSTER_DEFINITION=examples/e2e-tests/kubernetes/release/default/definition.json' >> $BASH_ENV
          echo 'export CREATE_VNET=true' >> $BASH_ENV
          echo 'export CLEANUP_ON_EXIT=false' >> $BASH_ENV
          echo 'export RETAIN_SSH=false' >> $BASH_ENV
          echo 'export SUBSCRIPTION_ID=${SUBSCRIPTION_ID_E2E_KUBERNETES}' >> $BASH_ENV
          echo 'export CLIENT_ID=${SERVICE_PRINCIPAL_CLIENT_ID_E2E_KUBERNETES}' >> $BASH_ENV
          echo 'export CLIENT_SECRET=${SERVICE_PRINCIPAL_CLIENT_SECRET_E2E_KUBERNETES}' >> $BASH_ENV
      - run:
          name: ginkgo k8s e2e tests
          command: make build-binary test-kubernetes
          no_output_timeout: "30m"
      - store_artifacts:
          path: /go/src/github.com/Azure/acs-engine/_logs
      - store_artifacts:
          path: /go/src/github.com/Azure/acs-engine/_output
  k8s-windows-1.7-release-e2e:
    working_directory: /go/src/github.com/Azure/acs-engine
    docker:
      - image: quay.io/deis/go-dev:v1.8.1
        environment:
          GOPATH: /go
    steps:
      - checkout
      - run: |
          echo 'export TIMEOUT=30m' >> $BASH_ENV
          echo 'export ORCHESTRATOR_RELEASE=1.7' >> $BASH_ENV
          echo 'export CLUSTER_DEFINITION=examples/e2e-tests/kubernetes/windows/definition.json' >> $BASH_ENV
          echo 'export CLEANUP_ON_EXIT=false' >> $BASH_ENV
          echo 'export RETAIN_SSH=false' >> $BASH_ENV
          echo 'export SUBSCRIPTION_ID=${SUBSCRIPTION_ID_E2E_KUBERNETES}' >> $BASH_ENV
          echo 'export CLIENT_ID=${SERVICE_PRINCIPAL_CLIENT_ID_E2E_KUBERNETES}' >> $BASH_ENV
          echo 'export CLIENT_SECRET=${SERVICE_PRINCIPAL_CLIENT_SECRET_E2E_KUBERNETES}' >> $BASH_ENV
      - run:
          name: ginkgo k8s windows e2e tests
          command: make build-binary test-kubernetes
          no_output_timeout: "30m"
      - store_artifacts:
          path: /go/src/github.com/Azure/acs-engine/_logs
      - store_artifacts:
          path: /go/src/github.com/Azure/acs-engine/_output
  k8s-1.9-release-e2e:
    working_directory: /go/src/github.com/Azure/acs-engine
    docker:
      - image: quay.io/deis/go-dev:v1.8.1
        environment:
          GOPATH: /go
    steps:
      - checkout
      - run: |
          echo 'export TIMEOUT=20m' >> $BASH_ENV
          echo 'export ORCHESTRATOR_RELEASE=1.9' >> $BASH_ENV
          echo 'export CLUSTER_DEFINITION=examples/e2e-tests/kubernetes/release/default/definition.json' >> $BASH_ENV
          echo 'export CREATE_VNET=true' >> $BASH_ENV
          echo 'export CLEANUP_ON_EXIT=false' >> $BASH_ENV
          echo 'export RETAIN_SSH=false' >> $BASH_ENV
          echo 'export SUBSCRIPTION_ID=${SUBSCRIPTION_ID_E2E_KUBERNETES}' >> $BASH_ENV
          echo 'export CLIENT_ID=${SERVICE_PRINCIPAL_CLIENT_ID_E2E_KUBERNETES}' >> $BASH_ENV
          echo 'export CLIENT_SECRET=${SERVICE_PRINCIPAL_CLIENT_SECRET_E2E_KUBERNETES}' >> $BASH_ENV
      - run:
          name: ginkgo k8s e2e tests
          command: make build-binary test-kubernetes
          no_output_timeout: "30m"
      - store_artifacts:
          path: /go/src/github.com/Azure/acs-engine/_logs
      - store_artifacts:
          path: /go/src/github.com/Azure/acs-engine/_output
  k8s-1.8-release-e2e:
    working_directory: /go/src/github.com/Azure/acs-engine
    docker:
      - image: quay.io/deis/go-dev:v1.8.1
        environment:
          GOPATH: /go
    steps:
      - checkout
      - run: |
          echo 'export TIMEOUT=20m' >> $BASH_ENV
          echo 'export ORCHESTRATOR_RELEASE=1.8' >> $BASH_ENV
          echo 'export CLUSTER_DEFINITION=examples/e2e-tests/kubernetes/release/default/definition.json' >> $BASH_ENV
          echo 'export CREATE_VNET=true' >> $BASH_ENV
          echo 'export CLEANUP_ON_EXIT=false' >> $BASH_ENV
          echo 'export RETAIN_SSH=false' >> $BASH_ENV
          echo 'export SUBSCRIPTION_ID=${SUBSCRIPTION_ID_E2E_KUBERNETES}' >> $BASH_ENV
          echo 'export CLIENT_ID=${SERVICE_PRINCIPAL_CLIENT_ID_E2E_KUBERNETES}' >> $BASH_ENV
          echo 'export CLIENT_SECRET=${SERVICE_PRINCIPAL_CLIENT_SECRET_E2E_KUBERNETES}' >> $BASH_ENV
      - run:
          name: ginkgo k8s e2e tests
          command: make build-binary test-kubernetes
          no_output_timeout: "30m"
      - store_artifacts:
          path: /go/src/github.com/Azure/acs-engine/_logs
      - store_artifacts:
          path: /go/src/github.com/Azure/acs-engine/_output
  k8s-windows-1.8-release-e2e:
    working_directory: /go/src/github.com/Azure/acs-engine
    docker:
      - image: quay.io/deis/go-dev:v1.8.1
        environment:
          GOPATH: /go
    steps:
      - checkout
      - run: |
          echo 'export TIMEOUT=30m' >> $BASH_ENV
          echo 'export ORCHESTRATOR_RELEASE=1.8' >> $BASH_ENV
          echo 'export CLUSTER_DEFINITION=examples/e2e-tests/kubernetes/windows/definition.json' >> $BASH_ENV
          echo 'export CLEANUP_ON_EXIT=false' >> $BASH_ENV
          echo 'export RETAIN_SSH=false' >> $BASH_ENV
          echo 'export SUBSCRIPTION_ID=${SUBSCRIPTION_ID_E2E_KUBERNETES}' >> $BASH_ENV
          echo 'export CLIENT_ID=${SERVICE_PRINCIPAL_CLIENT_ID_E2E_KUBERNETES}' >> $BASH_ENV
          echo 'export CLIENT_SECRET=${SERVICE_PRINCIPAL_CLIENT_SECRET_E2E_KUBERNETES}' >> $BASH_ENV
      - run:
          name: ginkgo k8s windows e2e tests
          command: make build-binary test-kubernetes
          no_output_timeout: "30m"
      - store_artifacts:
          path: /go/src/github.com/Azure/acs-engine/_logs
      - store_artifacts:
          path: /go/src/github.com/Azure/acs-engine/_output
  k8s-windows-1.9-release-e2e:
    working_directory: /go/src/github.com/Azure/acs-engine
    docker:
      - image: quay.io/deis/go-dev:v1.8.1
        environment:
          GOPATH: /go
    steps:
      - checkout
      - run: |
          echo 'export TIMEOUT=30m' >> $BASH_ENV
          echo 'export ORCHESTRATOR_RELEASE=1.9' >> $BASH_ENV
          echo 'export CLUSTER_DEFINITION=examples/e2e-tests/kubernetes/windows/definition.json' >> $BASH_ENV
          echo 'export CLEANUP_ON_EXIT=false' >> $BASH_ENV
          echo 'export RETAIN_SSH=false' >> $BASH_ENV
          echo 'export SUBSCRIPTION_ID=${SUBSCRIPTION_ID_E2E_KUBERNETES}' >> $BASH_ENV
          echo 'export CLIENT_ID=${SERVICE_PRINCIPAL_CLIENT_ID_E2E_KUBERNETES}' >> $BASH_ENV
          echo 'export CLIENT_SECRET=${SERVICE_PRINCIPAL_CLIENT_SECRET_E2E_KUBERNETES}' >> $BASH_ENV
      - run:
          name: ginkgo k8s windows e2e tests
          command: make build-binary test-kubernetes
          no_output_timeout: "30m"
      - store_artifacts:
          path: /go/src/github.com/Azure/acs-engine/_logs
      - store_artifacts:
          path: /go/src/github.com/Azure/acs-engine/_output
workflows:
  version: 2
  build_and_test_pr:
    jobs:
      - test:
          filters:
            branches:
              ignore: master
      - pr-e2e-hold:
          type: approval
          requires:
            - test
          filters:
            branches:
              ignore: master      
      - k8s-1.7-release-e2e:
          requires:
            - pr-e2e-hold
          filters:
            branches:
              ignore: master
      - k8s-windows-1.7-release-e2e:
          requires:
            - pr-e2e-hold
          filters:
            branches:
              ignore: master
      - k8s-1.8-release-e2e:
          requires:
            - pr-e2e-hold
          filters:
            branches:
              ignore: master
      - k8s-windows-1.8-release-e2e:
          requires:
            - pr-e2e-hold
          filters:
            branches:
              ignore: master
      - k8s-windows-1.9-release-e2e:
          requires:
            - pr-e2e-hold
          filters:
            branches:
              ignore: master
      - k8s-1.9-release-e2e:
          requires:
            - pr-e2e-hold
          filters:
            branches:
              ignore: master
      - swarm-e2e:
          requires:
            - pr-e2e-hold
          filters:
            branches:
              ignore: master
      - swarmmode-e2e:
          requires:
            - pr-e2e-hold
          filters:
            branches:
              ignore: master
      - dcos-e2e:
          requires:
            - pr-e2e-hold
          filters:
            branches:
              ignore: master
  build_and_test_master:
    jobs:
      - test:
          filters:
            branches:
              only: master
      - k8s-1.7-release-e2e:
          requires:
            - test
          filters:
            branches:
              only: master
      - k8s-windows-1.7-release-e2e:
          requires:
            - test
          filters:
            branches:
              only: master
      - k8s-1.8-release-e2e:
          requires:
            - test
          filters:
            branches:
              only: master
      - k8s-windows-1.8-release-e2e:
          requires:
            - test
          filters:
            branches:
              only: master
      - k8s-windows-1.9-release-e2e:
          requires:
            - test
          filters:
            branches:
              only: master
      - k8s-1.9-release-e2e:
          requires:
            - test
          filters:
            branches:
              only: master
      - swarm-e2e:
          requires:
            - test
          filters:
            branches:
              only: master
      - swarmmode-e2e:
          requires:
            - test
          filters:
            branches:
              only: master
      - dcos-e2e:
          requires:
            - test
          filters:
            branches:
              only: master

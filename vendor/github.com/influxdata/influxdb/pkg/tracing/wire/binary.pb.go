// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: binary.proto

/*
	Package wire is a generated protocol buffer package.

	It is generated from these files:
		binary.proto

	It has these top-level messages:
		SpanContext
		Span
		Trace
		Field
*/
package wire

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Field_FieldType int32

const (
	FieldTypeString   Field_FieldType = 0
	FieldTypeBool     Field_FieldType = 1
	FieldTypeInt64    Field_FieldType = 2
	FieldTypeUint64   Field_FieldType = 3
	FieldTypeDuration Field_FieldType = 4
	FieldTypeFloat64  Field_FieldType = 6
)

var Field_FieldType_name = map[int32]string{
	0: "STRING",
	1: "BOOL",
	2: "INT_64",
	3: "UINT_64",
	4: "DURATION",
	6: "FLOAT_64",
}
var Field_FieldType_value = map[string]int32{
	"STRING":   0,
	"BOOL":     1,
	"INT_64":   2,
	"UINT_64":  3,
	"DURATION": 4,
	"FLOAT_64": 6,
}

func (x Field_FieldType) String() string {
	return proto.EnumName(Field_FieldType_name, int32(x))
}
func (Field_FieldType) EnumDescriptor() ([]byte, []int) { return fileDescriptorBinary, []int{3, 0} }

type SpanContext struct {
	TraceID uint64 `protobuf:"varint,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanID  uint64 `protobuf:"varint,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
}

func (m *SpanContext) Reset()                    { *m = SpanContext{} }
func (m *SpanContext) String() string            { return proto.CompactTextString(m) }
func (*SpanContext) ProtoMessage()               {}
func (*SpanContext) Descriptor() ([]byte, []int) { return fileDescriptorBinary, []int{0} }

func (m *SpanContext) GetTraceID() uint64 {
	if m != nil {
		return m.TraceID
	}
	return 0
}

func (m *SpanContext) GetSpanID() uint64 {
	if m != nil {
		return m.SpanID
	}
	return 0
}

type Span struct {
	Context      SpanContext `protobuf:"bytes,1,opt,name=context" json:"context"`
	ParentSpanID uint64      `protobuf:"varint,2,opt,name=parent_span_id,json=parentSpanId,proto3" json:"parent_span_id,omitempty"`
	Name         string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Start        time.Time   `protobuf:"bytes,4,opt,name=start_time,json=startTime,stdtime" json:"start_time"`
	Labels       []string    `protobuf:"bytes,5,rep,name=labels" json:"labels,omitempty"`
	Fields       []Field     `protobuf:"bytes,6,rep,name=fields" json:"fields"`
}

func (m *Span) Reset()                    { *m = Span{} }
func (m *Span) String() string            { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()               {}
func (*Span) Descriptor() ([]byte, []int) { return fileDescriptorBinary, []int{1} }

func (m *Span) GetContext() SpanContext {
	if m != nil {
		return m.Context
	}
	return SpanContext{}
}

func (m *Span) GetParentSpanID() uint64 {
	if m != nil {
		return m.ParentSpanID
	}
	return 0
}

func (m *Span) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Span) GetStart() time.Time {
	if m != nil {
		return m.Start
	}
	return time.Time{}
}

func (m *Span) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Span) GetFields() []Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

type Trace struct {
	Spans []*Span `protobuf:"bytes,1,rep,name=spans" json:"spans,omitempty"`
}

func (m *Trace) Reset()                    { *m = Trace{} }
func (m *Trace) String() string            { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()               {}
func (*Trace) Descriptor() ([]byte, []int) { return fileDescriptorBinary, []int{2} }

func (m *Trace) GetSpans() []*Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

type Field struct {
	Key       string          `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	FieldType Field_FieldType `protobuf:"varint,2,opt,name=field_type,json=fieldType,proto3,enum=wire.Field_FieldType" json:"field_type,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*Field_NumericVal
	//	*Field_StringVal
	Value isField_Value `protobuf_oneof:"value"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptorBinary, []int{3} }

type isField_Value interface {
	isField_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Field_NumericVal struct {
	NumericVal int64 `protobuf:"fixed64,3,opt,name=numeric_val,json=numericVal,proto3,oneof"`
}
type Field_StringVal struct {
	StringVal string `protobuf:"bytes,4,opt,name=string_val,json=stringVal,proto3,oneof"`
}

func (*Field_NumericVal) isField_Value() {}
func (*Field_StringVal) isField_Value()  {}

func (m *Field) GetValue() isField_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Field) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Field) GetFieldType() Field_FieldType {
	if m != nil {
		return m.FieldType
	}
	return FieldTypeString
}

func (m *Field) GetNumericVal() int64 {
	if x, ok := m.GetValue().(*Field_NumericVal); ok {
		return x.NumericVal
	}
	return 0
}

func (m *Field) GetStringVal() string {
	if x, ok := m.GetValue().(*Field_StringVal); ok {
		return x.StringVal
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Field) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Field_OneofMarshaler, _Field_OneofUnmarshaler, _Field_OneofSizer, []interface{}{
		(*Field_NumericVal)(nil),
		(*Field_StringVal)(nil),
	}
}

func _Field_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Field)
	// value
	switch x := m.Value.(type) {
	case *Field_NumericVal:
		_ = b.EncodeVarint(3<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.NumericVal))
	case *Field_StringVal:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.StringVal)
	case nil:
	default:
		return fmt.Errorf("Field.Value has unexpected type %T", x)
	}
	return nil
}

func _Field_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Field)
	switch tag {
	case 3: // value.numeric_val
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &Field_NumericVal{int64(x)}
		return true, err
	case 4: // value.string_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Field_StringVal{x}
		return true, err
	default:
		return false, nil
	}
}

func _Field_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Field)
	// value
	switch x := m.Value.(type) {
	case *Field_NumericVal:
		n += proto.SizeVarint(3<<3 | proto.WireFixed64)
		n += 8
	case *Field_StringVal:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringVal)))
		n += len(x.StringVal)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*SpanContext)(nil), "wire.SpanContext")
	proto.RegisterType((*Span)(nil), "wire.Span")
	proto.RegisterType((*Trace)(nil), "wire.Trace")
	proto.RegisterType((*Field)(nil), "wire.Field")
	proto.RegisterEnum("wire.Field_FieldType", Field_FieldType_name, Field_FieldType_value)
}
func (m *SpanContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanContext) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TraceID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBinary(dAtA, i, uint64(m.TraceID))
	}
	if m.SpanID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBinary(dAtA, i, uint64(m.SpanID))
	}
	return i, nil
}

func (m *Span) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Span) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintBinary(dAtA, i, uint64(m.Context.Size()))
	n1, err := m.Context.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.ParentSpanID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBinary(dAtA, i, uint64(m.ParentSpanID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBinary(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintBinary(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Start)))
	n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Start, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Labels) > 0 {
		for _, s := range m.Labels {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Fields) > 0 {
		for _, msg := range m.Fields {
			dAtA[i] = 0x32
			i++
			i = encodeVarintBinary(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Trace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Spans) > 0 {
		for _, msg := range m.Spans {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBinary(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Field) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Field) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBinary(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.FieldType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBinary(dAtA, i, uint64(m.FieldType))
	}
	if m.Value != nil {
		nn3, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *Field_NumericVal) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x19
	i++
	i = encodeFixed64Binary(dAtA, i, uint64(m.NumericVal))
	return i, nil
}
func (m *Field_StringVal) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x22
	i++
	i = encodeVarintBinary(dAtA, i, uint64(len(m.StringVal)))
	i += copy(dAtA[i:], m.StringVal)
	return i, nil
}
func encodeFixed64Binary(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Binary(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBinary(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SpanContext) Size() (n int) {
	var l int
	_ = l
	if m.TraceID != 0 {
		n += 1 + sovBinary(uint64(m.TraceID))
	}
	if m.SpanID != 0 {
		n += 1 + sovBinary(uint64(m.SpanID))
	}
	return n
}

func (m *Span) Size() (n int) {
	var l int
	_ = l
	l = m.Context.Size()
	n += 1 + l + sovBinary(uint64(l))
	if m.ParentSpanID != 0 {
		n += 1 + sovBinary(uint64(m.ParentSpanID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBinary(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Start)
	n += 1 + l + sovBinary(uint64(l))
	if len(m.Labels) > 0 {
		for _, s := range m.Labels {
			l = len(s)
			n += 1 + l + sovBinary(uint64(l))
		}
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovBinary(uint64(l))
		}
	}
	return n
}

func (m *Trace) Size() (n int) {
	var l int
	_ = l
	if len(m.Spans) > 0 {
		for _, e := range m.Spans {
			l = e.Size()
			n += 1 + l + sovBinary(uint64(l))
		}
	}
	return n
}

func (m *Field) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovBinary(uint64(l))
	}
	if m.FieldType != 0 {
		n += 1 + sovBinary(uint64(m.FieldType))
	}
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *Field_NumericVal) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *Field_StringVal) Size() (n int) {
	var l int
	_ = l
	l = len(m.StringVal)
	n += 1 + l + sovBinary(uint64(l))
	return n
}

func sovBinary(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBinary(x uint64) (n int) {
	return sovBinary(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SpanContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpanContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpanContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
			}
			m.TraceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraceID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanID", wireType)
			}
			m.SpanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpanID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBinary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBinary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Span) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Span: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Span: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinary
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Context.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentSpanID", wireType)
			}
			m.ParentSpanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentSpanID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBinary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinary
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Start, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBinary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinary
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, Field{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBinary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Trace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBinary
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spans = append(m.Spans, &Span{})
			if err := m.Spans[len(m.Spans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBinary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Field) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBinary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Field: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Field: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBinary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldType", wireType)
			}
			m.FieldType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldType |= (Field_FieldType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumericVal", wireType)
			}
			var v int64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = int64(dAtA[iNdEx-8])
			v |= int64(dAtA[iNdEx-7]) << 8
			v |= int64(dAtA[iNdEx-6]) << 16
			v |= int64(dAtA[iNdEx-5]) << 24
			v |= int64(dAtA[iNdEx-4]) << 32
			v |= int64(dAtA[iNdEx-3]) << 40
			v |= int64(dAtA[iNdEx-2]) << 48
			v |= int64(dAtA[iNdEx-1]) << 56
			m.Value = &Field_NumericVal{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBinary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBinary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &Field_StringVal{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBinary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBinary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBinary(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBinary
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBinary
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBinary
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBinary
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBinary
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBinary(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBinary = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBinary   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("binary.proto", fileDescriptorBinary) }

var fileDescriptorBinary = []byte{
	// 624 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0x41, 0x6f, 0xda, 0x4c,
	0x10, 0xc5, 0xc1, 0x98, 0x78, 0x48, 0xf8, 0xcc, 0x7e, 0x4d, 0x85, 0x5c, 0x09, 0x5b, 0x44, 0xaa,
	0xc8, 0xa1, 0x8e, 0x92, 0x46, 0xdc, 0xe3, 0xa0, 0xb4, 0x96, 0x22, 0xa8, 0x0c, 0xe9, 0xa1, 0x17,
	0xb4, 0xc0, 0x42, 0xad, 0x1a, 0xaf, 0x65, 0x2f, 0x69, 0xf9, 0x07, 0x15, 0xa7, 0x9c, 0x7a, 0xe3,
	0xd4, 0x43, 0xff, 0x4a, 0x8e, 0x3d, 0xf7, 0xe0, 0x56, 0xee, 0x1f, 0xa9, 0x76, 0x0d, 0x26, 0xed,
	0xc5, 0x9a, 0x99, 0xf7, 0xe6, 0xbd, 0x9d, 0x27, 0xc3, 0xc1, 0xc8, 0x0b, 0x70, 0xb4, 0xb4, 0xc2,
	0x88, 0x32, 0x8a, 0xe4, 0x8f, 0x5e, 0x44, 0xf4, 0x17, 0x33, 0x8f, 0xbd, 0x5f, 0x8c, 0xac, 0x31,
	0x9d, 0x9f, 0xce, 0xe8, 0x8c, 0x9e, 0x0a, 0x70, 0xb4, 0x98, 0x8a, 0x4e, 0x34, 0xa2, 0xca, 0x96,
	0x74, 0x63, 0x46, 0xe9, 0xcc, 0x27, 0x3b, 0x16, 0xf3, 0xe6, 0x24, 0x66, 0x78, 0x1e, 0x66, 0x84,
	0xe6, 0x3b, 0xa8, 0xf4, 0x43, 0x1c, 0x5c, 0xd1, 0x80, 0x91, 0x4f, 0x0c, 0x3d, 0x87, 0x7d, 0x16,
	0xe1, 0x31, 0x19, 0x7a, 0x93, 0xba, 0x64, 0x4a, 0x2d, 0xd9, 0xae, 0xa4, 0x89, 0x51, 0x1e, 0xf0,
	0x99, 0xd3, 0x71, 0xcb, 0x02, 0x74, 0x26, 0xe8, 0x18, 0xca, 0x71, 0x88, 0x03, 0x4e, 0xdb, 0x13,
	0x34, 0x48, 0x13, 0x43, 0xe1, 0x4a, 0x4e, 0xc7, 0x55, 0x38, 0xe4, 0x4c, 0x9a, 0x5f, 0xf6, 0x40,
	0xe6, 0x23, 0x74, 0x06, 0xe5, 0x71, 0x66, 0x20, 0x44, 0x2b, 0xe7, 0x35, 0x8b, 0x1f, 0x63, 0x3d,
	0x72, 0xb6, 0xe5, 0x87, 0xc4, 0x28, 0xb8, 0x5b, 0x1e, 0x6a, 0x43, 0x35, 0xc4, 0x11, 0x09, 0xd8,
	0xf0, 0x6f, 0x1f, 0x2d, 0x4d, 0x8c, 0x83, 0x37, 0x02, 0xd9, 0xb8, 0x1d, 0x84, 0xbb, 0x6e, 0x82,
	0x10, 0xc8, 0x01, 0x9e, 0x93, 0x7a, 0xd1, 0x94, 0x5a, 0xaa, 0x2b, 0x6a, 0x74, 0x03, 0x10, 0x33,
	0x1c, 0xb1, 0x21, 0x3f, 0xbe, 0x2e, 0x8b, 0x17, 0xe8, 0x56, 0x96, 0x8c, 0xb5, 0x4d, 0xc6, 0x1a,
	0x6c, 0x93, 0xb1, 0x6b, 0xfc, 0x29, 0x69, 0x62, 0x94, 0xfa, 0x7c, 0xeb, 0xfe, 0xa7, 0x21, 0xb9,
	0xaa, 0x10, 0xe0, 0x14, 0xf4, 0x14, 0x14, 0x1f, 0x8f, 0x88, 0x1f, 0xd7, 0x4b, 0x66, 0xb1, 0xa5,
	0xba, 0x9b, 0x0e, 0x9d, 0x80, 0x32, 0xf5, 0x88, 0x3f, 0x89, 0xeb, 0x8a, 0x59, 0x6c, 0x55, 0xce,
	0x2b, 0xd9, 0x8d, 0xd7, 0x7c, 0xb6, 0xb9, 0x6e, 0x43, 0x68, 0x9e, 0x40, 0x49, 0x24, 0x8a, 0x4c,
	0x28, 0xf1, 0xf3, 0xe2, 0xba, 0x24, 0x56, 0x60, 0x17, 0x8b, 0x9b, 0x01, 0xcd, 0x6f, 0x45, 0x28,
	0x09, 0x09, 0xa4, 0x41, 0xf1, 0x03, 0x59, 0x8a, 0x00, 0x55, 0x97, 0x97, 0xe8, 0x0a, 0x40, 0x08,
	0x0e, 0xd9, 0x32, 0x24, 0x22, 0x9f, 0xea, 0xf9, 0xd1, 0x23, 0xd7, 0xec, 0x3b, 0x58, 0x86, 0xc4,
	0x3e, 0x4c, 0x13, 0x43, 0xcd, 0x5b, 0x57, 0x9d, 0x6e, 0x4b, 0x74, 0x06, 0x95, 0x60, 0x31, 0x27,
	0x91, 0x37, 0x1e, 0xde, 0x61, 0x5f, 0xe4, 0xa6, 0xd9, 0xd5, 0x34, 0x31, 0xa0, 0x9b, 0x8d, 0xdf,
	0x62, 0xff, 0x75, 0xc1, 0x85, 0x20, 0xef, 0x90, 0xc5, 0xf3, 0x8c, 0xbc, 0x60, 0x26, 0x36, 0x78,
	0x9e, 0x6a, 0x66, 0xd0, 0x17, 0xd3, 0x6c, 0x41, 0x8d, 0xb7, 0x4d, 0xf3, 0x87, 0x04, 0x3b, 0x6f,
	0x64, 0x80, 0xd2, 0x1f, 0xb8, 0x4e, 0xf7, 0x95, 0x56, 0xd0, 0xff, 0x5f, 0xad, 0xcd, 0xff, 0x72,
	0x28, 0x5b, 0x47, 0xcf, 0x40, 0xb6, 0x7b, 0xbd, 0x1b, 0x4d, 0xd2, 0x6b, 0xab, 0xb5, 0x79, 0xb8,
	0x3b, 0x82, 0x52, 0x1f, 0x35, 0x40, 0x71, 0xba, 0x83, 0x61, 0xfb, 0x42, 0xdb, 0xd3, 0xd1, 0x6a,
	0x6d, 0x56, 0x73, 0xd8, 0x09, 0x58, 0xfb, 0x02, 0x99, 0x50, 0xbe, 0xdd, 0x10, 0x8a, 0xff, 0xc8,
	0xdf, 0x7a, 0x82, 0x71, 0x0c, 0xfb, 0x9d, 0x5b, 0xf7, 0x72, 0xe0, 0xf4, 0xba, 0x9a, 0xac, 0x1f,
	0xad, 0xd6, 0x66, 0x2d, 0xa7, 0x74, 0x16, 0x11, 0x66, 0x1e, 0x0d, 0x50, 0x13, 0xf6, 0xaf, 0x6f,
	0x7a, 0x97, 0x42, 0x47, 0xd1, 0x9f, 0xac, 0xd6, 0xa6, 0x96, 0x93, 0xae, 0x7d, 0x8a, 0x59, 0xfb,
	0x42, 0x97, 0x3f, 0x7f, 0x6d, 0x14, 0xec, 0x32, 0x94, 0xee, 0xb0, 0xbf, 0x20, 0xb6, 0xf6, 0x90,
	0x36, 0xa4, 0xef, 0x69, 0x43, 0xfa, 0x95, 0x36, 0xa4, 0xfb, 0xdf, 0x8d, 0xc2, 0x48, 0x11, 0xff,
	0xd6, 0xcb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x10, 0xad, 0x27, 0x39, 0xc8, 0x03, 0x00, 0x00,
}

// Code generated by go-bindata.
// sources:
// master/etc/etcd/etcd.conf
// master/etc/origin/master/htpasswd
// master/etc/origin/master/master-config.yaml
// master/etc/origin/master/scheduler.json
// master/etc/origin/master/session-secrets.yaml
// master/tmp/ansible/ansible.sh
// master/tmp/ansible/azure-local-master-inventory.yml
// master/tmp/ansible/azure-ocp-deploy.yml
// master/tmp/ansible/service-catalog.yaml
// master/tmp/bootstrapconfigs/compute-config.yaml
// master/tmp/bootstrapconfigs/infra-config.yaml
// master/tmp/bootstrapconfigs/master-config.yaml
// node/etc/azure/azure.conf
// node/etc/origin/node/node-dnsmasq.conf
// node/etc/origin/node/resolv.conf
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterEtcEtcdEtcdConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4f\x6f\xfa\x46\x10\xbd\xfb\x53\xa0\xe5\xd2\x1e\x02\x0e\xf9\x57\x22\xed\x61\x59\x0f\x61\xc5\x62\xd3\xdd\x31\x04\x45\xd1\x8a\x10\x43\xac\x12\x40\xb6\x49\x13\x21\xbe\x7b\xe5\x3f\x60\x12\x48\x55\x35\xbf\x1b\xcc\x7b\x9e\x7d\x33\xef\x0d\x20\x77\x8c\xcb\x7a\x40\x37\x9b\x4a\xad\x37\x8e\x93\x20\xaa\x75\x96\x71\xb2\x18\xbf\x06\x95\xed\xd6\xca\x08\x52\x68\x04\xd7\xf4\x01\x94\xf1\x95\xd4\xf4\x25\x49\x56\xf1\x6d\xbd\xbe\xd9\x54\x7e\x0b\x17\xcf\xc1\xfb\xfe\x5b\xd1\x8f\x2b\xf6\xef\x35\x9d\x44\xe1\x62\x56\xd9\x6e\x6f\x1b\x17\x7f\xd8\x79\x17\x87\x21\x33\x8e\x50\xb4\xfe\x36\x8e\xea\xf3\xf0\xa9\x1e\x24\x93\xe7\xba\x55\xcd\xd0\x21\x93\x19\x48\x48\x51\xd0\x2e\xeb\xeb\x8e\x87\x86\x7b\xbe\x8b\xf4\xdc\xb6\xed\xa2\x51\x07\x98\xc2\x16\x30\x34\xc2\x45\x50\x03\x26\xe9\xd5\x0e\x03\x09\x1c\x85\xe7\x1a\x14\x3d\xf0\x7c\xa4\x8d\x3d\x54\x4c\xc1\xa5\x00\x17\xff\xc7\x1c\x37\xcd\x42\x59\x8f\xdd\xef\xd5\x69\x7a\x75\x50\x1d\x32\x59\x16\xb8\xa7\x34\xb5\x2c\xab\xfa\x30\x99\xaf\xd3\xa6\x8f\xb9\x0e\xe1\x0a\x14\x4c\x1a\xe6\x0c\x40\xa1\xd0\xf0\xd3\xc5\xee\x1a\x72\xe9\x6b\x04\xf5\x8d\x95\xbf\xa4\xb7\xd1\xc8\x10\xe8\x22\xf8\xfb\x34\x8c\x5e\x17\x5c\x9a\xfa\x7a\x56\x0c\x7d\x76\x5e\xac\xc3\x11\x9a\x7b\x03\x50\x23\xfa\xb5\x60\xb4\x1a\x1c\x17\xdb\x4c\xca\x16\xe3\x5d\xba\x8a\x96\xef\x1f\x47\x70\x5f\x79\xf7\x23\x9a\xab\x28\x37\xf9\x73\x73\x35\x2a\xc1\xd1\x28\xe0\x9e\xdb\x16\x77\x86\x77\x80\x77\x29\x99\x8e\xe7\x71\xb0\x8b\x26\xf3\xd1\x33\xdc\xeb\xf5\x59\x9e\x35\x05\x08\x6e\xfa\x8b\x12\x7b\xc7\x01\x97\xb5\x24\x98\x41\x83\x92\x24\x5a\x07\x24\x57\xfa\xa7\xef\x21\x33\xe9\x58\xe0\x3a\xa6\x35\x42\xd0\xf4\xb2\xd1\xbc\x6c\x5e\xdf\x34\x9a\xd7\x69\x56\xb2\x69\x1f\x8b\x26\xf9\x90\xcb\xe9\xf4\xf0\xbf\x69\x33\x21\x7d\x05\x66\xc8\x04\x52\x72\x65\xdb\xfb\x47\x73\x5c\x41\x5b\x81\xee\x94\xd7\x41\x2e\xec\x23\x92\x93\xda\xb6\x3b\x12\x72\x7e\x84\x0f\x95\x40\x28\x09\xa7\x5e\x61\x4e\x89\xdb\x24\x15\x1f\x07\x93\x75\x14\x26\x1f\x45\xd2\x51\xa5\xa9\x70\x0c\x67\xa6\x2d\x24\xd0\xf4\xe0\xf3\xa3\x9f\x8c\x6b\x93\x28\xc9\x59\x85\x67\x1c\x14\xa6\x9b\xed\x7c\x5a\x58\x56\xfd\xf2\x71\x1c\x44\x6f\x41\x54\x36\xe8\xc2\xe8\x1b\xca\x5f\xc1\xc7\xa1\x65\x28\xf5\xde\xc9\x7c\x92\xf4\xf0\xfe\x9b\xca\x8c\xfa\xaf\x52\x73\xc6\x09\xbd\xab\xe0\x50\x6d\x46\x3b\x21\x39\x63\x95\x82\x33\xda\x91\x6a\xab\xfa\x30\x5f\xce\x66\xe1\x62\x56\xac\xd8\x81\x96\x7f\x47\x49\x7b\x0f\xaf\xa2\xe5\x34\x9c\x67\x84\x4f\x41\xec\xf7\x95\xd7\xfe\x92\xe3\x1e\xa4\x61\xd7\x94\x3c\x8d\xe3\x70\x42\xac\xaa\x55\x7d\x18\xaf\x93\x97\xc7\x72\x69\x9d\xe2\xa4\x49\x1c\xbe\xae\xe6\x01\xb1\xfe\x09\x00\x00\xff\xff\x41\xcc\xdb\x7e\x32\x06\x00\x00")

func masterEtcEtcdEtcdConfBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdEtcdConf,
		"master/etc/etcd/etcd.conf",
	)
}

func masterEtcEtcdEtcdConf() (*asset, error) {
	bytes, err := masterEtcEtcdEtcdConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/etcd.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterHtpasswd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\xd0\x73\xce\x29\x2d\x2e\x49\x2d\x0a\x2d\x4e\x2d\xca\x4b\xcc\x4d\x55\xa8\xad\xb5\xaa\xae\x56\x70\x4a\x2e\xaa\x2c\x28\x81\xcb\x06\x24\x16\x17\x97\xe7\x17\xa5\x28\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x48\x7d\x31\x4a\x35\x00\x00\x00")

func masterEtcOriginMasterHtpasswdBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterHtpasswd,
		"master/etc/origin/master/htpasswd",
	)
}

func masterEtcOriginMasterHtpasswd() (*asset, error) {
	bytes, err := masterEtcOriginMasterHtpasswdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/htpasswd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xfb\x6f\x1b\xb9\xf1\xff\x5d\x7f\x05\x61\x1c\xe0\xe4\x8b\xef\xae\x24\x3b\xcf\x05\x8a\x42\xf5\x39\x17\xe1\xec\x44\x95\x9d\xe2\x8a\xba\x38\x50\xe4\x68\xc5\x88\x4b\xee\xf1\xa1\x58\x71\xf3\xbf\x17\x7c\xec\x2e\x57\x8f\x38\xcd\x5d\x51\x27\xb0\x25\xf2\x33\xc3\xe1\xbc\x87\x98\x56\x4c\x6b\x26\xc5\x85\x14\x4b\x56\x16\x03\x84\x6a\x6e\x4b\x96\x7c\x47\xe8\x2f\x96\x71\xfa\x23\x2c\xb1\xe5\x46\x87\x25\x84\x88\x07\x58\x85\x0d\x93\xa2\x59\x44\x08\xd7\xec\x6f\xa0\x1c\xc7\x02\x6d\xc6\xed\x32\x88\x4d\x81\xfe\xf1\xcf\xf6\xfb\x9a\x09\x5a\xf4\x19\x87\x13\x5b\x84\x02\x2d\xad\x22\xa0\x3b\xde\x08\x71\x56\x31\xa3\x0b\xf4\xf0\x25\x59\x54\xf0\x9b\x05\x9d\x2c\x7b\xb6\xef\x37\xa0\x14\xa3\xf0\x9d\x02\x27\x02\xb6\x9c\x12\x09\x67\x92\xce\x14\x68\x30\xdf\xc7\x9d\x32\x8d\x17\x1c\x0a\xb4\xc4\x5c\xc3\xce\xa1\x51\x21\x93\xbe\x69\x3c\x48\xd6\x20\xf4\x8a\x2d\x4d\xce\xe4\x70\x5a\xe1\x12\x66\x92\x33\xb2\xfd\x4e\xa3\xdc\x03\xb1\x0e\x39\xb7\x3c\xd5\x73\x86\x2a\x6c\xc8\xca\xf3\x9f\x08\x21\x8d\x67\xd7\x33\x44\x86\xd6\xb0\x2d\x10\x73\x10\x9d\xf7\xc4\xa2\x20\xb6\x59\xcb\x3a\xa1\x41\x68\x83\xb9\x85\x02\x9d\x1a\x65\xe1\x34\xd9\x11\xb8\x82\xa2\x13\x27\xa3\x20\x18\xd0\x04\x20\xc5\xfc\x90\x3b\x64\xad\x97\x14\xa8\x96\x54\x1f\xd9\x5a\x38\x2b\xea\x9e\xc7\x7c\x04\x62\x0a\xe4\xe4\x48\x96\xf5\x9a\xd5\xef\xfd\x49\xdc\xcb\xf1\x06\x33\x6e\x15\xec\xe0\x82\x91\x12\xe5\x47\xfb\xe0\xb2\x54\x50\x62\x23\x55\x12\x4b\x4a\xde\x6f\x2f\x38\x03\x61\xa6\x62\x29\x83\xec\x04\x94\x79\xc3\x9c\xf5\x3b\x92\x6c\xa9\xa4\x30\x99\xc7\xe7\x44\x19\x0f\x5c\xc3\xf6\xab\xb8\x35\x6c\x07\xb8\x66\x57\xb0\x01\xae\x8b\x41\xe6\x6c\xbb\x63\x6a\x6c\xcd\xaa\x13\x27\x46\xca\x5b\xc0\x14\x54\x14\xc6\x0b\x77\x31\x29\x50\xc2\x39\x23\xb8\x15\x22\x02\x64\x55\x49\xf1\x0e\x57\x8d\x01\xb2\x23\x42\x0d\x82\x63\x19\x85\xc3\x29\x33\x05\x4b\x76\xdf\x51\xfd\x92\xcd\xa1\x92\x06\xb2\x4b\x87\xc9\xfc\x6a\xa9\xa4\xad\x03\x7c\x1f\xf7\x93\xdb\xf4\x8b\x56\x83\x72\x9e\x72\x0c\xf9\x41\x83\x1a\x10\x29\x8c\x92\x9c\x43\x62\x05\xe0\x40\xba\x80\xe0\x92\xac\xdf\x79\x87\x6b\xdd\x36\xab\xb0\x36\xa0\xb2\x8e\xd8\x79\x8b\x06\xb5\x61\x04\x6e\xdc\x1f\x51\x5e\x80\x8a\xc1\xae\x59\x29\x1a\xf5\xa5\xd6\x8c\xf8\x2c\xec\xb7\x0a\x4c\xec\xb8\x83\x70\xf6\x4b\x8e\x2c\xd0\xe9\xff\x9d\x0e\x88\x54\x7a\xc2\xb9\xfc\x04\xf4\xbd\x62\x25\x13\xde\xb2\x4f\xfe\xcc\x9e\x0e\x87\xe3\xb3\x97\x77\xf9\xc8\xff\x1f\x3f\x29\xfe\x75\xf7\xf9\x69\xbb\xc5\x25\xc1\x7c\x25\xb5\xd9\x59\x7f\x78\x40\x7f\xb5\xd2\xc0\x35\x18\x8c\x9e\x30\x41\xe1\x1e\xe5\xd7\xfe\xba\xf9\x74\xa6\xd1\xe8\x69\x7e\x63\x14\x13\x25\xfa\xf2\x65\x87\x74\x6d\x17\xa0\x04\x18\xd0\x77\x39\x0d\x39\xe9\x71\xc4\x5d\xae\x37\xe4\x2e\x27\xdc\xba\x23\xee\x72\x2f\xd7\x51\xb2\xaf\x09\x9b\x5f\xde\x1b\x67\x70\x1e\xa4\x7d\x2b\xb5\x71\xd6\xdf\x97\xb3\x35\xe3\x31\x31\xfb\x6c\xe3\xe5\xff\x13\x7e\xfe\x52\xdf\x78\xf7\x1d\xd8\xf8\xe5\xd9\x5d\x7e\x7e\xd8\x66\x47\x0e\x7a\x44\x7b\x2d\x55\x5c\xa7\x42\x77\xae\xbe\x60\x82\x4e\x28\x55\xa0\x75\x81\x46\xb9\xff\x57\xbc\x1a\x3d\x3f\x8f\x7b\xef\xc0\x7c\x92\x6a\x5d\x20\x43\xea\x67\x03\x30\x84\xf6\xb3\x13\xc1\x05\x0a\xc1\x90\xbb\xcd\x2e\x11\x74\x6e\xde\xdb\xf6\xc4\x11\xd2\xba\xf9\x01\x84\x73\x75\x84\xac\xe2\x3e\x6c\x33\xb4\x32\xa6\xd6\x85\x37\xcd\x01\x83\x14\x67\xe7\x2f\x5f\x7b\xe9\x6e\x8c\x54\xb8\x84\xee\x82\x9d\xda\xe3\x56\x48\x30\x45\xb2\x91\x33\x79\x08\xd8\xaf\x80\x4e\x8b\x37\x4e\x8b\x3b\x6c\xd2\x52\x76\x00\x96\x32\xf1\xc5\xaf\x93\x6c\x29\x55\x85\x4d\x81\xa6\xd7\x93\x9f\x2e\x7f\x9d\xcd\x2f\xdf\x4c\x7f\x19\x86\x2f\xb7\x7f\x9f\x5d\x66\x3f\x3c\x10\x59\xd5\x52\x80\x30\x5f\x8a\x1f\x1e\x36\x81\x93\xeb\x58\x38\x36\xa0\x4d\xd3\x0c\x84\xfa\x12\x94\x12\x4b\x8b\xbb\x0b\x07\xb3\x6f\x2a\x82\xb3\x85\x15\x94\xc3\x31\x2b\x45\xca\xaf\x1b\x6a\x07\x14\x6c\x55\x4b\x65\x0a\x34\x1e\x9d\x3d\x1f\x0d\x3a\x5d\xa6\x62\x39\x21\x70\xcd\x5c\x7e\x04\x35\x51\xa5\xad\x40\x34\xfd\xa1\xb2\xc2\xb0\x0a\x32\x92\xb4\x91\x99\x43\xeb\xa1\x06\x63\x98\x28\x75\xbe\x7e\xe5\x4c\x35\xdc\x8c\x31\xaf\x57\x78\xfc\xa7\xb6\xca\xea\xa0\xeb\x6c\x81\xc9\x1a\x04\x6d\xa8\x9d\x3f\x9c\xf7\x00\x15\x50\x86\x33\xb3\xad\xa1\x3b\xa1\xe6\x8c\xf8\x7e\x65\xb8\x11\x34\x4f\xbc\xa2\x56\xd2\xc8\x85\x5d\xc6\xaa\x26\x2d\x75\x15\x6b\xc3\xda\x52\x98\xa1\x13\xfc\xd9\x2a\x38\x49\x10\x7d\xf9\x4f\x86\x60\xc8\xd0\x83\xc2\xef\xdc\xed\x3b\x7c\x97\xc6\x77\x14\x11\x43\xd9\xa7\x7c\x26\xca\xcc\x59\x28\x5b\x3a\xed\xf7\x78\x4a\x9f\xea\x87\xc1\x20\xc3\x10\x75\x27\x07\x19\xac\x61\xfb\x2d\xf4\x6b\xd8\x9e\xfc\x57\x6e\x5a\x45\x0f\xb0\xc2\xb9\x47\xbb\x30\x9d\x15\xe8\xe1\xe1\xb1\x0a\xe3\xfd\x8a\x5e\x6e\x98\xaf\xc7\xb7\xac\x02\x69\x4d\x81\x84\xe5\xfc\xf1\x6e\x29\x7a\x6b\xec\x50\x52\x87\xde\x77\xe9\x1e\x28\x38\xb4\x26\x2b\xa0\xb6\x67\xa1\xe6\xe0\x76\x2b\x38\x76\xe0\x74\x40\xaf\x2d\x2e\xff\xa8\x7d\x6b\x1b\x0b\xba\x7e\x27\x29\xcc\xa4\x32\x73\x2c\x4a\xd7\xe0\x9e\x26\x7b\x37\x76\x21\xc0\xe9\xea\xe5\x59\x7e\xee\x13\xf2\x70\xfc\xc2\xed\xbb\xb6\x9a\x38\xca\xd0\x56\xb9\xf1\x28\x2a\xd7\x8b\xed\x1d\x08\x62\x0d\xfc\xb9\xf5\xe3\x8b\xd8\x8f\x09\x11\x9a\x9a\x9d\x39\x07\x13\x02\xb5\xdb\x36\x20\xcc\xed\xb6\x76\x8c\xbf\x21\x28\xfe\x3f\xc5\xc4\xcb\x21\xb4\xb0\xca\xe5\xa5\x67\xa3\xd1\x20\x4e\x17\x0d\xd7\x6f\x62\xea\x89\x7e\xab\x75\x81\xce\x3c\x87\xfd\xcb\xb8\x4f\x31\x99\x04\xa5\xb5\xe9\xf7\x4a\xca\xda\xc5\xff\xff\xe0\xba\x2f\x7e\xf7\x75\xcf\x3d\x87\xbd\xbb\xa4\xb7\xdd\xed\x3d\x3d\xc3\x10\x83\xd1\x0b\x66\x76\xc1\x19\xf9\x30\xbf\x2a\x7a\xd5\xf2\x68\x57\x54\x24\xb5\xd4\xf9\xa2\x0b\x37\x11\xca\x7d\x97\xaf\x63\x36\x89\x6d\xc0\xc5\xf4\xc7\xb9\xcb\xf1\xf9\xf8\xec\x55\x70\xcc\x67\x7b\x98\x58\xb0\x09\xa3\x6a\x1f\x8a\x90\x6b\x39\x83\x87\x5f\x81\x28\xcd\xaa\x40\xaf\x13\x4b\x4f\x67\xc9\x49\x91\x53\xec\x4a\x86\x4e\x45\x87\xa9\xa3\xd4\x33\xff\x10\x11\x5a\x75\x05\x74\x85\x4d\xd7\xfb\x64\x72\xa3\x33\xed\x29\xbb\x50\xeb\xdf\xaa\x17\x6e\xb2\x3f\x08\x61\xad\xc1\xfc\x01\x0a\x1e\x12\x29\xb4\xe4\x30\x1c\xb8\x29\x06\x7b\x47\x6d\xb3\x68\x05\x66\x25\x69\x81\xb0\x35\xae\x95\x60\x14\x84\x61\x66\x3b\x8b\xa9\xb8\x51\xec\x0a\x73\x0e\x3e\x6d\xb4\x05\x90\xcb\x92\x89\xe4\x7b\x85\xeb\x9a\x89\xf2\x3a\x32\x24\x1c\xb3\x6a\xd0\x0d\xce\x2b\x53\x63\xad\x3f\xd1\x5f\xdd\x25\xfd\x7a\x3f\xdd\x1f\x79\x00\x58\x1e\x4b\x73\x0d\xbf\x41\x3a\xf0\xbe\xbd\x9d\xf9\x45\xff\x5b\x2a\x3a\xdd\xb9\x4e\x57\x1a\x26\xfb\x7d\xc9\x1f\xe7\xd1\x0d\xaf\xdf\xcb\x45\xc3\xce\xb3\x57\xbb\x74\x8d\xef\x27\x25\xdc\xb8\x60\xa4\x2e\x96\x9b\x74\x10\xb7\x83\x3f\x6a\x2d\xd2\xc5\x1b\x20\x0a\x8c\x3e\x5e\x38\x02\x2c\xd3\x01\x97\x6f\x71\xe5\xea\x8e\x91\x6b\xe8\x89\xe0\xd2\x99\xd6\xb7\x6e\x79\x47\x8c\x57\x2f\x9a\x2c\xec\x8c\x2c\x15\xfb\x0c\x87\x60\xcf\x47\xa3\x41\x8d\xad\x76\x79\xa6\x9b\x2b\x43\x63\x59\x27\xaf\x15\x7e\x56\x90\xd2\x68\xa3\x70\x1d\x9e\x31\x8e\x0a\x1f\xe8\x9a\x92\xd7\x86\xe0\x54\x2c\x15\xd6\x46\x59\x62\xac\x0a\x35\xac\xc6\xa4\x37\x56\x33\x07\x49\x69\x6e\x56\x58\x01\x6d\xdf\x72\x0e\x11\x0d\x6a\x25\x3f\x02\x49\x22\x29\xce\x46\xae\x52\xde\xf8\x51\x5e\xaa\x02\x09\x49\x21\x53\x92\x43\xde\x6b\xfc\x87\xae\xc7\xb6\x06\x9a\x66\x32\x32\x9b\x87\x87\x8f\x6b\xd0\x1a\xb7\x05\xba\xbf\x77\x0b\x55\xed\x1a\xf1\xb6\x7a\x13\xab\x98\xd9\xba\x51\x9c\x60\x77\x64\x88\x44\xa2\xdb\x95\x58\xec\xf5\xa8\x18\x9e\x35\x9b\x57\x78\x01\x5c\xcf\x40\xcd\x02\xf3\x02\x3d\x0f\x6f\x17\x8c\xee\xd2\x8d\x47\xcd\x4f\x36\x7e\xdd\xfc\x0c\xfd\xea\x40\x49\xeb\x7a\xe4\x4e\x07\xda\x2e\xa8\xac\xb0\xcb\x0a\xb7\x97\xd7\xb3\xf9\xfb\x0f\xb7\x97\xf3\xe9\x2c\x17\xac\x76\x83\x4a\x4c\x80\x13\x42\x5c\x5f\xd6\x91\xf9\xf7\xd2\xe0\x9c\x73\x58\x82\x02\x41\x40\x77\xaf\x8e\x15\x16\xb8\x04\xda\x3e\xeb\x64\x8d\xae\xfd\x67\xff\x6c\xe6\x03\xdb\xad\xd7\x5c\x6e\x1f\x89\xf2\x5a\xb1\x0d\x36\xf0\xf3\xce\x73\x07\x0e\x52\xb9\x42\xe9\xf7\x9b\x01\xc3\x67\x83\x08\x8e\xc7\xef\x51\x78\x8c\x27\xd0\xe1\x19\xa6\x69\x0c\x0f\x0e\xba\x07\x23\x7d\x7f\xec\x3d\xd0\x54\x6a\x3f\xc4\x34\x53\x54\xfb\x26\xd6\x8e\xbf\xbb\xfd\x65\xc4\x87\x9b\x54\xf8\x3e\x3a\x91\x9e\x8a\x37\x9c\x95\x2b\x13\x22\xb1\x7d\x71\x8b\x9d\x6e\x3f\xa9\x6c\x24\xb7\x55\x32\x40\xd2\xad\xc0\x15\x23\x3e\xa1\xba\x6c\xc1\x44\x79\x29\xf0\x82\x03\x8d\xa5\xe0\xdf\x01\x00\x00\xff\xff\x66\x97\x11\xff\xad\x17\x00\x00")

func masterEtcOriginMasterMasterConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterConfigYaml,
		"master/etc/origin/master/master-config.yaml",
	)
}

func masterEtcOriginMasterMasterConfigYaml() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterSchedulerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xc1\x6e\xda\x40\x10\xbd\xf3\x15\x96\xcf\x39\x90\x1e\xb9\x01\x89\xa2\x4a\x0d\x5a\x41\x94\x43\xab\x1c\xb6\xbb\x0f\x18\xb1\xec\xd0\xd9\x35\x2d\x89\xf8\xf7\x6a\xed\xc6\x2d\x90\x2a\xb6\xe5\xf8\x64\xbd\x7d\xef\xed\xee\x8c\xdf\xf8\x65\x90\x65\x59\x96\xeb\x1d\x3d\x42\x02\xb1\xcf\x47\x59\xbe\xbf\xce\xaf\x2a\x7c\x43\xde\x26\x44\xb1\x23\x73\x78\x45\x77\x02\x4b\x46\x47\x84\x7c\x94\x7d\x2b\xb1\xf4\xbc\xd4\x6f\x25\xcb\xeb\x2d\x92\x76\xc6\x8f\xec\x8a\x2d\xbe\xb2\xc7\x94\xfd\xd2\x91\x89\x79\x4d\x3d\x5e\xbd\xa7\xbf\xd7\xbf\x6e\x27\x8b\xca\x63\xca\x85\x6f\x2b\xbe\x9b\xde\xaa\x9b\xee\xf2\xf1\x73\x21\xb8\xa1\xb0\xe9\x6c\x11\xcd\xfa\xb3\x8f\x10\xc5\x76\xbc\x5c\x92\xa7\x78\x68\x63\x30\xe3\xb4\x7b\x97\xca\xdd\xc1\x43\xb4\x53\x7f\xdb\xd5\x42\xac\xd8\x3e\xb0\x83\x24\xdd\x8c\x2d\x1e\x34\xf9\xd8\xca\x61\xba\x86\xd9\x24\xe9\x3d\xb6\x2c\x07\x25\x08\xa1\x10\x74\xb2\x48\x25\xe8\x6c\x50\x75\x6e\x42\xde\x92\x5f\x35\x51\x6b\x59\x15\x5b\xf8\x98\x8f\xce\x56\xca\xd5\x00\xd9\x93\x41\xdd\xcb\xb7\x48\x25\xd1\xe9\xef\x70\xa7\x19\xb9\xe0\x08\x56\x29\x75\x6f\x12\x9e\x2e\xd0\xe3\x09\xf2\xcf\x05\x4e\x2e\x3d\x3f\xf3\xac\x54\x4f\x75\x7a\x89\x85\x22\x35\x4b\xef\x02\x0e\x26\xb2\x2c\x76\x02\x6d\x55\xa5\x7d\x9d\x04\x35\xfb\x27\x68\xb5\x4e\xe5\xba\x6e\xd1\x9b\xf3\x50\xf4\x6a\xfe\x05\x3a\xc4\x39\x7e\x14\x08\x11\xfd\x9e\x7b\xa2\x9d\xf6\x06\x76\x8e\xc0\x85\x18\x8c\x9d\x63\xa3\x63\x2a\x79\x1f\xf6\xe9\x73\x57\x82\x25\x64\xbc\x67\xb2\x8a\x6d\x78\xff\xf8\xc3\xe1\x70\xd8\x72\x8f\x0f\x29\x7b\x39\x25\xfe\xcc\x0d\x62\xdf\x8b\x77\xb3\x34\xfa\x48\x0d\x13\x99\xce\xf9\xcc\x1e\x97\xa1\x6b\x16\xaf\xf4\x23\xfb\xef\x85\x3e\x9d\xa7\x6e\x70\x1c\xfc\x0e\x00\x00\xff\xff\xaa\x29\xaf\x2a\x65\x07\x00\x00")

func masterEtcOriginMasterSchedulerJsonBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterSchedulerJson,
		"master/etc/origin/master/scheduler.json",
	)
}

func masterEtcOriginMasterSchedulerJson() (*asset, error) {
	bytes, err := masterEtcOriginMasterSchedulerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/scheduler.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterSessionSecretsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xca\xce\xcc\x4b\xb1\x52\x08\x4e\x2d\x06\x89\x04\xa7\x26\x17\xa5\x96\x14\x73\x15\x43\x68\x2b\x2e\x5d\x85\xc4\xd2\x92\x8c\xd4\xbc\x92\xcc\xe4\xc4\x12\xb0\x16\xa5\xea\x6a\x05\x3d\xc7\xd2\x92\x0c\x88\x5a\x85\xda\x5a\x25\x2e\x05\x85\xd4\xbc\xe4\xa2\xca\x02\x24\x15\xae\x79\xc9\x48\x0a\x00\x01\x00\x00\xff\xff\x58\x97\xb9\x86\x74\x00\x00\x00")

func masterEtcOriginMasterSessionSecretsYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterSessionSecretsYaml,
		"master/etc/origin/master/session-secrets.yaml",
	)
}

func masterEtcOriginMasterSessionSecretsYaml() (*asset, error) {
	bytes, err := masterEtcOriginMasterSessionSecretsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/session-secrets.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterTmpAnsibleAnsibleSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\xdf\x53\xe3\xba\x15\x7e\x5e\xff\x15\xe7\x9a\x74\x73\x77\x67\x65\x13\xda\xcb\x76\xdc\xcd\xed\x84\xc5\x5b\xe8\x00\x61\x08\xdd\xe9\x43\x67\x32\xb2\x74\x92\xe8\x46\x96\x5c\x49\x0e\xa4\x2c\xff\x7b\x47\xfe\x91\x84\x10\x3a\x0b\x5d\x2e\x3c\x60\xcb\x47\xe7\x3b\xdf\x39\x9f\x8e\x24\xf6\x7e\x8a\x33\xa1\xe2\x8c\xda\x19\x90\xdb\x20\xd8\x83\xeb\xe1\xf1\x30\x01\xae\xc1\xcd\x84\xfd\x00\x54\x71\xc8\xb5\x41\xf8\xd9\xe0\x54\x58\x67\x96\xc0\xb4\xb2\x5a\xe2\x07\xa0\x36\x7b\xf7\x01\xdc\x0c\xa1\x30\xba\x40\x03\x37\x74\xe9\x5d\xdc\x20\x4c\xd1\x41\xc8\x05\x95\xe0\x58\x91\x80\xd4\x7a\x5e\x16\x30\xd1\x3a\x42\x6a\x5d\x69\x23\x26\x75\xc9\x69\x51\x44\xf4\x3f\xa5\xc1\x88\xe9\x1c\xb4\x82\xde\x7e\xe4\x7f\x7b\xbd\xe4\x97\x3f\x26\x60\x90\xf2\x60\x0f\x4a\x5e\x40\xef\xe3\x41\xd4\xfb\x18\xed\x47\x07\xc9\x2f\x87\x87\x87\x07\xe4\xd7\xc7\xa6\x09\x28\x0d\x46\x97\x0e\xc1\x69\x98\x69\xeb\x00\x8d\xd1\xc6\x86\x40\x5d\xb0\x07\xd6\x51\xe3\x48\x59\x24\x70\x43\x85\x83\x52\x39\x21\x7d\xf4\x16\xc1\x96\x99\x15\x1c\xa3\xe0\x66\x26\x24\xc2\x4f\xa0\x19\x2c\xd0\x58\xa1\x15\xbc\xfd\x35\xe6\xb8\x88\x55\x29\xe5\x5f\x80\xeb\x00\xc0\x4a\xc4\x02\x7a\x01\xd7\x0a\x83\x60\xa2\x8d\xe7\xff\x1b\x32\x07\x42\x01\xc7\x09\x2d\xa5\x03\x5d\xa0\xb2\x33\x31\x71\x44\xa8\x89\xa1\xcd\x54\xcd\xa0\xa0\x8e\xcd\x56\x33\x3a\xed\x03\x29\xa0\x7b\x17\xe6\xe8\x28\xa7\x8e\x86\xc9\x5d\x48\x95\xd2\x8e\x3a\xa1\x95\xf5\xaf\x2b\x87\x91\xd0\xb1\xd2\x1c\x89\x45\x89\xcc\x69\x13\x26\x10\x86\xf7\xf7\xf7\xdd\x26\xa2\x3d\xf8\x72\xfa\xcf\xf3\x14\x08\x5c\xcf\x84\x05\x3b\xd3\xa5\xe4\x90\x21\xcc\xa8\xe2\x12\x39\x64\xcb\xaa\x6a\xeb\x10\xa9\xb2\x22\x93\x08\x85\xa4\xcb\x4c\xeb\xb9\xf5\x19\x44\x65\x4b\x83\xc1\x1e\xb4\x3f\x14\xb8\x30\x15\xe2\x12\x84\x03\x85\xc8\x2b\xc3\x1b\x23\xea\x9c\xe3\xad\xb0\xce\x42\x86\x13\xaf\x18\xea\x1c\xe6\x85\x13\x6a\xba\x32\xda\x70\xe6\x34\x08\x17\xe4\x73\x2e\x8c\xe7\x1e\xa3\x63\xb1\x36\x62\x2a\x54\x9c\x53\xeb\xd0\xc4\x8a\xe6\xc8\xc7\x0c\x8d\x13\x13\xc1\xa8\x43\xeb\xa9\x1d\x63\x21\x75\x1d\x7f\x55\x6b\x03\x06\x4b\xeb\x41\x0c\x4a\x5c\x50\xe5\xa0\xa0\xc6\x59\x98\x18\xaf\xa9\x6d\x8a\xc1\xe0\x62\x74\x7a\x74\x96\x8e\xaf\x86\x67\xe9\x68\x7c\x39\xb8\x3e\xe9\xc7\xa5\x35\xb1\x9d\x51\x83\x71\x63\x15\x3f\x9a\x17\x1b\x2d\xd1\xc6\xf0\xaf\x00\xa0\x19\x22\x6d\xb6\xfc\x18\x39\x87\x67\xb8\x91\x22\x1b\x97\x4e\xc8\xea\xc9\x50\xb3\xac\xfc\x12\x06\x52\x33\x2a\xa1\x5a\x13\x44\xb3\x82\xf0\x8a\x6d\xb4\xcc\x65\x6d\x21\x9a\x6f\x95\x1d\xa9\x13\x45\x84\x5a\xa0\xf2\x55\xf1\x76\x41\xa0\x19\x30\x83\xd4\x21\x90\x09\x10\xf8\xf4\xa9\x9b\x0e\xbf\x74\x83\xb9\x50\x3c\x81\xcb\x5a\x6e\x01\x2d\xc4\xd7\x5a\xe0\x09\x2c\x7a\x41\xab\xbb\x24\x00\xf0\x79\x4f\x60\x5e\x66\x5e\x61\x66\x21\x18\x12\x46\x1d\x95\x7a\x5a\x71\x5f\x89\xd2\xdb\x02\x3c\x2d\x4b\xaf\xca\x20\x1d\x7e\x09\x36\x43\xb2\xc8\x0c\x3a\x98\xa2\x42\x23\x18\x10\xb5\x13\x08\x68\x21\xfc\x10\x1a\x62\x6d\x43\x9d\xf8\x82\x92\x89\x90\xd8\x77\xd2\x46\xcc\xb8\xfe\xa6\x68\xb6\x3c\xc4\x2b\x0f\xde\x72\xa7\x87\x39\x2e\xbf\xd3\xc3\x1c\x97\x2f\xe0\xb0\xf5\xde\x30\x79\xf3\x7f\x11\xd9\x51\x5d\x9f\xe1\xcd\x6a\xd2\x42\x34\xad\xba\x2a\x53\x34\xff\xb3\xf5\xa5\x59\xf4\x32\x74\xb4\xd7\xc8\x60\x70\x79\x3a\xaa\x71\x76\x94\xbe\x31\x8d\x9a\x48\x9a\x40\x1a\x47\x81\x2d\x90\x79\x5b\x46\x8f\x4a\xdf\x4e\x12\xe8\xfc\x9c\x51\x8b\x87\x7f\x02\x72\xb3\x0f\x9f\xfe\x17\x17\x46\x3d\x89\x77\x01\xc0\xd4\x68\xdf\x89\x77\x43\x34\x9f\x2f\x8d\xd0\x46\xb8\xe5\xb9\x50\x22\x2f\xf3\x04\x0e\xf6\x7d\xf7\xad\xa7\xd4\xea\xab\x03\x5e\xa5\x68\x35\x66\x0b\xca\x9e\x16\xf1\x62\xad\xfc\x3a\x29\xab\xa1\x16\x32\x81\xde\x7e\xad\x5d\xdf\xb1\x9b\x16\xbd\xd3\x5b\xfd\x9d\xa1\xb5\xbe\x20\xcf\xe8\x01\xab\xf1\x71\xe3\x72\xdc\x66\xc9\x4b\xc3\xc6\x1e\xed\x61\x7a\xc6\xd5\xc4\x71\x26\x14\x17\x6a\x6a\xab\xae\xf0\x0d\x1e\x0a\x62\x33\xde\x66\x2b\x7a\xe5\x10\x97\xd6\x61\xfe\xbd\xa1\xd1\xd2\xcd\xc0\x20\xd3\x8a\xf9\x8d\xf6\xc7\x86\xb3\xfe\xde\x26\x8c\xc9\xd2\x77\xc8\x6a\x7a\xd5\x1c\x7d\x08\x3c\x87\x42\x4b\xc1\x96\x40\x39\x27\x96\x31\xe2\x34\x29\x2d\x9a\xea\xcc\x90\xeb\x52\x79\xe0\x65\x29\x38\xd4\xe4\x92\x06\x8e\x32\xe6\x3f\x26\xbb\x74\x90\x6c\xaf\xf6\xb5\x26\x1f\x63\x36\x61\x11\x1f\xd7\x0a\x9c\xf2\x5c\xa8\xe7\x20\xee\x2e\xef\x96\x55\xb4\xa4\xed\xde\x51\xc0\xe7\xc1\xf8\x64\x30\x3a\xe9\x87\xcf\x5d\xb1\xf0\x0d\xec\x8c\xf6\x6c\x99\xc3\x37\x60\xa5\x03\xc2\xbb\xd0\x05\x32\xe9\xbd\x0b\x5b\xe7\xe9\xf5\xe7\xe3\xf1\x28\xbd\xfa\x9a\x5e\xf5\xc3\xce\xc9\x70\x74\x7d\x31\x38\x4f\xc3\xaa\xe5\x15\x70\x7a\x3e\xf8\x5b\xda\x0f\x3b\xd5\xdf\xf1\xd1\x60\x94\x3e\xe2\xb3\xe8\x7c\x4d\xaf\x46\xa7\xc3\x8b\xda\xe5\x2e\xf9\x18\x2d\xa5\x2e\x9d\x3f\xca\xb9\xd2\x3e\xd9\x79\x39\xc5\x5c\x2b\x8b\x6e\xa3\x33\xfc\xa0\x6d\x71\xad\x4d\x7f\xb8\x91\xd4\xad\xd1\x33\xa3\xe7\x55\x0b\x7a\xd1\x1e\xf9\xe2\x45\xda\xc6\xb1\x5a\x14\x75\x1c\xcd\x9a\x58\x6f\xa4\xad\x5d\xab\x88\x27\xaa\xf2\x04\xad\x87\xd5\xf1\x73\x2f\x86\xc7\xe9\x78\x94\x9e\xa5\x9f\xaf\x87\x57\xfd\xee\x5d\xe8\x77\x1d\xad\xc2\x24\xac\x0e\xbc\xe1\x7d\xd7\x1b\x3e\xd1\x9f\x7e\x38\x4f\x93\x51\xb6\x45\xb1\x82\x7e\xdc\x70\x48\xd0\x9c\xf2\x9d\x29\x71\xe3\x58\xfe\x0a\x41\x3d\x91\x4b\xf2\x60\x7f\x6e\xcb\xd1\xae\xd0\xa3\x7f\x5c\x1c\x9f\xa5\xfd\x8d\x25\x0a\x5b\x6b\xb4\x39\x1f\xb7\x4e\xad\x98\xaa\xfa\x74\xf0\xae\xf6\xb3\x9d\x73\x78\xfb\x16\x32\x83\x74\xbe\xbe\xbb\xec\x37\x57\x85\xf3\xc1\xdf\x87\x57\x4d\x61\xfb\x61\xe7\xae\x79\xfc\x43\xf4\xfe\x3e\xac\x6e\x36\x9e\x88\xbf\xd6\xbc\xa8\x4d\xe3\x2d\xcd\x0b\x3f\x54\xa7\x63\xf5\xba\xe8\x6c\xe2\xc6\x3c\x5b\x55\xce\xc6\xef\xa3\xdf\xac\x56\x55\x07\x80\x57\x45\x15\x39\x9d\x22\xb1\xce\x20\xcd\x6d\xfc\x9e\x98\x19\xca\x8f\x2d\xf8\x9b\xd7\xc5\xfe\x77\x29\xd8\xbc\xbe\x8f\xee\x60\xfe\xca\xe0\xb7\x05\xa5\x76\x4d\xfc\x77\x45\xdd\x66\x5b\xad\xbf\x37\x1b\x72\x55\xeb\x66\xe9\xb5\xdb\xf1\x4e\x57\xd7\xda\xfa\x7f\x13\x85\xb6\x3e\x92\x65\x7d\x8d\x9f\xa1\x41\xf0\x4a\x65\x5a\x2d\xd0\x4c\x51\x31\xfc\x6b\xf0\xdf\x00\x00\x00\xff\xff\xfc\x85\x34\x88\xd8\x10\x00\x00")

func masterTmpAnsibleAnsibleShBytes() ([]byte, error) {
	return bindataRead(
		_masterTmpAnsibleAnsibleSh,
		"master/tmp/ansible/ansible.sh",
	)
}

func masterTmpAnsibleAnsibleSh() (*asset, error) {
	bytes, err := masterTmpAnsibleAnsibleShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/tmp/ansible/ansible.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterTmpAnsibleAzureLocalMasterInventoryYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\x5b\x6f\xdb\x4a\x0e\x7e\xf7\xaf\x20\xdc\x02\xde\xc5\x36\xf6\x76\xdb\x87\x85\x80\x3e\x78\x5b\xb7\x0d\xb6\xb9\xc0\x71\x0f\x9a\xf3\x22\x50\x12\x65\xf1\x64\x34\xd4\x99\x19\xd9\x51\x83\xfc\xf7\x83\xd1\x8c\xaf\x69\xd2\x9e\xf8\xc9\xd2\x90\x1f\x39\xbc\x7c\xa4\x4e\x4e\x4e\x06\x2f\xe0\xe3\xe9\xb7\xb3\x59\x02\x53\xdd\xb9\x8a\xf5\x12\x32\x52\xb2\x06\xd6\x80\x4a\x9d\xe4\xd8\x58\xa8\xd0\x02\xbb\x91\x85\x15\xaa\x96\xc0\x50\xa3\x30\xa7\x02\xb2\x0e\x2c\x15\x5e\xd4\x55\x34\x78\x01\xf1\x27\x0d\x69\x5b\x71\xe9\x6a\xb4\x8e\x8c\xcd\x0d\x37\x6e\x6c\x2b\x58\x57\x9c\x57\xc0\x16\xb4\x38\xe0\x82\x50\xbd\x82\x35\x81\xad\xa4\x55\x05\x94\x7c\x0b\xae\x42\x37\x1e\x28\xc9\x51\x05\xe5\x64\x00\x50\x89\x75\xd6\xff\x01\xe8\x4f\xfc\xf3\x00\x60\x85\x26\xbe\x45\x6d\x39\x53\x94\xe6\xa2\x35\xe5\x8e\x45\x27\x41\xf2\xe0\xb4\xe9\x5c\x25\x3a\x65\xed\xc8\x34\x86\x3c\x38\x4c\x5a\x6b\x26\x19\xeb\x49\x38\xfc\xcf\x60\x70\x70\x81\x94\xad\x07\x75\xc8\x9a\x0c\x7f\xa7\x22\x81\x8f\xa8\x2c\x3d\x10\xab\x71\x49\xa9\xc3\x65\x02\xc3\xd5\x6f\xb3\xf9\xd5\xe9\xc5\xf9\x30\x08\xbd\x80\xf3\x8b\xc5\x2c\x81\x45\xc5\x16\xf2\x0a\xf5\x92\xac\x8f\xd8\x9b\xf1\xeb\x7f\xff\x0b\x50\x17\x21\xb2\xa8\x14\xe4\x52\x67\xac\xfb\x80\x3a\x01\x04\xcb\x7a\xa9\xc8\xdf\x93\x31\x53\x14\xe1\xc2\xaf\xd5\x05\x19\x1f\x76\xd0\x58\xd3\x9e\x2b\x6b\xca\xbc\xcb\x56\x14\x45\xb7\xbc\xc0\x91\xbf\xfb\x42\x8d\xa1\x92\x6f\x13\x18\x9e\x9e\x4d\x3f\xcd\xd2\xcb\xf9\xec\xe3\xe9\xb7\xc9\xf0\x09\x8d\x1d\xec\x56\x6b\x71\x7d\x39\x3b\x59\x53\x76\x12\x65\x9e\x52\x5f\x91\xb1\x7d\x8a\x8e\x43\x25\x86\x96\x69\x6b\x54\x1a\x53\x0f\xa3\x03\x97\xf6\x2c\xbd\xbc\xcb\xa5\x6e\x44\x93\x76\xf7\xc9\xcb\xbb\x88\x78\x3f\x3a\xb2\x1a\x70\xd2\x82\x4a\x6c\x95\x4b\x6d\x9b\x15\x52\x23\xeb\x04\x46\x8b\xd9\xd9\xe5\xfc\xe2\xeb\x62\x36\x3f\xbd\x1c\x6b\x6e\xc6\x2c\xa3\x4d\xc2\xfa\x86\x88\xff\xfb\xb4\xc5\x02\xcd\x08\x5c\xd7\xd0\x3b\xd6\xa5\xc1\x57\x90\xb5\xce\x57\x6f\x85\x2b\x02\x27\xa0\x78\x45\xb0\x66\x57\x81\xa1\x25\x8b\x0e\x62\x50\x8a\x01\x2d\xeb\x08\x97\x51\x8e\xad\x25\x90\x12\x14\x2d\x31\xef\xc0\x10\x5a\xd1\xf6\xc8\x73\x23\xad\xf7\xdc\x92\xa2\xdc\x89\x0f\xc5\x3e\xe8\xf1\x3d\xfd\x99\x75\xa6\x7b\x5c\x3e\x9a\xbf\x22\x07\xd3\xef\xad\x21\xb0\x0d\xe5\x5c\x72\x0e\x05\xba\xe0\xa4\xef\x2a\x2a\x60\x83\x75\x64\x22\x9c\xee\x59\x72\x62\x7c\x15\x34\x46\x56\x5c\xf8\x64\x0d\xd1\x03\xa7\x99\x92\xec\x38\xfb\x8f\x29\xdf\xb0\x2e\x12\x18\x4a\xf6\x07\xe5\xee\x57\x95\x76\x66\x52\xcc\x73\x69\xb5\x0b\x95\x38\x9a\xcf\x3e\x9d\x5e\x2d\xe6\xd7\xe9\xd5\xe2\x62\xee\x4b\x65\xfa\xfb\xd7\xf9\x2c\x9d\xbe\x7f\x7f\xf1\xf5\x7c\x71\x3e\x3d\x9b\x1d\xc7\xed\xd7\x4d\xdc\x50\xf7\x53\x0b\xff\x9f\x5d\x3f\xc3\xc0\x96\x5e\x12\x18\x6e\xe4\x9e\x11\x0a\x43\xa8\xea\x04\x86\xb9\x18\x1a\xaf\x59\x17\xb2\xb6\x63\x4d\x6e\xf8\x83\xa2\x8e\x6f\x3e\xa3\x29\x20\x97\x82\xc0\xf9\x22\x8f\x85\x3a\x3e\x90\x79\xdf\x1a\x43\xda\xa9\xae\xa7\x9a\x5c\xb5\xbe\xa1\xc0\x3a\x74\x04\xe8\xa0\xa0\x46\x49\x57\x93\x76\xe0\xb8\x26\x28\x84\x02\xb9\x87\xa6\xf0\xec\x24\x05\xd9\x08\x16\xfc\x27\x43\x85\xef\x17\x7f\x1a\x1a\x34\x74\x8d\xc2\x8c\x94\x05\x6c\x1a\xc5\x54\xf4\xcc\x68\x08\x8b\xce\xcb\x66\x04\x7f\xb6\x64\x98\x8a\x08\x85\x4b\x64\x6d\x9d\xf7\xc1\xe3\x34\xc2\xda\xf5\x73\xc8\x7b\x11\xe6\x51\x74\xae\x1f\x29\x41\x48\x61\x97\x89\xdc\x58\x30\xad\x1e\xc3\x54\x59\x79\x15\xe1\xfc\x71\x68\xb9\x7e\xb8\x71\x8e\xd0\xa7\x1d\x22\x75\xc0\xb0\x44\xa5\x2c\x64\x98\xdf\x0c\xbd\x43\xaf\xbd\x9f\x46\x1a\xc3\xe8\x48\x75\xb0\xae\xc8\x10\xa0\xdd\xc7\x8b\xd9\xda\x22\x2a\x59\xfa\x7e\x8b\x21\x1a\xc3\xa2\xd7\x59\xa3\x27\x7f\x2b\x50\xb0\xcd\x5b\xeb\x79\x0c\x30\x93\xd6\x01\x97\x11\x2d\x0c\x88\x9d\x3d\xef\x40\x21\x21\x6b\x91\x70\x7a\x0b\x16\xde\xbd\x83\xc0\x3a\x7d\xd8\xb7\x6c\xe3\x01\x22\x56\x43\xa6\xa4\xdc\x27\xb4\x24\xec\xe7\xa2\x47\xeb\xd3\x85\x7a\x4f\x39\xde\xbf\xe2\x65\xd5\xcf\x19\xdc\xc4\xd4\xb2\xd9\x66\x61\x63\xf7\xb0\x66\xe6\xb4\x62\xcb\x0e\x14\xfa\x78\xfe\xa3\x11\xeb\xed\x74\x80\x50\x20\xd5\xa2\x2d\x39\x10\x03\x2f\xc5\x55\x64\xfe\xf9\x48\xa9\x07\xfe\xdb\x18\x48\xe0\xf5\x4f\x5a\x62\x5f\xf2\x48\xb4\x31\x52\x93\xab\xa8\xb5\x69\x5f\xb8\x09\x0c\x1b\x43\x96\xf4\x03\xca\xd9\x93\x0c\x33\xee\x47\xa3\xea\x51\x95\xc6\xc8\x6d\x77\xac\x38\xda\x28\x1e\x53\xc3\x9e\x22\x2a\x32\xae\x46\x8d\x4b\x32\xcf\xd6\xcf\xda\xb2\x7c\x9e\xba\x4f\x77\x4a\xb7\x8d\x18\xf7\x24\xc0\x53\x1b\x81\xb6\x0e\x95\x4a\x60\x61\xda\x07\xcb\xd1\x83\xa8\xfe\xda\xc6\xb1\xe3\x96\xd4\x4f\xdd\x04\x46\xd3\xf3\xab\xd3\xff\x7d\x99\xa5\x1f\x66\x97\x5f\x2e\xae\xfb\x4d\x60\x74\xb8\x64\x7d\x90\x9e\x7d\x0a\x2a\x59\xd3\x4f\xab\x0a\xac\xec\xd8\xc1\xa1\xbd\x81\x92\xb7\x6b\x56\x90\x1d\x77\xb5\x02\xd6\x96\x8b\x40\x67\xc7\x90\x60\x44\x11\x94\x46\xea\xdd\xd1\x49\x5c\x38\x61\xcd\x4a\x6d\xf8\xaa\x75\xd2\x48\xd3\xfa\x9e\x00\x76\xd0\xfa\xdd\xee\x87\x88\xc7\xa3\xbf\x27\x42\x4f\x7e\x1d\xeb\xe5\x1e\xbd\xe8\xb6\xce\xc8\xf8\x45\x62\xaf\xe3\x8f\x57\xce\xdd\xf2\x68\xe3\x5a\x8f\xc6\xf3\xa3\x23\xa3\x51\xf9\xce\x7f\xe8\xb5\xb7\xb7\xa6\x91\x39\xdc\x37\xc3\x9c\x8f\x4e\xd7\xd0\x53\x97\x5f\x52\x57\xc2\x45\xef\x0f\xeb\xdc\xcf\x0a\x3f\x51\xac\xf3\x6e\x95\x98\x3b\x28\x59\x17\x1b\xbf\xb7\xa6\xc2\xd2\x0e\x7e\xdf\xad\x45\x6f\x9e\xfc\xb3\x2e\x79\x99\x66\x68\x29\x81\x09\xb9\x7c\x22\x86\x97\xac\x27\x51\x62\xf7\x45\x10\x7d\x6a\x33\xc5\xf9\xb6\x08\x5b\xa3\x12\x18\x56\xce\x35\x36\x99\x4c\xee\xee\x60\x3c\xbb\x0d\x17\x3d\xeb\x15\x3f\x8b\xed\x57\x05\xb8\xbf\x4f\xfe\xfb\xf6\xed\x9b\xc9\xc1\xae\xba\x07\x88\x0d\xff\x6d\xb0\xe1\x60\x20\x12\x17\x4e\x9b\x3a\x49\xc3\x65\x1e\xfd\x7c\xf9\x2b\x00\x00\xff\xff\x4d\x40\xcb\xa6\x7b\x0d\x00\x00")

func masterTmpAnsibleAzureLocalMasterInventoryYmlBytes() ([]byte, error) {
	return bindataRead(
		_masterTmpAnsibleAzureLocalMasterInventoryYml,
		"master/tmp/ansible/azure-local-master-inventory.yml",
	)
}

func masterTmpAnsibleAzureLocalMasterInventoryYml() (*asset, error) {
	bytes, err := masterTmpAnsibleAzureLocalMasterInventoryYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/tmp/ansible/azure-local-master-inventory.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterTmpAnsibleAzureOcpDeployYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\xd2\x31\x72\x83\x30\x10\x05\xd0\x9e\x53\xfc\x0b\x38\x07\xa0\x4e\x93\x2a\x45\x0e\xc0\x2c\xb0\x18\xc6\x42\xab\xd9\x5d\xc5\xe3\xdb\x67\x84\xb1\x71\x11\xc7\x76\x95\x16\xb1\xff\x3f\x69\x76\x87\x48\x33\xd7\x78\xe7\x14\xe4\x84\xcf\xc4\xf1\x6b\x9c\x06\xc7\x14\x07\x25\x73\xcd\x9d\x67\x65\x1c\x45\x0f\x41\xa8\xaf\x80\x51\xcc\xad\x46\x90\x8e\xc2\x4c\xe6\xac\x15\xb0\x27\x1f\x59\x9b\x81\xba\x72\x36\x50\x30\xae\x2a\xc0\xc9\x0e\x56\x57\x00\x70\x69\xfa\x98\x93\xa8\x43\x12\x47\x2b\x4d\x4d\x2b\xe2\xe6\x4a\xa9\xa1\xec\x42\x29\xa9\x7c\xb3\x42\x25\x30\x06\x95\x79\xfb\x75\x47\xd1\xa6\x36\x30\x5c\xd0\x9f\xc1\x51\x7a\xc6\x35\x01\x25\x01\x97\x88\xa5\x16\x98\x96\xc2\xa6\xe4\xd5\xeb\x27\xac\x96\x47\x88\xea\x37\x39\xc5\x1e\xd9\x18\x2a\xd9\x59\x97\x2b\x62\x98\xee\x63\xb7\x92\xf2\x72\xdc\x2f\x37\x7b\xc5\x76\x1e\xbb\x1e\x2f\x6f\xda\x94\xb2\x7a\x35\xbc\x9d\xe6\xf0\x37\x95\xf7\x93\xb9\x9e\xfe\x19\xbb\x2a\xee\x72\xb7\x94\x23\xb7\x4d\x27\xd1\xca\x0e\x3c\xb7\x08\x47\x6e\xb1\x4e\xbc\xc2\xbd\x29\x7a\x40\x4a\x2a\x33\xfb\xc8\xd9\x9e\x14\x6d\x03\xaf\x80\x6e\xa6\x7e\x02\x00\x00\xff\xff\x63\x9a\x19\x8a\x9c\x03\x00\x00")

func masterTmpAnsibleAzureOcpDeployYmlBytes() ([]byte, error) {
	return bindataRead(
		_masterTmpAnsibleAzureOcpDeployYml,
		"master/tmp/ansible/azure-ocp-deploy.yml",
	)
}

func masterTmpAnsibleAzureOcpDeployYml() (*asset, error) {
	bytes, err := masterTmpAnsibleAzureOcpDeployYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/tmp/ansible/azure-ocp-deploy.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterTmpAnsibleServiceCatalogYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x5b\x6f\xdb\xb8\x12\x7e\xf7\xaf\x20\x82\x3e\x96\x75\xd2\xf6\x9c\xd3\x23\x60\x1f\x5c\x27\xbd\xa0\x4d\x6a\xc4\x6d\x5f\x16\x8b\x60\x4c\x8d\x65\xae\x29\x52\x18\x8e\x94\x1a\x45\xfe\xfb\x82\x92\x6c\x4b\x8c\xec\x5e\x90\xc5\x5e\xf4\x12\x85\x73\xff\x86\x33\xfa\x12\x28\xf4\x67\x24\xaf\x9d\x4d\x44\x75\x36\x5a\x6b\x9b\x26\xe2\x23\xe6\x85\x01\xc6\x91\x5b\xfc\x8e\x8a\x7d\x32\x92\xa2\xab\x88\x5f\x18\x6d\x78\xf5\xe3\xea\x6c\x81\x0c\x67\x23\x21\x1a\xd3\x73\xc0\xdc\xd9\x39\xf2\x48\x88\x1c\x19\x52\x60\x48\x46\x42\x08\x61\x60\x81\xc6\x37\xef\x42\x40\x51\x24\xc1\xa7\x47\xaa\x90\xea\x43\x0b\x39\x0e\x9d\xf9\x02\x14\x26\xe2\xd1\xd7\xab\xc9\xe5\xc5\x7c\x36\x99\x5e\xdc\x8d\x84\xf0\x05\xaa\xc6\x99\x47\x83\x8a\x1d\x6d\x5d\xe7\xc0\x6a\xf5\xbe\x17\x6d\x30\x5e\x59\xa4\xc0\x38\x67\x02\xc6\x6c\xb3\x55\x25\x67\x8c\xb6\xd9\xa7\x5a\xb8\xb7\xcf\xe1\xcb\x27\x0b\x15\x68\x03\x0b\x83\x89\x38\x6b\x25\xbc\x29\x30\x11\xd7\x5d\xa3\x5a\xc2\x2d\x84\xbb\xa4\x7a\x58\xd4\x19\x59\xeb\x18\x38\xa0\xb8\x3f\x14\x42\xc1\xcd\x0a\xfc\x2a\xd4\x3b\x9d\xdc\xbc\x99\xcc\xdf\xdc\xed\xa4\x26\x2a\x6a\xb0\xac\x2e\x34\x0d\x3c\x54\x69\x85\x13\xa5\x5c\x69\xf9\xaa\x06\xb9\x3d\x93\x0a\x18\x8c\xcb\x64\xec\x41\x08\xeb\x52\x9c\x47\xc0\x86\xc7\x15\x68\xfd\x4a\x2f\x59\x6a\xbb\x24\xb8\x1f\x5c\x08\xe5\x2c\x83\xb6\x48\x9d\x4c\xa5\x00\xca\x7a\x99\xcb\x01\xcb\x70\x2a\xa5\x67\x47\x90\xa1\x0c\xd0\xf6\x44\xc8\x2a\x8d\x75\x51\x95\x84\xb2\x70\xc4\x3d\xc9\xc9\x7f\x9f\x3f\x7f\x76\x12\x29\x07\x7b\xd9\x84\xf4\x3d\xd1\x8a\xb9\xf0\xc9\x78\xfc\xe8\xeb\xc5\xc7\xe9\xf9\xcd\xfc\xe2\xfa\xf3\xc5\xf5\x5d\xf2\xf4\xd9\xff\xfe\x3f\xe4\x42\xc1\x52\x9b\x7e\x6a\x63\x64\x35\x76\xa4\x33\x6d\xc7\x39\x78\x46\x6a\x7f\x3c\x69\x2d\x9e\xa8\x28\xc3\xad\x2f\x24\xfe\x61\x6f\x46\xa3\xe5\x43\x1e\xd7\xb8\xf9\x49\x87\x6b\xdc\xf4\x1d\x56\x7d\x4c\xcf\x4e\x63\x44\x95\x23\x2f\xc1\x18\x77\x8b\xa9\x6c\xfc\xf7\x91\x35\x4e\x81\x59\x39\x1f\x67\x0a\x69\xae\x7d\xd8\x20\x32\xdc\x16\x72\xa6\x27\x7f\x57\x2e\x90\x2c\x32\xfa\xab\xed\xfc\xbf\xd7\x4b\x54\x1b\x65\xf0\xf1\x39\x2e\xa1\x34\x3c\x6f\xae\xf0\xcc\x80\x7d\xdc\xbe\xbf\xd4\x36\xd5\x36\xf3\x7b\xdd\x8e\xd2\x74\x05\x36\xc3\xcf\x60\x74\x0a\xec\xe8\xf1\x4b\x72\x6b\xa4\x49\xc9\xab\x39\xd0\x74\x85\x6a\x1d\xa5\xb8\x44\xe0\x70\xb7\x32\x60\xec\x17\xf5\xa1\x2e\x14\x58\xdb\xec\x6d\x8a\x96\x35\x6f\x7e\x61\x2a\xbb\x90\xeb\x1c\xb2\x7a\x67\xbd\xbd\x9c\xbc\xbe\xb8\xeb\xce\xb7\xcb\x73\x08\x9b\xf2\xd7\x93\x71\xe9\x69\xbc\xd0\x76\x1c\x8d\xe3\xc9\x6f\xb1\xa7\x59\x69\xcc\xcc\x19\xad\x36\x89\x78\xbb\xbc\x72\x3c\x23\xf4\x68\xbb\xa8\x0e\x6d\xcf\xe6\x09\xc3\x11\x8d\xde\x6e\x44\x67\x8e\x38\x11\x61\x58\x3a\x72\x21\x0a\x72\xec\x94\x33\x89\xf8\x38\x9d\x75\x24\x84\xde\x95\xa4\xd0\x27\xe2\x6b\xb7\x28\x46\xca\x6b\x44\x9c\xbd\x44\xef\x43\xc6\xc0\xab\x44\x8c\x53\xac\xc6\x1d\xa1\x34\x2e\xeb\x98\x55\xce\x94\x39\x5e\x86\xbd\x14\x25\x98\x87\xb3\xd6\x47\x05\x34\xa6\xd2\x8e\xd7\xbb\x5b\x21\x23\xc0\x7a\xb9\x47\x40\x48\xef\x4d\x4f\x4e\x08\xe9\x07\x6b\x36\x89\x88\x7a\xd6\x8f\x7a\x6f\x62\x06\x82\xd4\xc3\x13\x6e\x77\x3d\xc6\xdf\x13\x25\xb5\x7e\xdb\xc7\xa9\x29\x83\xdb\x57\x9a\x3a\xd3\x41\xe8\x19\x88\xb7\x3a\x13\x73\x0b\x1b\xdf\x59\xe5\xaa\x24\xcd\x9b\xa9\xb3\x8c\x5f\xb8\xd7\x84\x0e\xca\xaf\x09\x14\xce\x90\xb4\x4b\xe7\xa8\x9c\x4d\x7d\x22\x9e\x9d\x8e\xfa\xa8\xf7\x96\xf3\x71\xcc\x3c\x2a\x42\x4e\x7a\xf5\xa5\xcd\x14\x5e\xba\x14\x13\xf1\xfc\xe9\x69\x4f\xd8\x18\x5c\x7d\xa3\x11\x9a\x31\xf7\x7d\xaf\x52\xac\x31\x40\x66\x7c\xb4\xdd\xc2\x53\xd4\x8d\xd9\xf9\xbb\xa7\xd1\x31\xee\x6f\xb2\x21\xe3\xae\x86\x14\xa1\x87\x75\xdf\x47\xf7\x6d\x8e\xde\x84\xa3\xf7\x40\x0a\xcc\x0b\xde\x9c\x6b\x8a\xc6\xa5\xb1\x0a\x74\x40\xa6\x9a\x46\xb2\xe5\x4e\xed\xb6\x1a\x09\x11\xb1\xb2\x98\x3e\xfc\x2c\x53\xea\x6c\x82\x6d\xcf\x9b\x0f\x68\x9b\x5b\x51\x6f\x83\xfd\x32\x18\x5a\x03\x0c\x94\x21\x47\x7b\x23\xa6\x60\x03\xb4\xc4\x63\xbd\xef\x27\xcb\xa5\xb6\x9a\x37\x89\xb8\x72\x16\x23\x5e\x59\xed\x79\xe4\xb5\x2b\x6b\x26\xf5\x70\x85\x27\x03\x05\x74\xaa\xe7\x3d\xb1\xea\x8c\x52\x22\x0a\xf0\x9e\x57\xe4\xca\x6c\xd5\xe8\xb9\xad\x5a\xdc\xb4\x43\x09\x0a\x71\x8b\x3a\x5b\x71\x22\xce\x4e\x9b\x39\xb9\xd5\x26\x55\x40\xe9\x76\xcc\x07\xa0\x78\x28\x8a\xdd\x7e\x5e\x0d\x92\xcc\xc1\x42\xd6\xe3\xda\x47\x84\x0f\x47\xba\x0f\x04\xf9\x8b\xd9\xf7\x01\x2a\x7d\x20\xd9\x9f\xe1\xd4\x7b\x57\x7f\x1e\xa9\x46\x5b\xf5\xbf\x9b\x4d\x5f\xdf\xbd\x98\xdf\xec\xfa\xd6\x5b\x69\x15\x98\x12\x5f\x91\xcb\x93\x68\x3f\x2e\x35\x9a\xf4\x1a\x97\xf1\x79\x2b\x69\x3e\x8a\x5b\x18\x9f\xec\x6e\x48\x17\xbf\x7b\x04\xff\x20\x98\xa2\xa5\x58\xf7\x69\xfb\x8b\xd3\x17\x31\xc9\x8c\x48\xe8\x7f\x62\x0e\x6a\x10\x52\x24\x59\xc3\x1a\x28\xc6\x50\x6e\x52\x04\xf2\x70\x84\x36\x04\x47\x8b\x9a\x11\x4a\x42\xa3\x7d\xe8\x04\x23\x55\x60\xa2\xe8\x79\x1c\xfe\x1f\x49\x13\x8f\x76\xe6\xdb\x7c\x31\x74\xe9\x5f\xc6\x17\xe3\xe9\xfd\x4e\xd6\xf8\xb7\xe6\x73\xc7\x6b\xfa\x61\x56\xf7\xd0\x7c\xed\x30\x4b\x2c\x80\x20\x47\xae\x97\xdd\xb6\x98\xf6\x9f\x21\xbb\xdf\x3b\x7f\xa9\xef\xce\xba\x3b\xaf\xde\x74\xc9\xf0\xdc\x6f\xf5\xeb\xa9\x1b\xfd\x11\x00\x00\xff\xff\x93\xbf\x72\xc1\x03\x13\x00\x00")

func masterTmpAnsibleServiceCatalogYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterTmpAnsibleServiceCatalogYaml,
		"master/tmp/ansible/service-catalog.yaml",
	)
}

func masterTmpAnsibleServiceCatalogYaml() (*asset, error) {
	bytes, err := masterTmpAnsibleServiceCatalogYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/tmp/ansible/service-catalog.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterTmpBootstrapconfigsComputeConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4b\x6f\x1b\x37\x10\xbe\xf3\x57\x0c\x94\x1c\xab\x7d\xc8\x4d\x03\x10\xc8\xc1\xf5\x23\x35\x8a\x24\xaa\x6d\x14\xed\xa9\xe0\x92\x23\x89\x15\x97\xc3\x0e\xc9\x75\xd4\xc0\xff\xbd\x20\x57\xf2\x03\xbd\xb4\x97\x05\x38\x8f\x6f\xbe\xf9\xf6\x1b\xe5\x1c\x3d\x5c\xda\xa8\x06\x87\xe6\x92\xf4\x1e\x59\xc2\x46\xb9\x88\x42\x05\xfb\x2b\x72\xb4\xe4\x25\x4c\xbd\x30\x3e\xfe\x68\xbd\x39\x37\x86\x31\x46\x09\xfd\xea\x7d\xd3\x35\x5d\xd3\xcb\x77\x67\x25\x79\x8b\x3a\x73\xb4\x13\xde\x62\x24\x37\x5d\x90\xdf\x48\x68\x31\xe9\x96\xd8\x6e\xad\x6f\x3d\x19\x6c\xb9\x26\x1b\x4d\x7e\x53\x9a\x2e\x69\x54\xd6\x4b\xd0\x2e\xc7\x84\xdc\x38\xd2\xca\x95\xc4\xcd\x5a\x42\xff\x7e\xd5\xf4\x65\x48\x2f\x4c\x65\x56\x30\xed\x56\x0a\x00\xfc\x8a\xfa\x27\xe5\x8d\x43\xfe\xac\x46\x94\xb0\x58\x08\x1b\x52\xd9\x22\xde\x1d\xbc\x5e\x23\x5b\x32\x12\x16\x67\x5d\x5c\x08\x3b\xaa\x2d\x3e\x37\x6f\x88\x47\x95\x24\xdc\x7c\x3a\xff\x78\xf5\xc7\xfa\xf6\xea\xfa\xe6\xb7\x76\x7e\xdc\xff\xbe\xbe\x5a\xbe\xfd\xa6\x69\x0c\xe4\xd1\xa7\x47\xf9\xf6\xdb\x34\x8b\xf0\x28\x00\x9c\x4a\x18\x93\x84\xeb\x2a\xd0\xde\x7a\x23\xe1\x33\x99\x23\xb6\xd8\xe7\x01\x1d\xa6\x73\xde\xe6\x11\x7d\x8a\x65\x58\xd9\x7a\xe9\xd4\x80\xae\x3e\x97\x73\x80\xc9\x61\x53\xca\xd9\x63\xc2\xd8\x58\x6a\xcb\xcc\x9c\xf0\x43\xe2\x8c\xb5\x90\x71\x6b\xc9\x7f\x08\x6c\x47\xc5\x07\x01\xa0\x1d\x65\xb3\x0c\x4c\x93\x35\xc8\x33\xda\x42\xfd\x9d\x19\x17\x4f\x59\xfd\xb4\xe5\x12\x16\x55\xfd\x5a\x30\x7f\xab\xec\x0b\x31\xaa\xa2\xf5\x85\xb3\xe8\xd3\x05\x79\x8f\x3a\x59\xf2\x5f\x26\x64\xb6\x06\x2b\x4d\xa5\x35\x86\x92\x4c\xe8\xd3\xfd\x21\x60\x94\xa0\x42\x70\x56\xab\x52\xdb\x4e\xde\xbc\xa4\x1f\x98\x12\x0d\x79\xf3\xdd\xcb\x9a\x3f\x23\xf9\xc2\xeb\x19\xe4\x3f\x61\x08\x80\x21\x73\x51\x79\xd5\x75\x02\xe0\xaf\x50\xcc\xd6\x75\x47\xda\x3f\xe7\xe1\xf4\x2b\xab\x94\x15\x62\xde\x5a\x78\x4c\x0f\xc4\xfb\xb5\xcb\x5b\xeb\x67\x5f\x30\x9a\x9d\x4a\x2d\x05\xf4\x71\x67\x37\x69\x49\x53\x5c\xc6\x3c\x78\x4c\xe2\x0d\x1c\x1b\x66\x3c\x88\x89\xb3\x4e\x60\x7d\x62\x32\x59\xa3\x01\xeb\x61\x36\x2f\xf4\x4d\xd7\xfc\x00\xca\x1b\xf8\x72\x77\x05\x67\x4d\xd7\xac\xe0\x61\x67\xf5\x4e\xbc\x01\x83\x81\x51\x17\x6b\xc0\xbf\x18\x80\x1a\x68\xc2\x06\xee\x77\x08\xe9\x81\x20\xee\x28\x3b\x03\xa3\x4a\x7a\xd7\x88\x57\xf3\x8b\xee\x63\xca\x12\xfa\xef\xdf\x95\xc5\xff\xe7\x36\x81\xcc\x27\xe5\xed\x06\x63\x3a\xe1\x45\xe4\xc9\xfa\xed\x8d\xdf\x50\x01\x1f\x5e\x9e\x6f\x57\x8f\xb7\x93\x7d\xb7\xaa\xd3\x34\x72\xba\xb6\x0e\x25\x94\x2e\xe4\x46\x73\xaa\xae\xaa\x2e\x39\x97\xa0\xd5\x31\xb4\xc7\xc3\xab\xc2\x3d\x1e\xc4\x44\x2e\x8f\x78\x69\x19\x75\x22\x3e\x48\x68\x27\xc5\xad\xb3\xc3\xe9\xf8\x9f\x28\xcf\x27\xde\xcc\x0d\x51\x04\xa6\xaf\x87\x57\x07\x53\x23\xcb\x91\x0c\x96\x17\x14\x23\x9f\x2e\xfb\x38\xe6\x59\xae\x8a\xf5\x4b\xa6\xa4\xe6\xda\x80\x7c\x7d\xf7\x91\x29\x07\x29\xfe\x09\x00\x00\xff\xff\x9e\xdd\x05\x83\xda\x04\x00\x00")

func masterTmpBootstrapconfigsComputeConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterTmpBootstrapconfigsComputeConfigYaml,
		"master/tmp/bootstrapconfigs/compute-config.yaml",
	)
}

func masterTmpBootstrapconfigsComputeConfigYaml() (*asset, error) {
	bytes, err := masterTmpBootstrapconfigsComputeConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/tmp/bootstrapconfigs/compute-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterTmpBootstrapconfigsInfraConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4d\x6f\x1c\x37\x0c\xbd\xeb\x57\x10\x9b\x1c\xbb\xf3\xb1\x6e\x1a\x40\x40\x0f\xae\x3f\x52\xa3\x48\xb2\xb5\x8d\xa2\x3d\x15\x1a\x89\xb3\xab\xae\x86\x9c\x52\xd2\x38\xdb\x20\xff\xbd\xd0\xcc\xda\x8e\xd1\x4b\x73\x19\x40\x43\xf2\x91\xef\x91\xcf\x84\xc0\x0f\x97\x3e\x9a\x2e\xa0\xbb\x64\x7b\x40\xd1\xd0\x9b\x10\x51\x99\xd1\xff\x86\x12\x3d\x93\x86\xa9\x55\x8e\xe2\x4f\x9e\xdc\xb9\x73\x82\x31\x6a\x68\x37\x6f\xab\xa6\x6a\xaa\x56\xbf\x39\x2b\xc1\x5b\xb4\x59\xa2\x9f\xf0\x16\x23\x87\xe9\x82\xa9\xd7\x50\x63\xb2\x35\x8b\xdf\x79\xaa\x89\x1d\xd6\x32\x07\x2b\xcb\xd4\x97\xa2\x4b\x1e\x8c\x27\x0d\x36\xe4\x98\x50\xaa\xc0\xd6\x84\x12\xb8\xd9\x6a\x68\xdf\x6e\xaa\xb6\x34\x69\x95\x9b\x27\x2b\x98\x7e\xa7\x15\x00\x7e\x42\xfb\xb3\x21\x17\x50\x3e\x98\x01\x35\xac\x56\xca\x8f\xa9\xb0\x88\x77\x47\xb2\x5b\x14\xcf\x4e\xc3\xea\xac\x89\x2b\xe5\x07\xb3\xc3\xe7\xe2\x9e\x65\x30\x49\xc3\xcd\xfb\xf3\x77\x57\x7f\x6e\x6f\xaf\xae\x6f\x7e\xaf\x97\xc7\xfd\x1f\xdb\xab\xf5\xeb\xcf\x96\x87\x91\x09\x29\x7d\xd1\xaf\x3f\x4f\x8b\x08\x5f\x14\x40\x30\x09\x63\xd2\x70\x3d\x0b\x74\xf0\xe4\x34\x7c\x60\x77\xc2\x56\x87\xdc\x61\xc0\x74\x2e\xbb\x3c\x20\xa5\x58\x9a\x15\xd6\xeb\x60\x3a\x0c\xf3\x73\x0d\x82\x3b\xcf\xf4\xa3\xa7\x5e\x8c\x02\xb0\x81\xb3\x5b\x8f\xc2\x93\x77\x28\x4b\xca\xca\xfc\x93\x05\x57\x4f\x51\xfb\x34\xfa\x1a\x56\xb3\xa4\x73\xc2\xf2\x9d\xb5\x5c\xa9\xc1\x14\x01\x2f\x82\x47\x4a\x17\x4c\x84\x36\x79\xa6\x8f\x13\x8a\x78\x87\x73\x6f\x63\x2d\x8e\x25\x98\x90\xd2\xfd\x71\xc4\xa8\xc1\x8c\x63\xf0\xd6\x94\xdc\x7a\x22\x57\x15\x0a\x42\x98\x30\x56\xa3\x70\xe2\x2e\xf7\xdf\x7d\x9d\xf3\x57\x64\x2a\x73\x3d\x83\xfc\x2f\x0c\x05\xd0\x65\x29\xd2\x6d\x9a\x46\x01\xfc\x3d\x96\x0b\x6a\x9a\xd3\xd8\xbf\xe4\xee\x71\x3f\xb3\x60\x33\xc4\xc2\x5a\x11\xa6\x07\x96\xc3\x36\xe4\x9d\xa7\x65\xd9\x82\x6e\x6f\x52\xcd\x23\x52\xdc\xfb\x3e\xad\x79\x8a\xeb\x98\x3b\xc2\xa4\x5e\xc1\xa9\x60\xc1\x83\x98\x24\xdb\x04\x9e\x92\xb0\xcb\x16\x1d\x78\x82\xe5\x22\xa1\xad\x9a\xea\x07\x30\xe4\xe0\xe3\xdd\x15\x9c\x55\x4d\xb5\x81\x87\xbd\xb7\x7b\xf5\x0a\x1c\x8e\x82\xb6\xec\x1b\xfe\x33\x01\x98\x8e\x27\xac\xe0\x7e\x8f\x90\x1e\x18\xe2\x9e\x73\x70\x30\x98\x64\xf7\x95\x7a\xd1\xbf\xe8\x3e\xa4\xac\xa1\xfd\xfe\x4d\x21\xfe\x8d\x6c\x46\x76\xef\x0d\xf9\x1e\x63\x7a\xc4\x8b\x28\x93\xa7\xdd\x0d\xf5\x5c\xc0\xbb\xaf\x3d\xd9\xcc\x8e\x6c\x74\xdb\x6c\xe6\x6e\x16\x25\x5d\xfb\x80\x1a\x4a\x15\x4a\x65\x25\xcd\x57\x35\x5f\xc9\xb9\x06\x6b\x4e\xbf\x0e\x78\x7c\x91\x78\xc0\xa3\x9a\x38\xe4\x01\x2f\xbd\xa0\x4d\x2c\x47\x0d\xf5\x64\xa4\x0e\xbe\x7b\x74\xf4\xd3\xc8\x8b\x6f\xab\xa5\x20\xaa\x51\xf8\xd3\xf1\x85\x0b\xe6\x3f\xeb\x81\x1d\x96\x17\x94\x43\x7e\xb4\xeb\xa9\xcd\xb3\x5c\x33\xd6\xaf\x99\x93\x59\x72\x47\x94\xeb\xbb\x77\xc2\x79\xd4\xea\xdf\x00\x00\x00\xff\xff\xb9\x56\xc5\xa3\xaf\x04\x00\x00")

func masterTmpBootstrapconfigsInfraConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterTmpBootstrapconfigsInfraConfigYaml,
		"master/tmp/bootstrapconfigs/infra-config.yaml",
	)
}

func masterTmpBootstrapconfigsInfraConfigYaml() (*asset, error) {
	bytes, err := masterTmpBootstrapconfigsInfraConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/tmp/bootstrapconfigs/infra-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterTmpBootstrapconfigsMasterConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x8f\x1b\x37\x0c\xbd\xeb\x57\x10\x4e\x8e\xf5\x7c\x38\x4d\x03\x08\xc8\x61\xbb\x1f\xe9\xa2\x48\xe2\xee\x2e\x8a\xf6\x54\x68\x24\x8e\xad\x5a\x23\xaa\x94\x34\x1b\x37\xc8\x7f\x2f\xa4\xf1\x7e\xa1\x97\xf6\x32\x80\x44\xf2\x91\xef\xe9\x71\x94\x73\x74\x7f\x61\xa3\x1a\x1c\x9a\x0b\xd2\x07\x64\x09\xa3\x72\x11\x85\x0a\xf6\x57\xe4\x68\xc9\x4b\x98\x7b\x61\x7c\xfc\xd1\x7a\x73\x66\x0c\x63\x8c\x12\xfa\xcd\xbb\xa6\x6b\xba\xa6\x97\x6f\xdf\x94\xe0\x0d\xea\xcc\xd1\xce\x78\x83\x91\xdc\x7c\x4e\x7e\x94\xd0\x62\xd2\x2d\xb1\xdd\x59\xdf\x7a\x32\xd8\x72\x0d\x36\x9a\xfc\x58\x8a\x2e\x68\x52\xd6\x4b\xd0\x2e\xc7\x84\xdc\x38\xd2\xca\x95\xc0\xf5\x56\x42\xff\x6e\xd3\xf4\xa5\x49\x2f\x4c\x9d\xac\x60\xda\x9d\x14\x00\xf8\x05\xf5\x4f\xca\x1b\x87\xfc\x49\x4d\x28\x61\xb5\x12\x36\xa4\xc2\x22\xde\x1e\xbd\xde\x22\x5b\x32\x12\x56\x6f\xba\xb8\x12\x76\x52\x3b\x7c\x2a\x1e\x89\x27\x95\x24\x5c\x7f\x3c\xfb\x70\xf9\xc7\xf6\xe6\xf2\xea\xfa\xb7\x76\x39\xdc\xfd\xbe\xbd\x5c\xbf\xfe\xaa\x69\x0a\xe4\xd1\xa7\x6f\xf2\xf5\xd7\x79\x11\xe1\x9b\x00\x70\x2a\x61\x4c\x12\xae\xaa\x40\x07\xeb\x8d\x84\x4f\x64\x4e\xd8\xe2\x90\x07\x74\x98\xce\x78\x97\x27\xf4\x29\x96\x66\x85\xf5\xda\xa9\x01\x5d\x3d\xae\x97\x0b\x26\x87\x4d\x49\x67\x8f\x09\x63\x63\xa9\x9d\x54\x51\xe0\x7d\xe2\x8c\x35\x8f\x02\xfa\xb8\xb7\x63\x5a\x5b\x3f\xb2\x7a\xaf\x82\x8d\xc8\x33\xb2\x00\xd0\x8e\xb2\x59\x07\xa6\xd9\x1a\xe4\x05\x77\xa5\xfe\xce\x8c\xab\xc7\xa8\x7e\xe4\xbb\x86\x55\x7d\x87\x9a\xb0\x7c\xeb\x03\xac\xc4\xd2\xf3\xdc\x59\xf4\xe9\x9c\xbc\x47\x9d\x2c\xf9\xcf\x33\x32\x5b\x83\x75\x60\xa5\x35\x86\x12\x4c\xe8\xd3\xdd\x31\x60\x94\xa0\x42\x70\x56\xab\x92\xdb\xce\xde\x3c\x27\x12\x98\x12\x0d\x79\xfc\xee\x79\xce\x9f\x91\x7c\x99\xeb\x09\xe4\x3f\x61\x08\x80\x21\x73\xd1\x7b\xd3\x75\x02\xe0\xaf\x50\x6c\xd7\x75\xa7\xb1\x7f\xce\xc3\xc3\xa3\x56\x51\x2b\xc4\xc2\x5a\x78\x4c\xf7\xc4\x87\xad\xcb\x3b\xeb\x17\x87\x30\x9a\xbd\x4a\xed\x93\xac\x34\xc7\x75\xcc\x83\xc7\x24\x5e\xc1\xa9\x60\xc1\x83\x98\x38\xeb\x04\xd6\x27\x26\x93\x35\x1a\xb0\x1e\x16\x1b\x43\xdf\x74\xcd\x0f\xa0\xbc\x81\xcf\xb7\x97\xf0\xa6\xe9\x9a\x0d\xdc\xef\xad\xde\x8b\x57\x60\x30\x30\xea\x62\x12\xf8\xd7\x04\xa0\x06\x9a\xb1\x81\xbb\x3d\x42\xba\x27\x88\x7b\xca\xce\xc0\xa4\x92\xde\x37\xe2\x45\xff\xa2\xfb\x94\xb2\x84\xfe\xfb\xb7\x85\xf8\xff\x64\x13\xc8\x7c\x54\xde\x8e\x18\xd3\x03\x5e\x71\x8e\xf5\xbb\x6b\x3f\x52\x01\x1f\x9e\x2f\x72\x57\xd7\xb8\x93\x7d\xb7\xa9\xdd\x34\x72\xba\xb2\x0e\x25\x2c\x7e\x6b\x34\xa7\xea\xaa\xea\x92\x33\x09\x5a\x9d\xae\x0e\x78\x7c\x91\x78\xc0\xa3\x98\xc9\xe5\x09\x2f\x2c\xa3\x4e\xc4\x47\x09\xed\xac\xb8\x75\x76\x78\xf8\x0d\x3c\x8e\xbc\x2c\x7b\xb3\x14\x44\x11\x98\xbe\x1c\x5f\xac\x4e\xbd\x59\x4f\x64\xb0\x9c\xa0\x18\xf9\x61\xc7\x4f\x6d\x9e\xe4\xaa\x58\xbf\x64\x4a\x6a\xc9\x0d\xc8\x57\xb7\x1f\x98\x72\x90\xe2\x9f\x00\x00\x00\xff\xff\xe9\x63\x55\x7a\xe4\x04\x00\x00")

func masterTmpBootstrapconfigsMasterConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterTmpBootstrapconfigsMasterConfigYaml,
		"master/tmp/bootstrapconfigs/master-config.yaml",
	)
}

func masterTmpBootstrapconfigsMasterConfigYaml() (*asset, error) {
	bytes, err := masterTmpBootstrapconfigsMasterConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/tmp/bootstrapconfigs/master-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeEtcAzureAzureConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x49\xcd\x4b\xcc\x2b\xf1\x4c\xb1\x52\xa8\xae\x56\xd0\x73\xac\x2a\x2d\x4a\x75\xce\xcf\x4b\xcb\x4c\xd7\x0b\x81\xc8\xb8\x28\xd4\xd6\x72\x15\x97\x26\x15\x27\x17\x65\x16\x94\x64\xe6\xe7\x61\x53\x1b\x8c\x2c\x0f\xd6\x91\x98\x98\xe2\x9c\x93\x99\x8a\xdd\x68\x47\x47\x17\xa8\x24\xaa\xda\xe0\xd4\xe4\xa2\xd4\x12\x3c\xea\x21\x0a\xa0\x7a\x42\x88\x72\x7a\x51\x6a\x71\x7e\x69\x51\x72\xaa\x7b\x51\x7e\x69\x01\xa6\xd2\x20\x64\x69\x90\xfa\x9c\xfc\xe4\x44\x90\x37\x30\x95\xfa\x40\x65\x40\xaa\x00\x01\x00\x00\xff\xff\x69\xfe\xce\x7d\x37\x01\x00\x00")

func nodeEtcAzureAzureConfBytes() ([]byte, error) {
	return bindataRead(
		_nodeEtcAzureAzureConf,
		"node/etc/azure/azure.conf",
	)
}

func nodeEtcAzureAzureConf() (*asset, error) {
	bytes, err := nodeEtcAzureAzureConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node/etc/azure/azure.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeEtcOriginNodeNodeDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x2d\x2a\x4b\x2d\xb2\xd5\xcf\xcc\xd3\x4d\x4c\x49\x29\xd2\x4b\x2c\x2a\x48\xd4\x37\x34\x32\xd7\x33\xd0\x33\xd0\x33\xe4\x82\x49\x27\xe7\x94\x16\x97\xa4\x16\xe9\xe5\xe4\x27\x27\xe6\x20\xc9\x03\x02\x00\x00\xff\xff\x87\xc4\xbf\xc2\x3f\x00\x00\x00")

func nodeEtcOriginNodeNodeDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_nodeEtcOriginNodeNodeDnsmasqConf,
		"node/etc/origin/node/node-dnsmasq.conf",
	)
}

func nodeEtcOriginNodeNodeDnsmasqConf() (*asset, error) {
	bytes, err := nodeEtcOriginNodeNodeDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node/etc/origin/node/node-dnsmasq.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeEtcOriginNodeResolvConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4b\xcc\x4d\x2d\x4e\x2d\x2a\x4b\x2d\x52\x30\x34\xb3\xd0\x33\x33\xd6\x33\x34\xb2\xd4\x33\x34\xe3\x02\x04\x00\x00\xff\xff\x77\xaa\x94\x8c\x19\x00\x00\x00")

func nodeEtcOriginNodeResolvConfBytes() ([]byte, error) {
	return bindataRead(
		_nodeEtcOriginNodeResolvConf,
		"node/etc/origin/node/resolv.conf",
	)
}

func nodeEtcOriginNodeResolvConf() (*asset, error) {
	bytes, err := nodeEtcOriginNodeResolvConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node/etc/origin/node/resolv.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master/etc/etcd/etcd.conf":                           masterEtcEtcdEtcdConf,
	"master/etc/origin/master/htpasswd":                   masterEtcOriginMasterHtpasswd,
	"master/etc/origin/master/master-config.yaml":         masterEtcOriginMasterMasterConfigYaml,
	"master/etc/origin/master/scheduler.json":             masterEtcOriginMasterSchedulerJson,
	"master/etc/origin/master/session-secrets.yaml":       masterEtcOriginMasterSessionSecretsYaml,
	"master/tmp/ansible/ansible.sh":                       masterTmpAnsibleAnsibleSh,
	"master/tmp/ansible/azure-local-master-inventory.yml": masterTmpAnsibleAzureLocalMasterInventoryYml,
	"master/tmp/ansible/azure-ocp-deploy.yml":             masterTmpAnsibleAzureOcpDeployYml,
	"master/tmp/ansible/service-catalog.yaml":             masterTmpAnsibleServiceCatalogYaml,
	"master/tmp/bootstrapconfigs/compute-config.yaml":     masterTmpBootstrapconfigsComputeConfigYaml,
	"master/tmp/bootstrapconfigs/infra-config.yaml":       masterTmpBootstrapconfigsInfraConfigYaml,
	"master/tmp/bootstrapconfigs/master-config.yaml":      masterTmpBootstrapconfigsMasterConfigYaml,
	"node/etc/azure/azure.conf":                           nodeEtcAzureAzureConf,
	"node/etc/origin/node/node-dnsmasq.conf":              nodeEtcOriginNodeNodeDnsmasqConf,
	"node/etc/origin/node/resolv.conf":                    nodeEtcOriginNodeResolvConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master": {nil, map[string]*bintree{
		"etc": {nil, map[string]*bintree{
			"etcd": {nil, map[string]*bintree{
				"etcd.conf": {masterEtcEtcdEtcdConf, map[string]*bintree{}},
			}},
			"origin": {nil, map[string]*bintree{
				"master": {nil, map[string]*bintree{
					"htpasswd":             {masterEtcOriginMasterHtpasswd, map[string]*bintree{}},
					"master-config.yaml":   {masterEtcOriginMasterMasterConfigYaml, map[string]*bintree{}},
					"scheduler.json":       {masterEtcOriginMasterSchedulerJson, map[string]*bintree{}},
					"session-secrets.yaml": {masterEtcOriginMasterSessionSecretsYaml, map[string]*bintree{}},
				}},
			}},
		}},
		"tmp": {nil, map[string]*bintree{
			"ansible": {nil, map[string]*bintree{
				"ansible.sh":                       {masterTmpAnsibleAnsibleSh, map[string]*bintree{}},
				"azure-local-master-inventory.yml": {masterTmpAnsibleAzureLocalMasterInventoryYml, map[string]*bintree{}},
				"azure-ocp-deploy.yml":             {masterTmpAnsibleAzureOcpDeployYml, map[string]*bintree{}},
				"service-catalog.yaml":             {masterTmpAnsibleServiceCatalogYaml, map[string]*bintree{}},
			}},
			"bootstrapconfigs": {nil, map[string]*bintree{
				"compute-config.yaml": {masterTmpBootstrapconfigsComputeConfigYaml, map[string]*bintree{}},
				"infra-config.yaml":   {masterTmpBootstrapconfigsInfraConfigYaml, map[string]*bintree{}},
				"master-config.yaml":  {masterTmpBootstrapconfigsMasterConfigYaml, map[string]*bintree{}},
			}},
		}},
	}},
	"node": {nil, map[string]*bintree{
		"etc": {nil, map[string]*bintree{
			"azure": {nil, map[string]*bintree{
				"azure.conf": {nodeEtcAzureAzureConf, map[string]*bintree{}},
			}},
			"origin": {nil, map[string]*bintree{
				"node": {nil, map[string]*bintree{
					"node-dnsmasq.conf": {nodeEtcOriginNodeNodeDnsmasqConf, map[string]*bintree{}},
					"resolv.conf":       {nodeEtcOriginNodeResolvConf, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata. DO NOT EDIT.
// sources:
// master/etc/etcd/etcd.conf
// master/etc/origin/master/htpasswd
// master/etc/origin/master/master-config.yaml
// master/etc/origin/master/scheduler.json
// master/etc/origin/master/session-secrets.yaml
// master/tmp/ansible/ansible.sh
// master/tmp/ansible/azure-local-master-inventory.yml
// master/tmp/ansible/azure-ocp-deploy.yml
// master/tmp/bootstrapconfigs/compute-config.yaml
// master/tmp/bootstrapconfigs/infra-config.yaml
// master/tmp/bootstrapconfigs/master-config.yaml
// node/etc/azure/azure.conf
// node/etc/origin/node/node-dnsmasq.conf
// node/etc/origin/node/resolv.conf
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterEtcEtcdEtcdConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4f\x6f\xfa\x46\x10\xbd\xfb\x53\xa0\xe5\xd2\x1e\x02\x0e\xf9\x57\x22\xed\x61\x59\x0f\x61\xc5\x62\xd3\xdd\x31\x04\x45\xd1\x8a\x10\x43\xac\x12\x40\xb6\x49\x13\x21\xbe\x7b\xe5\x3f\x60\x12\x48\x55\x35\xbf\x1b\xcc\x7b\x9e\x7d\x33\xef\x0d\x20\x77\x8c\xcb\x7a\x40\x37\x9b\x4a\xad\x37\x8e\x93\x20\xaa\x75\x96\x71\xb2\x18\xbf\x06\x95\xed\xd6\xca\x08\x52\x68\x04\xd7\xf4\x01\x94\xf1\x95\xd4\xf4\x25\x49\x56\xf1\x6d\xbd\xbe\xd9\x54\x7e\x0b\x17\xcf\xc1\xfb\xfe\x5b\xd1\x8f\x2b\xf6\xef\x35\x9d\x44\xe1\x62\x56\xd9\x6e\x6f\x1b\x17\x7f\xd8\x79\x17\x87\x21\x33\x8e\x50\xb4\xfe\x36\x8e\xea\xf3\xf0\xa9\x1e\x24\x93\xe7\xba\x55\xcd\xd0\x21\x93\x19\x48\x48\x51\xd0\x2e\xeb\xeb\x8e\x87\x86\x7b\xbe\x8b\xf4\xdc\xb6\xed\xa2\x51\x07\x98\xc2\x16\x30\x34\xc2\x45\x50\x03\x26\xe9\xd5\x0e\x03\x09\x1c\x85\xe7\x1a\x14\x3d\xf0\x7c\xa4\x8d\x3d\x54\x4c\xc1\xa5\x00\x17\xff\xc7\x1c\x37\xcd\x42\x59\x8f\xdd\xef\xd5\x69\x7a\x75\x50\x1d\x32\x59\x16\xb8\xa7\x34\xb5\x2c\xab\xfa\x30\x99\xaf\xd3\xa6\x8f\xb9\x0e\xe1\x0a\x14\x4c\x1a\xe6\x0c\x40\xa1\xd0\xf0\xd3\xc5\xee\x1a\x72\xe9\x6b\x04\xf5\x8d\x95\xbf\xa4\xb7\xd1\xc8\x10\xe8\x22\xf8\xfb\x34\x8c\x5e\x17\x5c\x9a\xfa\x7a\x56\x0c\x7d\x76\x5e\xac\xc3\x11\x9a\x7b\x03\x50\x23\xfa\xb5\x60\xb4\x1a\x1c\x17\xdb\x4c\xca\x16\xe3\x5d\xba\x8a\x96\xef\x1f\x47\x70\x5f\x79\xf7\x23\x9a\xab\x28\x37\xf9\x73\x73\x35\x2a\xc1\xd1\x28\xe0\x9e\xdb\x16\x77\x86\x77\x80\x77\x29\x99\x8e\xe7\x71\xb0\x8b\x26\xf3\xd1\x33\xdc\xeb\xf5\x59\x9e\x35\x05\x08\x6e\xfa\x8b\x12\x7b\xc7\x01\x97\xb5\x24\x98\x41\x83\x92\x24\x5a\x07\x24\x57\xfa\xa7\xef\x21\x33\xe9\x58\xe0\x3a\xa6\x35\x42\xd0\xf4\xb2\xd1\xbc\x6c\x5e\xdf\x34\x9a\xd7\x69\x56\xb2\x69\x1f\x8b\x26\xf9\x90\xcb\xe9\xf4\xf0\xbf\x69\x33\x21\x7d\x05\x66\xc8\x04\x52\x72\x65\xdb\xfb\x47\x73\x5c\x41\x5b\x81\xee\x94\xd7\x41\x2e\xec\x23\x92\x93\xda\xb6\x3b\x12\x72\x7e\x84\x0f\x95\x40\x28\x09\xa7\x5e\x61\x4e\x89\xdb\x24\x15\x1f\x07\x93\x75\x14\x26\x1f\x45\xd2\x51\xa5\xa9\x70\x0c\x67\xa6\x2d\x24\xd0\xf4\xe0\xf3\xa3\x9f\x8c\x6b\x93\x28\xc9\x59\x85\x67\x1c\x14\xa6\x9b\xed\x7c\x5a\x58\x56\xfd\xf2\x71\x1c\x44\x6f\x41\x54\x36\xe8\xc2\xe8\x1b\xca\x5f\xc1\xc7\xa1\x65\x28\xf5\xde\xc9\x7c\x92\xf4\xf0\xfe\x9b\xca\x8c\xfa\xaf\x52\x73\xc6\x09\xbd\xab\xe0\x50\x6d\x46\x3b\x21\x39\x63\x95\x82\x33\xda\x91\x6a\xab\xfa\x30\x5f\xce\x66\xe1\x62\x56\xac\xd8\x81\x96\x7f\x47\x49\x7b\x0f\xaf\xa2\xe5\x34\x9c\x67\x84\x4f\x41\xec\xf7\x95\xd7\xfe\x92\xe3\x1e\xa4\x61\xd7\x94\x3c\x8d\xe3\x70\x42\xac\xaa\x55\x7d\x18\xaf\x93\x97\xc7\x72\x69\x9d\xe2\xa4\x49\x1c\xbe\xae\xe6\x01\xb1\xfe\x09\x00\x00\xff\xff\x41\xcc\xdb\x7e\x32\x06\x00\x00")

func masterEtcEtcdEtcdConfBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdEtcdConf,
		"master/etc/etcd/etcd.conf",
	)
}

func masterEtcEtcdEtcdConf() (*asset, error) {
	bytes, err := masterEtcEtcdEtcdConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/etcd.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterHtpasswd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\xd0\x73\xce\x29\x2d\x2e\x49\x2d\x0a\x2d\x4e\x2d\xca\x4b\xcc\x4d\x55\xa8\xad\xb5\xaa\xae\x56\x70\x4a\x2e\xaa\x2c\x28\x81\xcb\x06\x24\x16\x17\x97\xe7\x17\xa5\x28\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x48\x7d\x31\x4a\x35\x00\x00\x00")

func masterEtcOriginMasterHtpasswdBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterHtpasswd,
		"master/etc/origin/master/htpasswd",
	)
}

func masterEtcOriginMasterHtpasswd() (*asset, error) {
	bytes, err := masterEtcOriginMasterHtpasswdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/htpasswd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xfb\x6f\x1b\xb9\xf1\xff\x5d\x7f\x05\x61\x1c\xe0\xe4\x8b\xef\xae\x24\x3b\xcf\x05\x8a\x42\xf5\x39\x17\xe1\xec\x44\x95\x9d\xe2\x8a\xba\x38\x50\xe4\x68\xc5\x88\x4b\xee\xf1\xa1\x58\x71\xf3\xbf\x17\x7c\xec\x2e\x57\x8f\x38\xcd\x5d\x51\x27\xb0\x25\xf2\x33\xc3\xe1\xbc\x87\x98\x56\x4c\x6b\x26\xc5\x85\x14\x4b\x56\x16\x03\x84\x6a\x6e\x4b\x96\x7c\x47\xe8\x2f\x96\x71\xfa\x23\x2c\xb1\xe5\x46\x87\x25\x84\x88\x07\x58\x85\x0d\x93\xa2\x59\x44\x08\xd7\xec\x6f\xa0\x1c\xc7\x02\x6d\xc6\xed\x32\x88\x4d\x81\xfe\xf1\xcf\xf6\xfb\x9a\x09\x5a\xf4\x19\x87\x13\x5b\x84\x02\x2d\xad\x22\xa0\x3b\xde\x08\x71\x56\x31\xa3\x0b\xf4\xf0\x25\x59\x54\xf0\x9b\x05\x9d\x2c\x7b\xb6\xef\x37\xa0\x14\xa3\xf0\x9d\x02\x27\x02\xb6\x9c\x12\x09\x67\x92\xce\x14\x68\x30\xdf\xc7\x9d\x32\x8d\x17\x1c\x0a\xb4\xc4\x5c\xc3\xce\xa1\x51\x21\x93\xbe\x69\x3c\x48\xd6\x20\xf4\x8a\x2d\x4d\xce\xe4\x70\x5a\xe1\x12\x66\x92\x33\xb2\xfd\x4e\xa3\xdc\x03\xb1\x0e\x39\xb7\x3c\xd5\x73\x86\x2a\x6c\xc8\xca\xf3\x9f\x08\x21\x8d\x67\xd7\x33\x44\x86\xd6\xb0\x2d\x10\x73\x10\x9d\xf7\xc4\xa2\x20\xb6\x59\xcb\x3a\xa1\x41\x68\x83\xb9\x85\x02\x9d\x1a\x65\xe1\x34\xd9\x11\xb8\x82\xa2\x13\x27\xa3\x20\x18\xd0\x04\x20\xc5\xfc\x90\x3b\x64\xad\x97\x14\xa8\x96\x54\x1f\xd9\x5a\x38\x2b\xea\x9e\xc7\x7c\x04\x62\x0a\xe4\xe4\x48\x96\xf5\x9a\xd5\xef\xfd\x49\xdc\xcb\xf1\x06\x33\x6e\x15\xec\xe0\x82\x91\x12\xe5\x47\xfb\xe0\xb2\x54\x50\x62\x23\x55\x12\x4b\x4a\xde\x6f\x2f\x38\x03\x61\xa6\x62\x29\x83\xec\x04\x94\x79\xc3\x9c\xf5\x3b\x92\x6c\xa9\xa4\x30\x99\xc7\xe7\x44\x19\x0f\x5c\xc3\xf6\xab\xb8\x35\x6c\x07\xb8\x66\x57\xb0\x01\xae\x8b\x41\xe6\x6c\xbb\x63\x6a\x6c\xcd\xaa\x13\x27\x46\xca\x5b\xc0\x14\x54\x14\xc6\x0b\x77\x31\x29\x50\xc2\x39\x23\xb8\x15\x22\x02\x64\x55\x49\xf1\x0e\x57\x8d\x01\xb2\x23\x42\x0d\x82\x63\x19\x85\xc3\x29\x33\x05\x4b\x76\xdf\x51\xfd\x92\xcd\xa1\x92\x06\xb2\x4b\x87\xc9\xfc\x6a\xa9\xa4\xad\x03\x7c\x1f\xf7\x93\xdb\xf4\x8b\x56\x83\x72\x9e\x72\x0c\xf9\x41\x83\x1a\x10\x29\x8c\x92\x9c\x43\x62\x05\xe0\x40\xba\x80\xe0\x92\xac\xdf\x79\x87\x6b\xdd\x36\xab\xb0\x36\xa0\xb2\x8e\xd8\x79\x8b\x06\xb5\x61\x04\x6e\xdc\x1f\x51\x5e\x80\x8a\xc1\xae\x59\x29\x1a\xf5\xa5\xd6\x8c\xf8\x2c\xec\xb7\x0a\x4c\xec\xb8\x83\x70\xf6\x4b\x8e\x2c\xd0\xe9\xff\x9d\x0e\x88\x54\x7a\xc2\xb9\xfc\x04\xf4\xbd\x62\x25\x13\xde\xb2\x4f\xfe\xcc\x9e\x0e\x87\xe3\xb3\x97\x77\xf9\xc8\xff\x1f\x3f\x29\xfe\x75\xf7\xf9\x69\xbb\xc5\x25\xc1\x7c\x25\xb5\xd9\x59\x7f\x78\x40\x7f\xb5\xd2\xc0\x35\x18\x8c\x9e\x30\x41\xe1\x1e\xe5\xd7\xfe\xba\xf9\x74\xa6\xd1\xe8\x69\x7e\x63\x14\x13\x25\xfa\xf2\x65\x87\x74\x6d\x17\xa0\x04\x18\xd0\x77\x39\x0d\x39\xe9\x71\xc4\x5d\xae\x37\xe4\x2e\x27\xdc\xba\x23\xee\x72\x2f\xd7\x51\xb2\xaf\x09\x9b\x5f\xde\x1b\x67\x70\x1e\xa4\x7d\x2b\xb5\x71\xd6\xdf\x97\xb3\x35\xe3\x31\x31\xfb\x6c\xe3\xe5\xff\x13\x7e\xfe\x52\xdf\x78\xf7\x1d\xd8\xf8\xe5\xd9\x5d\x7e\x7e\xd8\x66\x47\x0e\x7a\x44\x7b\x2d\x55\x5c\xa7\x42\x77\xae\xbe\x60\x82\x4e\x28\x55\xa0\x75\x81\x46\xb9\xff\x57\xbc\x1a\x3d\x3f\x8f\x7b\xef\xc0\x7c\x92\x6a\x5d\x20\x43\xea\x67\x03\x30\x84\xf6\xb3\x13\xc1\x05\x0a\xc1\x90\xbb\xcd\x2e\x11\x74\x6e\xde\xdb\xf6\xc4\x11\xd2\xba\xf9\x01\x84\x73\x75\x84\xac\xe2\x3e\x6c\x33\xb4\x32\xa6\xd6\x85\x37\xcd\x01\x83\x14\x67\xe7\x2f\x5f\x7b\xe9\x6e\x8c\x54\xb8\x84\xee\x82\x9d\xda\xe3\x56\x48\x30\x45\xb2\x91\x33\x79\x08\xd8\xaf\x80\x4e\x8b\x37\x4e\x8b\x3b\x6c\xd2\x52\x76\x00\x96\x32\xf1\xc5\xaf\x93\x6c\x29\x55\x85\x4d\x81\xa6\xd7\x93\x9f\x2e\x7f\x9d\xcd\x2f\xdf\x4c\x7f\x19\x86\x2f\xb7\x7f\x9f\x5d\x66\x3f\x3c\x10\x59\xd5\x52\x80\x30\x5f\x8a\x1f\x1e\x36\x81\x93\xeb\x58\x38\x36\xa0\x4d\xd3\x0c\x84\xfa\x12\x94\x12\x4b\x8b\xbb\x0b\x07\xb3\x6f\x2a\x82\xb3\x85\x15\x94\xc3\x31\x2b\x45\xca\xaf\x1b\x6a\x07\x14\x6c\x55\x4b\x65\x0a\x34\x1e\x9d\x3d\x1f\x0d\x3a\x5d\xa6\x62\x39\x21\x70\xcd\x5c\x7e\x04\x35\x51\xa5\xad\x40\x34\xfd\xa1\xb2\xc2\xb0\x0a\x32\x92\xb4\x91\x99\x43\xeb\xa1\x06\x63\x98\x28\x75\xbe\x7e\xe5\x4c\x35\xdc\x8c\x31\xaf\x57\x78\xfc\xa7\xb6\xca\xea\xa0\xeb\x6c\x81\xc9\x1a\x04\x6d\xa8\x9d\x3f\x9c\xf7\x00\x15\x50\x86\x33\xb3\xad\xa1\x3b\xa1\xe6\x8c\xf8\x7e\x65\xb8\x11\x34\x4f\xbc\xa2\x56\xd2\xc8\x85\x5d\xc6\xaa\x26\x2d\x75\x15\x6b\xc3\xda\x52\x98\xa1\x13\xfc\xd9\x2a\x38\x49\x10\x7d\xf9\x4f\x86\x60\xc8\xd0\x83\xc2\xef\xdc\xed\x3b\x7c\x97\xc6\x77\x14\x11\x43\xd9\xa7\x7c\x26\xca\xcc\x59\x28\x5b\x3a\xed\xf7\x78\x4a\x9f\xea\x87\xc1\x20\xc3\x10\x75\x27\x07\x19\xac\x61\xfb\x2d\xf4\x6b\xd8\x9e\xfc\x57\x6e\x5a\x45\x0f\xb0\xc2\xb9\x47\xbb\x30\x9d\x15\xe8\xe1\xe1\xb1\x0a\xe3\xfd\x8a\x5e\x6e\x98\xaf\xc7\xb7\xac\x02\x69\x4d\x81\x84\xe5\xfc\xf1\x6e\x29\x7a\x6b\xec\x50\x52\x87\xde\x77\xe9\x1e\x28\x38\xb4\x26\x2b\xa0\xb6\x67\xa1\xe6\xe0\x76\x2b\x38\x76\xe0\x74\x40\xaf\x2d\x2e\xff\xa8\x7d\x6b\x1b\x0b\xba\x7e\x27\x29\xcc\xa4\x32\x73\x2c\x4a\xd7\xe0\x9e\x26\x7b\x37\x76\x21\xc0\xe9\xea\xe5\x59\x7e\xee\x13\xf2\x70\xfc\xc2\xed\xbb\xb6\x9a\x38\xca\xd0\x56\xb9\xf1\x28\x2a\xd7\x8b\xed\x1d\x08\x62\x0d\xfc\xb9\xf5\xe3\x8b\xd8\x8f\x09\x11\x9a\x9a\x9d\x39\x07\x13\x02\xb5\xdb\x36\x20\xcc\xed\xb6\x76\x8c\xbf\x21\x28\xfe\x3f\xc5\xc4\xcb\x21\xb4\xb0\xca\xe5\xa5\x67\xa3\xd1\x20\x4e\x17\x0d\xd7\x6f\x62\xea\x89\x7e\xab\x75\x81\xce\x3c\x87\xfd\xcb\xb8\x4f\x31\x99\x04\xa5\xb5\xe9\xf7\x4a\xca\xda\xc5\xff\xff\xe0\xba\x2f\x7e\xf7\x75\xcf\x3d\x87\xbd\xbb\xa4\xb7\xdd\xed\x3d\x3d\xc3\x10\x83\xd1\x0b\x66\x76\xc1\x19\xf9\x30\xbf\x2a\x7a\xd5\xf2\x68\x57\x54\x24\xb5\xd4\xf9\xa2\x0b\x37\x11\xca\x7d\x97\xaf\x63\x36\x89\x6d\xc0\xc5\xf4\xc7\xb9\xcb\xf1\xf9\xf8\xec\x55\x70\xcc\x67\x7b\x98\x58\xb0\x09\xa3\x6a\x1f\x8a\x90\x6b\x39\x83\x87\x5f\x81\x28\xcd\xaa\x40\xaf\x13\x4b\x4f\x67\xc9\x49\x91\x53\xec\x4a\x86\x4e\x45\x87\xa9\xa3\xd4\x33\xff\x10\x11\x5a\x75\x05\x74\x85\x4d\xd7\xfb\x64\x72\xa3\x33\xed\x29\xbb\x50\xeb\xdf\xaa\x17\x6e\xb2\x3f\x08\x61\xad\xc1\xfc\x01\x0a\x1e\x12\x29\xb4\xe4\x30\x1c\xb8\x29\x06\x7b\x47\x6d\xb3\x68\x05\x66\x25\x69\x81\xb0\x35\xae\x95\x60\x14\x84\x61\x66\x3b\x8b\xa9\xb8\x51\xec\x0a\x73\x0e\x3e\x6d\xb4\x05\x90\xcb\x92\x89\xe4\x7b\x85\xeb\x9a\x89\xf2\x3a\x32\x24\x1c\xb3\x6a\xd0\x0d\xce\x2b\x53\x63\xad\x3f\xd1\x5f\xdd\x25\xfd\x7a\x3f\xdd\x1f\x79\x00\x58\x1e\x4b\x73\x0d\xbf\x41\x3a\xf0\xbe\xbd\x9d\xf9\x45\xff\x5b\x2a\x3a\xdd\xb9\x4e\x57\x1a\x26\xfb\x7d\xc9\x1f\xe7\xd1\x0d\xaf\xdf\xcb\x45\xc3\xce\xb3\x57\xbb\x74\x8d\xef\x27\x25\xdc\xb8\x60\xa4\x2e\x96\x9b\x74\x10\xb7\x83\x3f\x6a\x2d\xd2\xc5\x1b\x20\x0a\x8c\x3e\x5e\x38\x02\x2c\xd3\x01\x97\x6f\x71\xe5\xea\x8e\x91\x6b\xe8\x89\xe0\xd2\x99\xd6\xb7\x6e\x79\x47\x8c\x57\x2f\x9a\x2c\xec\x8c\x2c\x15\xfb\x0c\x87\x60\xcf\x47\xa3\x41\x8d\xad\x76\x79\xa6\x9b\x2b\x43\x63\x59\x27\xaf\x15\x7e\x56\x90\xd2\x68\xa3\x70\x1d\x9e\x31\x8e\x0a\x1f\xe8\x9a\x92\xd7\x86\xe0\x54\x2c\x15\xd6\x46\x59\x62\xac\x0a\x35\xac\xc6\xa4\x37\x56\x33\x07\x49\x69\x6e\x56\x58\x01\x6d\xdf\x72\x0e\x11\x0d\x6a\x25\x3f\x02\x49\x22\x29\xce\x46\xae\x52\xde\xf8\x51\x5e\xaa\x02\x09\x49\x21\x53\x92\x43\xde\x6b\xfc\x87\xae\xc7\xb6\x06\x9a\x66\x32\x32\x9b\x87\x87\x8f\x6b\xd0\x1a\xb7\x05\xba\xbf\x77\x0b\x55\xed\x1a\xf1\xb6\x7a\x13\xab\x98\xd9\xba\x51\x9c\x60\x77\x64\x88\x44\xa2\xdb\x95\x58\xec\xf5\xa8\x18\x9e\x35\x9b\x57\x78\x01\x5c\xcf\x40\xcd\x02\xf3\x02\x3d\x0f\x6f\x17\x8c\xee\xd2\x8d\x47\xcd\x4f\x36\x7e\xdd\xfc\x0c\xfd\xea\x40\x49\xeb\x7a\xe4\x4e\x07\xda\x2e\xa8\xac\xb0\xcb\x0a\xb7\x97\xd7\xb3\xf9\xfb\x0f\xb7\x97\xf3\xe9\x2c\x17\xac\x76\x83\x4a\x4c\x80\x13\x42\x5c\x5f\xd6\x91\xf9\xf7\xd2\xe0\x9c\x73\x58\x82\x02\x41\x40\x77\xaf\x8e\x15\x16\xb8\x04\xda\x3e\xeb\x64\x8d\xae\xfd\x67\xff\x6c\xe6\x03\xdb\xad\xd7\x5c\x6e\x1f\x89\xf2\x5a\xb1\x0d\x36\xf0\xf3\xce\x73\x07\x0e\x52\xb9\x42\xe9\xf7\x9b\x01\xc3\x67\x83\x08\x8e\xc7\xef\x51\x78\x8c\x27\xd0\xe1\x19\xa6\x69\x0c\x0f\x0e\xba\x07\x23\x7d\x7f\xec\x3d\xd0\x54\x6a\x3f\xc4\x34\x53\x54\xfb\x26\xd6\x8e\xbf\xbb\xfd\x65\xc4\x87\x9b\x54\xf8\x3e\x3a\x91\x9e\x8a\x37\x9c\x95\x2b\x13\x22\xb1\x7d\x71\x8b\x9d\x6e\x3f\xa9\x6c\x24\xb7\x55\x32\x40\xd2\xad\xc0\x15\x23\x3e\xa1\xba\x6c\xc1\x44\x79\x29\xf0\x82\x03\x8d\xa5\xe0\xdf\x01\x00\x00\xff\xff\x66\x97\x11\xff\xad\x17\x00\x00")

func masterEtcOriginMasterMasterConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterConfigYaml,
		"master/etc/origin/master/master-config.yaml",
	)
}

func masterEtcOriginMasterMasterConfigYaml() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterSchedulerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xc1\x6e\xda\x40\x10\xbd\xf3\x15\x96\xcf\x39\x90\x1e\xb9\x01\x89\xa2\x4a\x0d\x5a\x41\x94\x43\xab\x1c\xb6\xbb\x0f\x18\xb1\xec\xd0\xd9\x35\x2d\x89\xf8\xf7\x6a\xed\xc6\x2d\x90\x2a\xb6\xe5\xf8\x64\xbd\x7d\xef\xed\xee\x8c\xdf\xf8\x65\x90\x65\x59\x96\xeb\x1d\x3d\x42\x02\xb1\xcf\x47\x59\xbe\xbf\xce\xaf\x2a\x7c\x43\xde\x26\x44\xb1\x23\x73\x78\x45\x77\x02\x4b\x46\x47\x84\x7c\x94\x7d\x2b\xb1\xf4\xbc\xd4\x6f\x25\xcb\xeb\x2d\x92\x76\xc6\x8f\xec\x8a\x2d\xbe\xb2\xc7\x94\xfd\xd2\x91\x89\x79\x4d\x3d\x5e\xbd\xa7\xbf\xd7\xbf\x6e\x27\x8b\xca\x63\xca\x85\x6f\x2b\xbe\x9b\xde\xaa\x9b\xee\xf2\xf1\x73\x21\xb8\xa1\xb0\xe9\x6c\x11\xcd\xfa\xb3\x8f\x10\xc5\x76\xbc\x5c\x92\xa7\x78\x68\x63\x30\xe3\xb4\x7b\x97\xca\xdd\xc1\x43\xb4\x53\x7f\xdb\xd5\x42\xac\xd8\x3e\xb0\x83\x24\xdd\x8c\x2d\x1e\x34\xf9\xd8\xca\x61\xba\x86\xd9\x24\xe9\x3d\xb6\x2c\x07\x25\x08\xa1\x10\x74\xb2\x48\x25\xe8\x6c\x50\x75\x6e\x42\xde\x92\x5f\x35\x51\x6b\x59\x15\x5b\xf8\x98\x8f\xce\x56\xca\xd5\x00\xd9\x93\x41\xdd\xcb\xb7\x48\x25\xd1\xe9\xef\x70\xa7\x19\xb9\xe0\x08\x56\x29\x75\x6f\x12\x9e\x2e\xd0\xe3\x09\xf2\xcf\x05\x4e\x2e\x3d\x3f\xf3\xac\x54\x4f\x75\x7a\x89\x85\x22\x35\x4b\xef\x02\x0e\x26\xb2\x2c\x76\x02\x6d\x55\xa5\x7d\x9d\x04\x35\xfb\x27\x68\xb5\x4e\xe5\xba\x6e\xd1\x9b\xf3\x50\xf4\x6a\xfe\x05\x3a\xc4\x39\x7e\x14\x08\x11\xfd\x9e\x7b\xa2\x9d\xf6\x06\x76\x8e\xc0\x85\x18\x8c\x9d\x63\xa3\x63\x2a\x79\x1f\xf6\xe9\x73\x57\x82\x25\x64\xbc\x67\xb2\x8a\x6d\x78\xff\xf8\xc3\xe1\x70\xd8\x72\x8f\x0f\x29\x7b\x39\x25\xfe\xcc\x0d\x62\xdf\x8b\x77\xb3\x34\xfa\x48\x0d\x13\x99\xce\xf9\xcc\x1e\x97\xa1\x6b\x16\xaf\xf4\x23\xfb\xef\x85\x3e\x9d\xa7\x6e\x70\x1c\xfc\x0e\x00\x00\xff\xff\xaa\x29\xaf\x2a\x65\x07\x00\x00")

func masterEtcOriginMasterSchedulerJsonBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterSchedulerJson,
		"master/etc/origin/master/scheduler.json",
	)
}

func masterEtcOriginMasterSchedulerJson() (*asset, error) {
	bytes, err := masterEtcOriginMasterSchedulerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/scheduler.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterSessionSecretsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xca\xce\xcc\x4b\xb1\x52\x08\x4e\x2d\x06\x89\x04\xa7\x26\x17\xa5\x96\x14\x73\x15\x43\x68\x2b\x2e\x5d\x85\xc4\xd2\x92\x8c\xd4\xbc\x92\xcc\xe4\xc4\x12\xb0\x16\xa5\xea\x6a\x05\x3d\xc7\xd2\x92\x0c\x88\x5a\x85\xda\x5a\x25\x2e\x05\x85\xd4\xbc\xe4\xa2\xca\x02\x24\x15\xae\x79\xc9\x48\x0a\x00\x01\x00\x00\xff\xff\x58\x97\xb9\x86\x74\x00\x00\x00")

func masterEtcOriginMasterSessionSecretsYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterSessionSecretsYaml,
		"master/etc/origin/master/session-secrets.yaml",
	)
}

func masterEtcOriginMasterSessionSecretsYaml() (*asset, error) {
	bytes, err := masterEtcOriginMasterSessionSecretsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/session-secrets.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterTmpAnsibleAnsibleSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xc1\x6e\xdb\x46\x10\xbd\xf3\x2b\x5e\xa4\xa2\x69\x01\x93\x8c\x5c\xc4\x01\x58\x34\x45\x8a\xb8\x68\x80\xa4\x2e\x1a\x1f\x7a\x28\x20\x2c\x77\x47\xe2\xd6\xab\x9d\xc5\xcc\x50\x8a\x1a\xf8\xdf\x0b\x52\xb2\x53\xd4\xa7\x92\x97\xe5\xf2\xcd\x9b\x79\x33\x6f\x96\xcf\xda\x3e\xe6\xb6\x77\x3a\xa0\xa6\x4f\x55\xb5\xc4\xed\xcd\xdb\x9b\x0e\x81\x61\x43\xd4\x0b\xb8\x1c\xb0\x63\x21\x7c\x23\xb4\x8d\x6a\x72\x84\xe7\xac\x9c\xe8\x02\x4e\xfb\x6f\x2f\x60\x03\xa1\x08\x17\x12\x1c\xdc\x71\xa2\x38\x10\xb6\x64\x58\x84\xe8\x12\xcc\x97\x0e\x89\xf9\x6e\x2c\xd8\x30\x37\xe4\xd4\x46\x6d\x7c\xe2\x31\xb8\x52\x1a\xf7\xf7\x28\xd4\x78\xde\x81\x33\x56\x2f\x9a\xe9\x5d\xad\xba\x97\xdf\x75\x10\x72\xa1\x5a\x62\x0c\x05\xab\x57\x97\xcd\xea\x55\xf3\xa2\xb9\xec\x5e\x5e\x5d\x5d\x5d\xd6\xaf\x9f\x42\x3b\x64\x86\xf0\x68\x04\x63\x0c\xac\x06\x12\x61\xd1\x05\x9c\x55\x4b\xa8\x39\xb1\x7a\x2c\x1d\x0e\x2e\x1a\xc6\x6c\x31\x4d\xd5\x2b\x41\xc7\x5e\x63\xa0\xa6\x3a\x0c\x31\x11\x9e\x81\x3d\xf6\x24\x1a\x39\xe3\xeb\xd7\x6d\xa0\x7d\x9b\xc7\x94\xbe\x47\xe0\x0a\xd0\x44\x54\xb0\xaa\x02\x67\xaa\xaa\x0d\xcb\xa4\xff\x2f\xf2\x86\x98\x11\x68\xe3\xc6\x64\xe0\x42\x59\x87\xb8\xb1\x3a\xe6\x8d\xb8\x73\x28\x7b\x14\x67\x7e\x78\x8c\xf8\xea\xe1\x50\x17\x3c\xff\xbc\xd8\x91\xb9\xe0\xcc\x2d\xba\xcf\x0b\x97\x33\x9b\xb3\xc8\x59\xa7\xcf\x47\xc2\x26\x72\x9b\x39\x50\xad\x94\xc8\x1b\xcb\xa2\xc3\x62\x71\x7f\x7f\xff\xfc\x5c\xd1\x12\x3f\xbf\xfb\xe3\xc3\x35\x6a\xdc\x0e\x51\xa1\x03\x8f\x29\xa0\x27\x0c\x2e\x87\x44\x01\xfd\x71\x9e\xda\x97\x12\x5d\xd6\xd8\x27\x42\x49\xee\xd8\x33\xdf\xe9\xd4\x41\xca\x3a\x0a\x55\x4b\x3c\x3c\x0e\x21\xca\x9c\xf1\x88\x68\xc8\x44\x61\x06\x1e\x24\x9e\x7a\x4e\x9f\xa2\x9a\xa2\xa7\xcd\xe4\x18\x67\x46\xbb\x62\x31\x6f\x1f\x41\xff\x22\x33\x46\xb4\x6a\x77\x17\xa2\x4c\xda\x5b\x32\xdf\xb2\xc4\x6d\xcc\xed\xce\xa9\x91\xb4\xd9\xed\x28\xac\x3d\x89\xc5\x4d\xf4\xce\x48\x27\x69\x6f\xa9\x24\x3e\xd5\x3f\xcf\x5a\x20\x34\xea\x94\x44\x28\xd1\xde\x65\x43\x71\x62\x8a\x8d\x4c\x9e\xfa\xaf\xc4\xea\xcd\xaf\x1f\xdf\xfd\xf4\xfe\x7a\xfd\xfb\xcd\xfb\xeb\x8f\xeb\xdf\xde\xdc\xfe\xf2\x43\x3b\xaa\xb4\x3a\x38\xa1\xf6\x8c\x6a\x9f\xc4\xb5\xc2\x89\xb4\xc5\x9f\x15\x70\xbe\xaa\x1f\xba\x35\xdd\xd5\x1f\xf0\x3f\x68\x52\xec\xd7\xa3\xc5\x34\x9f\xc4\xc9\x71\xe6\xad\x3d\x12\x7b\x97\x30\xef\x44\xcd\xbe\xd4\x61\x56\xdb\x1c\x77\xe9\x84\x88\xe7\x7f\x33\xae\x3e\x35\xaa\x8e\x79\x4f\x79\x9a\xca\x84\xfb\xb2\xc3\x85\x75\xca\x79\x3c\xd9\x7d\x20\x21\x4c\x5e\xf5\x9c\xf7\x24\x5b\xca\x9e\x7e\xac\xfe\x09\x00\x00\xff\xff\x4f\x0e\x4c\x56\x01\x04\x00\x00")

func masterTmpAnsibleAnsibleShBytes() ([]byte, error) {
	return bindataRead(
		_masterTmpAnsibleAnsibleSh,
		"master/tmp/ansible/ansible.sh",
	)
}

func masterTmpAnsibleAnsibleSh() (*asset, error) {
	bytes, err := masterTmpAnsibleAnsibleShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/tmp/ansible/ansible.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterTmpAnsibleAzureLocalMasterInventoryYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\x6d\x6f\xdb\xc8\x11\xfe\xae\x5f\x31\x50\x02\xa8\x45\x23\xa9\x49\x0e\x68\x8f\x40\x3e\xb8\x39\xe6\x6c\xf4\x6c\x19\xb2\x52\x24\x2d\x0a\x62\xc9\x1d\x8a\x5b\x2f\x77\x78\xbb\x4b\xc9\x3c\xc3\xff\xbd\x18\xee\xea\x8d\xb1\x1d\xdf\xf9\x93\xa9\x9d\x7d\xe6\x99\xf7\xd9\xe9\x74\x3a\x7a\x05\x9f\x2e\xbe\x5c\xa6\x09\x9c\x99\xce\x57\xca\xac\x21\x47\x4d\x5b\x50\x06\x84\xd6\xd3\x42\x34\x0e\x2a\xe1\x40\xf9\x89\x83\x8d\xd0\x2d\x82\xc5\x46\x8b\x02\x25\xe4\x1d\x38\x94\x2c\xea\x2b\x1c\xbd\x82\xf8\x47\x0d\x1a\x57\xa9\xd2\xd7\xc2\x79\xb4\xae\xb0\xaa\xf1\x33\x57\xc1\xb6\x52\x45\x05\xca\x81\x21\x0f\x4a\xa2\xd0\x6f\x60\x8b\xe0\x2a\x6a\xb5\x84\x52\xdd\x81\xaf\x84\x9f\x8d\x34\x15\x42\x87\xcb\xc9\x08\xa0\x22\xe7\x1d\xff\x03\xd0\x9f\xf0\xf7\x08\x60\x23\x6c\xfc\x55\x18\xa7\x72\x8d\x59\x41\xc6\x60\xe1\x15\x99\x24\x48\x9e\x9c\x36\x9d\xaf\xc8\x64\xca\x78\xb4\x8d\x45\x06\x87\x79\xeb\xec\x3c\x57\x66\x1e\x0e\xdf\x8d\x46\x27\x06\x64\xca\x31\xa8\x17\xca\xa0\x55\xbf\xa1\x4c\xe0\x93\xd0\x0e\x07\x52\x85\x56\x68\x7c\x96\x2b\x23\x6c\x77\x04\x4a\xc5\x37\x78\xb5\x58\x63\xe6\xc5\x3a\x81\xf1\xe6\x5f\xe9\xf2\xe6\x62\x71\x35\x0e\x42\xaf\xe0\x6a\xb1\x4a\x13\x58\x55\xca\x41\x51\x09\xb3\x46\xc7\xae\x7d\x3f\x7b\xfb\xd7\xbf\x80\x30\x32\x84\x40\x68\x0d\x05\xd5\xb9\x32\xbd\xe7\x3d\x81\x00\xa7\xcc\x5a\x23\x3b\x44\x89\x5c\x63\x84\x0b\x7f\xad\x91\x68\x39\x3e\x60\x44\x8d\x47\x54\xb6\x98\xb3\x6d\x8e\x34\x46\x5a\x2c\x30\xe0\x7b\x2c\xd4\x58\x2c\xd5\x5d\x02\xe3\x8b\xcb\xb3\x9f\xd3\xec\x7a\x99\x7e\xba\xf8\x32\x1f\x3f\x73\xe3\x00\xbb\xbf\xb5\xfa\x7a\x9d\x4e\xb7\x98\x4f\xa3\xcc\x73\xd7\x37\x68\x5d\x1f\xcb\xa1\xab\xc8\xe2\x3a\x6b\xad\xce\x62\x8e\xc0\xe4\x84\xd2\x91\xa6\xd7\xf7\x05\xd5\x0d\x19\x34\xfe\x21\x79\x7d\x1f\x11\x1f\x26\x03\xad\x01\x27\x93\x58\x8a\x56\xfb\xcc\xb5\xb9\xa4\x5a\x28\x93\xc0\x64\x95\x5e\x5e\x2f\x17\x9f\x57\xe9\xf2\xe2\x7a\x66\x54\x33\x53\x34\xd9\x05\xac\xaf\x9c\xf8\x7f\x1f\xb6\x98\xc9\x39\x82\xef\x1a\xfc\xa0\x4c\x69\xc5\x1b\xc8\x5b\xcf\x69\x5e\x89\x0d\x82\x27\xd0\x6a\x83\xb0\x55\xbe\x02\x8b\x6b\x45\x26\x88\x41\x49\x16\x0c\x6d\x23\x5c\x8e\x85\x68\x1d\x02\x95\xa0\x71\x2d\x8a\x0e\x2c\x0a\x47\xc6\x0d\x98\x5b\x6a\x99\xb9\x43\x8d\x85\x27\x76\xc5\x31\xe8\xd0\x4e\x3e\x73\xde\x76\xcf\xcb\xbf\x82\x2b\xea\xcb\x13\xb6\x55\x07\x9e\x0d\x53\x0e\x04\x48\x55\x96\x68\xd1\x78\x90\xc2\x8b\xde\xc4\x60\x9c\xf2\xa0\x86\xc4\x1a\x4b\x35\xfa\x0a\x5b\x97\x19\x92\x78\xa4\xf1\x3e\xaa\x9c\x24\x30\x09\x5a\x1f\x76\x0e\xbd\x41\x0f\x67\xbf\xb5\x16\xc1\x35\x58\xa8\x52\x15\x41\x15\xfb\x86\xab\x1e\x25\xec\x4c\x18\xa8\x0b\xa7\x47\x06\x7a\xb2\x9c\x7c\x8d\xa5\x8d\x92\x9c\x23\x63\xc1\xc0\x59\xae\x29\x1f\x26\xdd\x53\x97\x6f\x95\x91\x09\x8c\x29\xff\x1f\x16\xfe\xa5\x97\x0e\x6a\x32\x51\x14\xd4\x1a\x1f\x0a\x60\xb2\x4c\x7f\xbe\xb8\x59\x2d\xbf\x66\x37\xab\xc5\x92\x33\xf4\xec\xdf\x9f\x97\x69\x76\xf6\xf1\xe3\xe2\xf3\xd5\xea\xea\xec\x32\x1d\x86\xeb\xe5\x2a\x6e\xb1\xfb\xae\x86\x7f\xa6\x5f\xff\x80\x82\x7d\xfb\x4b\x60\xbc\x93\xfb\x03\xae\xb0\x28\x74\x9d\xc0\xb8\x20\x8b\xb3\xad\x32\x92\xb6\x6e\x66\xd0\x8f\x1f\xa9\xa5\xf8\xcb\xb9\xb0\x12\x0a\x92\x18\x52\x30\xd6\xc7\xec\x44\xe6\x63\x6b\x39\x21\x75\xd7\x77\xb8\x42\xb7\x5c\xc7\xe0\xbc\xf0\x08\xc2\x83\xc4\x46\x53\x57\x73\xca\x7a\x55\x23\x48\xc2\x30\x7c\x42\x2d\x72\x53\x24\x89\x2e\x82\x05\xfe\x68\x51\x72\x99\xf2\x69\xe8\x0b\xa1\x58\xb5\xc8\x51\x3b\x10\x4d\xa3\x15\xca\xbe\x21\x5b\x14\xb2\x63\xd9\x1c\xe1\xd7\x16\xad\x42\x19\xa1\xc4\x5a\x28\xe3\x3c\x73\x60\x9c\x86\x94\xf1\xfd\x9c\x64\x16\x61\x5e\x46\x72\xfd\xc8\x0b\x42\x5a\x74\x39\xd1\xad\x03\xdb\x9a\x19\x9c\x69\x47\x6f\x22\x1c\x1f\x87\x4a\xef\x87\xaf\x2a\x04\xf4\x61\x87\xd8\xb1\x60\x5c\x0a\xad\x1d\xe4\xa2\xb8\x1d\x33\xa1\xb7\xcc\xd3\x52\x63\x95\xf0\xa8\x3b\xd8\x56\x68\x11\x84\x3b\xc6\x8b\xd1\xda\x23\x6a\x5a\x73\xbd\x45\x17\xcd\x60\xd5\xdf\xd9\x0a\x9e\x39\x8e\x40\x2a\x57\xb4\x8e\xdb\x27\x88\x9c\xb8\xea\xcb\x88\x16\xe6\xd2\x41\x1f\x13\x90\x14\xa2\x16\xfb\x5c\xaf\xc1\xc1\x87\x0f\x10\x9a\x5d\xef\xf6\x7d\x93\x63\x80\x88\xd5\xa0\x2d\xb1\xe0\x80\x96\x28\xfa\xb9\xcd\x68\x7d\xb8\x84\x39\xba\x1c\xed\xaf\xd4\xba\xea\xc7\x9b\xd8\xf9\xd4\x29\xbb\x8f\xc2\x4e\xef\x69\xce\x2c\x71\xa3\x9c\xf2\xa0\x05\xfb\xf3\x4f\x0d\x39\xd6\xd3\x71\x83\x13\x58\x93\x71\xe8\x81\x2c\xbc\x26\x5f\xa1\xfd\xf3\x13\xa9\x1e\xda\xee\x4e\x41\x02\x6f\xbf\x53\x12\xc7\x92\x4f\x77\xca\x3e\x71\x13\x18\x37\x16\x1d\x9a\x6f\x5a\xce\xb0\xa7\xe2\x5d\x43\x96\x79\x84\x41\xbb\x9f\x97\x93\xeb\xe5\xe2\x32\x5d\x9d\xa7\x9f\x6f\xb2\xf4\xcb\xf5\x62\xb9\x4a\x97\x59\x1c\xa1\x93\xa1\xfa\x93\x81\x6d\x9c\x17\x5a\x27\xb0\xb2\x2d\x3e\xc3\x33\xe8\x7b\xd9\x42\x70\xa8\xc1\x8c\x27\x46\x02\x93\xb3\xab\x9b\x8b\x7f\xfc\x92\x66\x3f\xa5\xd7\xbf\x2c\xbe\xf6\x83\x3a\xb2\xda\xad\x6a\x0e\xed\x46\x15\x98\xe5\x96\x6e\xd9\xbc\x13\x5a\xa7\xf0\x3b\xd1\x42\x78\xa1\x69\xfd\x2c\xb5\xa3\xc5\x60\xc8\xf2\x71\x98\x83\x47\x37\x7b\xf7\x3d\xba\x39\xa0\x2f\x24\x6f\x24\x2e\x81\xff\x8c\x2b\xef\x1b\x97\xcc\xe7\xe7\x8b\x9b\xbe\xad\x27\xef\xde\xff\xed\xc7\xf1\x7f\x83\x89\x1e\xeb\x86\x33\x6f\x68\xe3\x73\xce\x7c\xea\xce\x53\xfb\xd5\x4e\x7e\x1a\xe5\xa7\x41\xfe\x79\xb0\x27\xb7\xad\x93\xc5\x54\x39\xb0\x28\x5b\x23\x85\xf1\x61\xf8\x5b\xfc\xb5\x55\xb1\x67\x56\xc2\x48\x5e\x44\x03\x14\xb8\x5b\xdc\x42\x8e\x7e\x8b\x68\x4e\x96\xd2\xbd\xff\xa6\x31\xe2\xdc\x13\x17\x56\xad\xf9\xd5\x61\x24\x2c\x3e\x5e\x0f\xfc\x8c\x77\xa2\x6e\x34\x86\x75\x9c\x73\xe9\x88\xee\xcd\xf9\x62\xb9\xe2\xfc\x1e\x10\xfe\x89\xfa\x5e\x2f\xb1\x54\x06\xbf\x5b\xc3\xe0\xe8\xd0\x8b\xbd\x70\xb7\x50\xaa\xfd\x2e\x1d\x64\x67\x5d\xad\x41\x19\xa7\x64\x18\x1e\x43\x48\xb0\xa4\x11\x4a\x4b\xf5\x23\x16\x6e\x95\xd6\xbb\xe9\xd0\x7a\x6a\xa8\x69\x39\x0c\xbc\x3c\xb5\xbc\xc0\x3f\x8a\x38\xdc\xef\x7a\xef\xf0\xa8\xe9\x94\x59\x1f\x35\x73\xd3\xd6\x39\x5a\xde\x16\x8f\xfa\xeb\x30\x7c\x87\x17\x82\x8b\x8f\x3c\x61\xd9\xf3\x1e\xad\x11\x9a\xe3\xf7\x2d\x6b\xd6\xb7\xc5\x89\x3d\x7d\x54\x84\xad\x2a\x92\xae\xa1\x1f\x14\xfc\x12\xd9\x90\x92\x3d\x1f\x65\x0a\x9e\xcc\x3c\xbf\x9d\x67\x5a\xa5\x28\x3c\x94\xca\xc8\x1d\xef\xbd\xaa\xf0\x84\x03\x7e\xd4\xd4\x64\x76\x5f\xfc\x6d\x4a\xb5\xce\x72\xe1\x30\x81\x39\xfa\x62\x4e\x7d\x82\xcc\xf7\x12\x2f\xcc\x89\x20\x7c\x78\x4e\x46\x13\xda\x5c\xab\x62\xdf\xf9\x5a\xab\x13\xd8\x57\xee\xfd\x3d\xcc\xd2\xbb\xe0\x97\xcb\xfe\xe2\x39\xb9\x7e\x8f\x83\x87\x87\xe4\xef\x3f\xfc\xf0\x7e\x7e\xf2\x7e\x39\x02\x14\x8d\xfa\xdd\x60\x07\x90\x97\xf4\x11\x78\x15\x5f\xec\x57\x04\x9a\xcc\x1a\x2d\x18\x44\xc9\x3b\x89\x63\x57\x7f\x13\xc4\xe9\xfb\xd9\x8f\xb3\x77\xef\xa6\x6f\xe3\x4b\x64\x62\xb1\x2f\x0c\x32\x21\xe1\x77\xe5\xda\xa1\x8f\x44\x38\x7d\x0e\xae\xe2\xaf\xb8\xc3\xee\xa8\x4c\x46\x23\xa2\xd8\xfc\x5c\xe6\x29\x0b\xd1\x7a\xf2\xb5\xfe\xff\x00\x00\x00\xff\xff\xfd\xa0\x55\x85\x6a\x10\x00\x00")

func masterTmpAnsibleAzureLocalMasterInventoryYmlBytes() ([]byte, error) {
	return bindataRead(
		_masterTmpAnsibleAzureLocalMasterInventoryYml,
		"master/tmp/ansible/azure-local-master-inventory.yml",
	)
}

func masterTmpAnsibleAzureLocalMasterInventoryYml() (*asset, error) {
	bytes, err := masterTmpAnsibleAzureLocalMasterInventoryYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/tmp/ansible/azure-local-master-inventory.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterTmpAnsibleAzureOcpDeployYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x94\xcf\x6b\xdb\x4e\x10\xc5\xef\xfe\x2b\x1e\xf9\x1e\x7c\xf9\x3a\x4e\xe8\x4d\xd0\x9e\xda\x42\x0e\xa5\x87\xf6\x50\x28\x45\xac\x56\x63\x6b\xf1\x6a\x57\xcc\xcc\xc6\x35\xe4\x8f\x2f\xab\x5f\x0e\x21\x8e\x6d\x7a\xe8\xcd\x1e\xed\xbc\xf7\xd9\x99\x27\xad\x10\x4c\x4b\x05\x3e\x52\xe7\xe3\x01\x5f\x3b\x0a\xdf\x1a\xb7\x51\xb8\xb0\x61\x23\xca\xc9\x6a\x62\xc2\x3e\xf2\xce\x47\x53\x2f\x80\x26\x8a\x4a\x01\x1f\xad\xf1\xad\x11\x25\x5e\x00\x5b\xa3\x0d\x71\xb9\x31\x36\x3f\xdb\x18\x2f\xb4\x58\x00\x6a\x64\x27\xc5\x02\x00\x26\xa7\x87\xb6\x8b\xac\x88\x1d\x05\xc9\x4e\x65\x15\xa3\x8a\xb2\xe9\x4a\x93\x34\x9a\xae\xe3\xf8\x48\x0c\x8e\x9e\xb0\xe1\xd8\x1e\x8f\xae\x4c\x10\x57\x79\x82\x46\xd4\x03\x70\x88\x35\x61\x56\x40\x56\xc0\x24\xd1\xdb\x02\xae\x37\x2c\xb3\x5e\x31\x96\x30\xb2\x9c\x83\x58\xbc\x46\x6e\x42\x8d\x24\x04\x8e\x49\x89\xfb\x2b\x62\xe3\x4e\xc3\x1e\x4d\xf2\xe4\xa8\xee\x6f\x76\x0d\xdb\xd0\x36\x3f\xee\x67\x5a\x66\xb3\x62\x64\xb8\x3d\xb4\xfe\x6d\x54\xda\x3a\x51\x3e\xfc\x63\xd8\x91\xe2\x24\xee\x51\x65\x4f\x55\x69\x63\x90\x9c\x81\xcb\x82\xb0\xa7\x0a\x63\xc7\x35\xb8\xcf\x8c\x06\xa4\xff\xf0\xf9\xe1\xc7\x97\x4f\x58\xe1\x7b\x43\x4c\x4b\x81\x01\x1b\x4b\x59\xbc\x76\xea\x62\xc0\x3e\x3f\x80\x36\x34\xbc\x24\xf0\xa6\x22\x0f\x27\x61\xa9\x39\x7b\xde\x51\x0d\x8d\xa3\xda\x3c\x88\xf9\x78\x1f\xd9\x3a\xb1\x0b\x5b\x58\x9f\xf2\x0b\x84\xaa\xff\x97\x3a\xb8\xf0\xa2\xef\x5c\x44\xff\x87\x36\x4e\xe0\x04\x1d\xc7\xca\x53\x6b\xd4\x59\x54\x64\x4d\x5e\xbc\x36\x74\x52\xaf\xe3\xd8\x92\x36\x94\x64\x18\xb1\x6d\xc8\xee\x24\x8f\x94\x82\xa4\xe1\x86\x4c\x59\x79\x64\xde\x3b\x6d\x4e\xde\x4a\xc8\x93\xd5\xc8\x48\xdd\xda\x3c\x1a\xe7\x4d\xe5\x69\x2d\xb6\xa1\x3a\xf5\xbf\x6f\xc7\x8d\x4b\x43\xde\x17\x58\xae\x93\xf0\xba\x72\x61\x1d\x2d\xb6\xa4\xbd\x85\x60\xe5\x71\x93\x73\x12\xc3\xfb\x5e\xf7\x06\x4f\xd8\x5b\xac\xfc\x72\x5c\xe1\x10\x22\xe2\x1c\x27\x49\x5e\xc7\x72\x0a\xea\xfc\x54\xbb\x15\xad\x63\xd2\xd2\xbb\x40\xf2\xf3\xee\xd7\x93\x0b\x8a\x0f\xb8\x9f\x25\x94\x1d\x49\x81\x77\x77\x63\xa5\x26\x6f\x0e\x05\xee\xef\x16\x67\x72\xf9\x72\x66\x67\x63\x79\x6c\xb8\x26\x95\xcf\xba\xde\xe6\x11\xe2\x47\x67\xa9\xb4\x46\x8d\x8f\xdb\x0b\xa1\xf2\xd6\xc6\x4e\x8c\x9d\xd7\xd0\xbd\x30\x3d\xf1\xe5\xe9\x4d\xe7\xb3\x15\xc7\xdd\xc5\x1f\xf5\xcc\x37\x55\x27\xce\x41\xe0\x3c\xe6\xeb\xc6\xaf\x32\x2a\xb5\x9d\x37\xfa\x17\x90\x93\xc2\xd5\x94\x27\xac\xcf\x6c\x9b\x7e\x9b\xb6\xf3\x74\x69\xf6\x32\xe1\xd4\x72\xcd\x7e\xe7\x9e\x3f\x01\x00\x00\xff\xff\x22\x9c\xd0\xe3\x1d\x08\x00\x00")

func masterTmpAnsibleAzureOcpDeployYmlBytes() ([]byte, error) {
	return bindataRead(
		_masterTmpAnsibleAzureOcpDeployYml,
		"master/tmp/ansible/azure-ocp-deploy.yml",
	)
}

func masterTmpAnsibleAzureOcpDeployYml() (*asset, error) {
	bytes, err := masterTmpAnsibleAzureOcpDeployYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/tmp/ansible/azure-ocp-deploy.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterTmpBootstrapconfigsComputeConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4b\x6f\x1b\x37\x10\xbe\xf3\x57\x0c\x94\x1c\xab\x7d\xc8\x4d\x03\x10\xc8\xc1\xf5\x23\x35\x8a\x24\xaa\x6d\x14\xed\xa9\xe0\x92\x23\x89\x15\x97\xc3\x0e\xc9\x75\xd4\xc0\xff\xbd\x20\x57\xf2\x03\xbd\xb4\x97\x05\x38\x8f\x6f\xbe\xf9\xf6\x1b\xe5\x1c\x3d\x5c\xda\xa8\x06\x87\xe6\x92\xf4\x1e\x59\xc2\x46\xb9\x88\x42\x05\xfb\x2b\x72\xb4\xe4\x25\x4c\xbd\x30\x3e\xfe\x68\xbd\x39\x37\x86\x31\x46\x09\xfd\xea\x7d\xd3\x35\x5d\xd3\xcb\x77\x67\x25\x79\x8b\x3a\x73\xb4\x13\xde\x62\x24\x37\x5d\x90\xdf\x48\x68\x31\xe9\x96\xd8\x6e\xad\x6f\x3d\x19\x6c\xb9\x26\x1b\x4d\x7e\x53\x9a\x2e\x69\x54\xd6\x4b\xd0\x2e\xc7\x84\xdc\x38\xd2\xca\x95\xc4\xcd\x5a\x42\xff\x7e\xd5\xf4\x65\x48\x2f\x4c\x65\x56\x30\xed\x56\x0a\x00\xfc\x8a\xfa\x27\xe5\x8d\x43\xfe\xac\x46\x94\xb0\x58\x08\x1b\x52\xd9\x22\xde\x1d\xbc\x5e\x23\x5b\x32\x12\x16\x67\x5d\x5c\x08\x3b\xaa\x2d\x3e\x37\x6f\x88\x47\x95\x24\xdc\x7c\x3a\xff\x78\xf5\xc7\xfa\xf6\xea\xfa\xe6\xb7\x76\x7e\xdc\xff\xbe\xbe\x5a\xbe\xfd\xa6\x69\x0c\xe4\xd1\xa7\x47\xf9\xf6\xdb\x34\x8b\xf0\x28\x00\x9c\x4a\x18\x93\x84\xeb\x2a\xd0\xde\x7a\x23\xe1\x33\x99\x23\xb6\xd8\xe7\x01\x1d\xa6\x73\xde\xe6\x11\x7d\x8a\x65\x58\xd9\x7a\xe9\xd4\x80\xae\x3e\x97\x73\x80\xc9\x61\x53\xca\xd9\x63\xc2\xd8\x58\x6a\xcb\xcc\x9c\xf0\x43\xe2\x8c\xb5\x90\x71\x6b\xc9\x7f\x08\x6c\x47\xc5\x07\x01\xa0\x1d\x65\xb3\x0c\x4c\x93\x35\xc8\x33\xda\x42\xfd\x9d\x19\x17\x4f\x59\xfd\xb4\xe5\x12\x16\x55\xfd\x5a\x30\x7f\xab\xec\x0b\x31\xaa\xa2\xf5\x85\xb3\xe8\xd3\x05\x79\x8f\x3a\x59\xf2\x5f\x26\x64\xb6\x06\x2b\x4d\xa5\x35\x86\x92\x4c\xe8\xd3\xfd\x21\x60\x94\xa0\x42\x70\x56\xab\x52\xdb\x4e\xde\xbc\xa4\x1f\x98\x12\x0d\x79\xf3\xdd\xcb\x9a\x3f\x23\xf9\xc2\xeb\x19\xe4\x3f\x61\x08\x80\x21\x73\x51\x79\xd5\x75\x02\xe0\xaf\x50\xcc\xd6\x75\x47\xda\x3f\xe7\xe1\xf4\x2b\xab\x94\x15\x62\xde\x5a\x78\x4c\x0f\xc4\xfb\xb5\xcb\x5b\xeb\x67\x5f\x30\x9a\x9d\x4a\x2d\x05\xf4\x71\x67\x37\x69\x49\x53\x5c\xc6\x3c\x78\x4c\xe2\x0d\x1c\x1b\x66\x3c\x88\x89\xb3\x4e\x60\x7d\x62\x32\x59\xa3\x01\xeb\x61\x36\x2f\xf4\x4d\xd7\xfc\x00\xca\x1b\xf8\x72\x77\x05\x67\x4d\xd7\xac\xe0\x61\x67\xf5\x4e\xbc\x01\x83\x81\x51\x17\x6b\xc0\xbf\x18\x80\x1a\x68\xc2\x06\xee\x77\x08\xe9\x81\x20\xee\x28\x3b\x03\xa3\x4a\x7a\xd7\x88\x57\xf3\x8b\xee\x63\xca\x12\xfa\xef\xdf\x95\xc5\xff\xe7\x36\x81\xcc\x27\xe5\xed\x06\x63\x3a\xe1\x45\xe4\xc9\xfa\xed\x8d\xdf\x50\x01\x1f\x5e\x9e\x6f\x57\x8f\xb7\x93\x7d\xb7\xaa\xd3\x34\x72\xba\xb6\x0e\x25\x94\x2e\xe4\x46\x73\xaa\xae\xaa\x2e\x39\x97\xa0\xd5\x31\xb4\xc7\xc3\xab\xc2\x3d\x1e\xc4\x44\x2e\x8f\x78\x69\x19\x75\x22\x3e\x48\x68\x27\xc5\xad\xb3\xc3\xe9\xf8\x9f\x28\xcf\x27\xde\xcc\x0d\x51\x04\xa6\xaf\x87\x57\x07\x53\x23\xcb\x91\x0c\x96\x17\x14\x23\x9f\x2e\xfb\x38\xe6\x59\xae\x8a\xf5\x4b\xa6\xa4\xe6\xda\x80\x7c\x7d\xf7\x91\x29\x07\x29\xfe\x09\x00\x00\xff\xff\x9e\xdd\x05\x83\xda\x04\x00\x00")

func masterTmpBootstrapconfigsComputeConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterTmpBootstrapconfigsComputeConfigYaml,
		"master/tmp/bootstrapconfigs/compute-config.yaml",
	)
}

func masterTmpBootstrapconfigsComputeConfigYaml() (*asset, error) {
	bytes, err := masterTmpBootstrapconfigsComputeConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/tmp/bootstrapconfigs/compute-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterTmpBootstrapconfigsInfraConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4d\x6f\x1c\x37\x0c\xbd\xeb\x57\x10\x9b\x1c\xbb\xf3\xb1\x6e\x1a\x40\x40\x0f\xae\x3f\x52\xa3\x48\xb2\xb5\x8d\xa2\x3d\x15\x1a\x89\xb3\xab\xae\x86\x9c\x52\xd2\x38\xdb\x20\xff\xbd\xd0\xcc\xda\x8e\xd1\x4b\x73\x19\x40\x43\xf2\x91\xef\x91\xcf\x84\xc0\x0f\x97\x3e\x9a\x2e\xa0\xbb\x64\x7b\x40\xd1\xd0\x9b\x10\x51\x99\xd1\xff\x86\x12\x3d\x93\x86\xa9\x55\x8e\xe2\x4f\x9e\xdc\xb9\x73\x82\x31\x6a\x68\x37\x6f\xab\xa6\x6a\xaa\x56\xbf\x39\x2b\xc1\x5b\xb4\x59\xa2\x9f\xf0\x16\x23\x87\xe9\x82\xa9\xd7\x50\x63\xb2\x35\x8b\xdf\x79\xaa\x89\x1d\xd6\x32\x07\x2b\xcb\xd4\x97\xa2\x4b\x1e\x8c\x27\x0d\x36\xe4\x98\x50\xaa\xc0\xd6\x84\x12\xb8\xd9\x6a\x68\xdf\x6e\xaa\xb6\x34\x69\x95\x9b\x27\x2b\x98\x7e\xa7\x15\x00\x7e\x42\xfb\xb3\x21\x17\x50\x3e\x98\x01\x35\xac\x56\xca\x8f\xa9\xb0\x88\x77\x47\xb2\x5b\x14\xcf\x4e\xc3\xea\xac\x89\x2b\xe5\x07\xb3\xc3\xe7\xe2\x9e\x65\x30\x49\xc3\xcd\xfb\xf3\x77\x57\x7f\x6e\x6f\xaf\xae\x6f\x7e\xaf\x97\xc7\xfd\x1f\xdb\xab\xf5\xeb\xcf\x96\x87\x91\x09\x29\x7d\xd1\xaf\x3f\x4f\x8b\x08\x5f\x14\x40\x30\x09\x63\xd2\x70\x3d\x0b\x74\xf0\xe4\x34\x7c\x60\x77\xc2\x56\x87\xdc\x61\xc0\x74\x2e\xbb\x3c\x20\xa5\x58\x9a\x15\xd6\xeb\x60\x3a\x0c\xf3\x73\x0d\x82\x3b\xcf\xf4\xa3\xa7\x5e\x8c\x02\xb0\x81\xb3\x5b\x8f\xc2\x93\x77\x28\x4b\xca\xca\xfc\x93\x05\x57\x4f\x51\xfb\x34\xfa\x1a\x56\xb3\xa4\x73\xc2\xf2\x9d\xb5\x5c\xa9\xc1\x14\x01\x2f\x82\x47\x4a\x17\x4c\x84\x36\x79\xa6\x8f\x13\x8a\x78\x87\x73\x6f\x63\x2d\x8e\x25\x98\x90\xd2\xfd\x71\xc4\xa8\xc1\x8c\x63\xf0\xd6\x94\xdc\x7a\x22\x57\x15\x0a\x42\x98\x30\x56\xa3\x70\xe2\x2e\xf7\xdf\x7d\x9d\xf3\x57\x64\x2a\x73\x3d\x83\xfc\x2f\x0c\x05\xd0\x65\x29\xd2\x6d\x9a\x46\x01\xfc\x3d\x96\x0b\x6a\x9a\xd3\xd8\xbf\xe4\xee\x71\x3f\xb3\x60\x33\xc4\xc2\x5a\x11\xa6\x07\x96\xc3\x36\xe4\x9d\xa7\x65\xd9\x82\x6e\x6f\x52\xcd\x23\x52\xdc\xfb\x3e\xad\x79\x8a\xeb\x98\x3b\xc2\xa4\x5e\xc1\xa9\x60\xc1\x83\x98\x24\xdb\x04\x9e\x92\xb0\xcb\x16\x1d\x78\x82\xe5\x22\xa1\xad\x9a\xea\x07\x30\xe4\xe0\xe3\xdd\x15\x9c\x55\x4d\xb5\x81\x87\xbd\xb7\x7b\xf5\x0a\x1c\x8e\x82\xb6\xec\x1b\xfe\x33\x01\x98\x8e\x27\xac\xe0\x7e\x8f\x90\x1e\x18\xe2\x9e\x73\x70\x30\x98\x64\xf7\x95\x7a\xd1\xbf\xe8\x3e\xa4\xac\xa1\xfd\xfe\x4d\x21\xfe\x8d\x6c\x46\x76\xef\x0d\xf9\x1e\x63\x7a\xc4\x8b\x28\x93\xa7\xdd\x0d\xf5\x5c\xc0\xbb\xaf\x3d\xd9\xcc\x8e\x6c\x74\xdb\x6c\xe6\x6e\x16\x25\x5d\xfb\x80\x1a\x4a\x15\x4a\x65\x25\xcd\x57\x35\x5f\xc9\xb9\x06\x6b\x4e\xbf\x0e\x78\x7c\x91\x78\xc0\xa3\x9a\x38\xe4\x01\x2f\xbd\xa0\x4d\x2c\x47\x0d\xf5\x64\xa4\x0e\xbe\x7b\x74\xf4\xd3\xc8\x8b\x6f\xab\xa5\x20\xaa\x51\xf8\xd3\xf1\x85\x0b\xe6\x3f\xeb\x81\x1d\x96\x17\x94\x43\x7e\xb4\xeb\xa9\xcd\xb3\x5c\x33\xd6\xaf\x99\x93\x59\x72\x47\x94\xeb\xbb\x77\xc2\x79\xd4\xea\xdf\x00\x00\x00\xff\xff\xb9\x56\xc5\xa3\xaf\x04\x00\x00")

func masterTmpBootstrapconfigsInfraConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterTmpBootstrapconfigsInfraConfigYaml,
		"master/tmp/bootstrapconfigs/infra-config.yaml",
	)
}

func masterTmpBootstrapconfigsInfraConfigYaml() (*asset, error) {
	bytes, err := masterTmpBootstrapconfigsInfraConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/tmp/bootstrapconfigs/infra-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterTmpBootstrapconfigsMasterConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x8f\x1b\x37\x0c\xbd\xeb\x57\x10\x4e\x8e\xf5\x7c\x38\x4d\x03\x08\xc8\x61\xbb\x1f\xe9\xa2\x48\xe2\xee\x2e\x8a\xf6\x54\x68\x24\x8e\xad\x5a\x23\xaa\x94\x34\x1b\x37\xc8\x7f\x2f\xa4\xf1\x7e\xa1\x97\xf6\x32\x80\x44\xf2\x91\xef\xe9\x71\x94\x73\x74\x7f\x61\xa3\x1a\x1c\x9a\x0b\xd2\x07\x64\x09\xa3\x72\x11\x85\x0a\xf6\x57\xe4\x68\xc9\x4b\x98\x7b\x61\x7c\xfc\xd1\x7a\x73\x66\x0c\x63\x8c\x12\xfa\xcd\xbb\xa6\x6b\xba\xa6\x97\x6f\xdf\x94\xe0\x0d\xea\xcc\xd1\xce\x78\x83\x91\xdc\x7c\x4e\x7e\x94\xd0\x62\xd2\x2d\xb1\xdd\x59\xdf\x7a\x32\xd8\x72\x0d\x36\x9a\xfc\x58\x8a\x2e\x68\x52\xd6\x4b\xd0\x2e\xc7\x84\xdc\x38\xd2\xca\x95\xc0\xf5\x56\x42\xff\x6e\xd3\xf4\xa5\x49\x2f\x4c\x9d\xac\x60\xda\x9d\x14\x00\xf8\x05\xf5\x4f\xca\x1b\x87\xfc\x49\x4d\x28\x61\xb5\x12\x36\xa4\xc2\x22\xde\x1e\xbd\xde\x22\x5b\x32\x12\x56\x6f\xba\xb8\x12\x76\x52\x3b\x7c\x2a\x1e\x89\x27\x95\x24\x5c\x7f\x3c\xfb\x70\xf9\xc7\xf6\xe6\xf2\xea\xfa\xb7\x76\x39\xdc\xfd\xbe\xbd\x5c\xbf\xfe\xaa\x69\x0a\xe4\xd1\xa7\x6f\xf2\xf5\xd7\x79\x11\xe1\x9b\x00\x70\x2a\x61\x4c\x12\xae\xaa\x40\x07\xeb\x8d\x84\x4f\x64\x4e\xd8\xe2\x90\x07\x74\x98\xce\x78\x97\x27\xf4\x29\x96\x66\x85\xf5\xda\xa9\x01\x5d\x3d\xae\x97\x0b\x26\x87\x4d\x49\x67\x8f\x09\x63\x63\xa9\x9d\x54\x51\xe0\x7d\xe2\x8c\x35\x8f\x02\xfa\xb8\xb7\x63\x5a\x5b\x3f\xb2\x7a\xaf\x82\x8d\xc8\x33\xb2\x00\xd0\x8e\xb2\x59\x07\xa6\xd9\x1a\xe4\x05\x77\xa5\xfe\xce\x8c\xab\xc7\xa8\x7e\xe4\xbb\x86\x55\x7d\x87\x9a\xb0\x7c\xeb\x03\xac\xc4\xd2\xf3\xdc\x59\xf4\xe9\x9c\xbc\x47\x9d\x2c\xf9\xcf\x33\x32\x5b\x83\x75\x60\xa5\x35\x86\x12\x4c\xe8\xd3\xdd\x31\x60\x94\xa0\x42\x70\x56\xab\x92\xdb\xce\xde\x3c\x27\x12\x98\x12\x0d\x79\xfc\xee\x79\xce\x9f\x91\x7c\x99\xeb\x09\xe4\x3f\x61\x08\x80\x21\x73\xd1\x7b\xd3\x75\x02\xe0\xaf\x50\x6c\xd7\x75\xa7\xb1\x7f\xce\xc3\xc3\xa3\x56\x51\x2b\xc4\xc2\x5a\x78\x4c\xf7\xc4\x87\xad\xcb\x3b\xeb\x17\x87\x30\x9a\xbd\x4a\xed\x93\xac\x34\xc7\x75\xcc\x83\xc7\x24\x5e\xc1\xa9\x60\xc1\x83\x98\x38\xeb\x04\xd6\x27\x26\x93\x35\x1a\xb0\x1e\x16\x1b\x43\xdf\x74\xcd\x0f\xa0\xbc\x81\xcf\xb7\x97\xf0\xa6\xe9\x9a\x0d\xdc\xef\xad\xde\x8b\x57\x60\x30\x30\xea\x62\x12\xf8\xd7\x04\xa0\x06\x9a\xb1\x81\xbb\x3d\x42\xba\x27\x88\x7b\xca\xce\xc0\xa4\x92\xde\x37\xe2\x45\xff\xa2\xfb\x94\xb2\x84\xfe\xfb\xb7\x85\xf8\xff\x64\x13\xc8\x7c\x54\xde\x8e\x18\xd3\x03\x5e\x71\x8e\xf5\xbb\x6b\x3f\x52\x01\x1f\x9e\x2f\x72\x57\xd7\xb8\x93\x7d\xb7\xa9\xdd\x34\x72\xba\xb2\x0e\x25\x2c\x7e\x6b\x34\xa7\xea\xaa\xea\x92\x33\x09\x5a\x9d\xae\x0e\x78\x7c\x91\x78\xc0\xa3\x98\xc9\xe5\x09\x2f\x2c\xa3\x4e\xc4\x47\x09\xed\xac\xb8\x75\x76\x78\xf8\x0d\x3c\x8e\xbc\x2c\x7b\xb3\x14\x44\x11\x98\xbe\x1c\x5f\xac\x4e\xbd\x59\x4f\x64\xb0\x9c\xa0\x18\xf9\x61\xc7\x4f\x6d\x9e\xe4\xaa\x58\xbf\x64\x4a\x6a\xc9\x0d\xc8\x57\xb7\x1f\x98\x72\x90\xe2\x9f\x00\x00\x00\xff\xff\xe9\x63\x55\x7a\xe4\x04\x00\x00")

func masterTmpBootstrapconfigsMasterConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterTmpBootstrapconfigsMasterConfigYaml,
		"master/tmp/bootstrapconfigs/master-config.yaml",
	)
}

func masterTmpBootstrapconfigsMasterConfigYaml() (*asset, error) {
	bytes, err := masterTmpBootstrapconfigsMasterConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/tmp/bootstrapconfigs/master-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeEtcAzureAzureConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x49\xcd\x4b\xcc\x2b\xf1\x4c\xb1\x52\xa8\xae\x56\xd0\x73\xac\x2a\x2d\x4a\x75\xce\xcf\x4b\xcb\x4c\xd7\x0b\x81\xc8\xb8\x28\xd4\xd6\x72\x15\x97\x26\x15\x27\x17\x65\x16\x94\x64\xe6\xe7\x61\x53\x1b\x8c\x2c\x0f\xd6\x91\x98\x98\xe2\x9c\x93\x99\x8a\xdd\x68\x47\x47\x17\xa8\x24\xaa\xda\xe0\xd4\xe4\xa2\xd4\x12\x3c\xea\x21\x0a\xa0\x7a\x42\x88\x72\x7a\x51\x6a\x71\x7e\x69\x51\x72\xaa\x7b\x51\x7e\x69\x01\xa6\xd2\x20\x64\x69\x90\xfa\x9c\xfc\xe4\x44\x90\x37\x30\x95\xfa\x40\x65\x40\xaa\x00\x01\x00\x00\xff\xff\x69\xfe\xce\x7d\x37\x01\x00\x00")

func nodeEtcAzureAzureConfBytes() ([]byte, error) {
	return bindataRead(
		_nodeEtcAzureAzureConf,
		"node/etc/azure/azure.conf",
	)
}

func nodeEtcAzureAzureConf() (*asset, error) {
	bytes, err := nodeEtcAzureAzureConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node/etc/azure/azure.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeEtcOriginNodeNodeDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x2d\x2a\x4b\x2d\xb2\xd5\xcf\xcc\xd3\x4d\x4c\x49\x29\xd2\x4b\x2c\x2a\x48\xd4\x37\x34\x32\xd7\x33\xd0\x33\xd0\x33\xe4\x82\x49\x27\xe7\x94\x16\x97\xa4\x16\xe9\xe5\xe4\x27\x27\xe6\x20\xc9\x03\x02\x00\x00\xff\xff\x87\xc4\xbf\xc2\x3f\x00\x00\x00")

func nodeEtcOriginNodeNodeDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_nodeEtcOriginNodeNodeDnsmasqConf,
		"node/etc/origin/node/node-dnsmasq.conf",
	)
}

func nodeEtcOriginNodeNodeDnsmasqConf() (*asset, error) {
	bytes, err := nodeEtcOriginNodeNodeDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node/etc/origin/node/node-dnsmasq.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeEtcOriginNodeResolvConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4b\xcc\x4d\x2d\x4e\x2d\x2a\x4b\x2d\x52\x30\x34\xb3\xd0\x33\x33\xd6\x33\x34\xb2\xd4\x33\x34\xe3\x02\x04\x00\x00\xff\xff\x77\xaa\x94\x8c\x19\x00\x00\x00")

func nodeEtcOriginNodeResolvConfBytes() ([]byte, error) {
	return bindataRead(
		_nodeEtcOriginNodeResolvConf,
		"node/etc/origin/node/resolv.conf",
	)
}

func nodeEtcOriginNodeResolvConf() (*asset, error) {
	bytes, err := nodeEtcOriginNodeResolvConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node/etc/origin/node/resolv.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master/etc/etcd/etcd.conf":                           masterEtcEtcdEtcdConf,
	"master/etc/origin/master/htpasswd":                   masterEtcOriginMasterHtpasswd,
	"master/etc/origin/master/master-config.yaml":         masterEtcOriginMasterMasterConfigYaml,
	"master/etc/origin/master/scheduler.json":             masterEtcOriginMasterSchedulerJson,
	"master/etc/origin/master/session-secrets.yaml":       masterEtcOriginMasterSessionSecretsYaml,
	"master/tmp/ansible/ansible.sh":                       masterTmpAnsibleAnsibleSh,
	"master/tmp/ansible/azure-local-master-inventory.yml": masterTmpAnsibleAzureLocalMasterInventoryYml,
	"master/tmp/ansible/azure-ocp-deploy.yml":             masterTmpAnsibleAzureOcpDeployYml,
	"master/tmp/bootstrapconfigs/compute-config.yaml":     masterTmpBootstrapconfigsComputeConfigYaml,
	"master/tmp/bootstrapconfigs/infra-config.yaml":       masterTmpBootstrapconfigsInfraConfigYaml,
	"master/tmp/bootstrapconfigs/master-config.yaml":      masterTmpBootstrapconfigsMasterConfigYaml,
	"node/etc/azure/azure.conf":                           nodeEtcAzureAzureConf,
	"node/etc/origin/node/node-dnsmasq.conf":              nodeEtcOriginNodeNodeDnsmasqConf,
	"node/etc/origin/node/resolv.conf":                    nodeEtcOriginNodeResolvConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master": {nil, map[string]*bintree{
		"etc": {nil, map[string]*bintree{
			"etcd": {nil, map[string]*bintree{
				"etcd.conf": {masterEtcEtcdEtcdConf, map[string]*bintree{}},
			}},
			"origin": {nil, map[string]*bintree{
				"master": {nil, map[string]*bintree{
					"htpasswd":             {masterEtcOriginMasterHtpasswd, map[string]*bintree{}},
					"master-config.yaml":   {masterEtcOriginMasterMasterConfigYaml, map[string]*bintree{}},
					"scheduler.json":       {masterEtcOriginMasterSchedulerJson, map[string]*bintree{}},
					"session-secrets.yaml": {masterEtcOriginMasterSessionSecretsYaml, map[string]*bintree{}},
				}},
			}},
		}},
		"tmp": {nil, map[string]*bintree{
			"ansible": {nil, map[string]*bintree{
				"ansible.sh":                       {masterTmpAnsibleAnsibleSh, map[string]*bintree{}},
				"azure-local-master-inventory.yml": {masterTmpAnsibleAzureLocalMasterInventoryYml, map[string]*bintree{}},
				"azure-ocp-deploy.yml":             {masterTmpAnsibleAzureOcpDeployYml, map[string]*bintree{}},
			}},
			"bootstrapconfigs": {nil, map[string]*bintree{
				"compute-config.yaml": {masterTmpBootstrapconfigsComputeConfigYaml, map[string]*bintree{}},
				"infra-config.yaml":   {masterTmpBootstrapconfigsInfraConfigYaml, map[string]*bintree{}},
				"master-config.yaml":  {masterTmpBootstrapconfigsMasterConfigYaml, map[string]*bintree{}},
			}},
		}},
	}},
	"node": {nil, map[string]*bintree{
		"etc": {nil, map[string]*bintree{
			"azure": {nil, map[string]*bintree{
				"azure.conf": {nodeEtcAzureAzureConf, map[string]*bintree{}},
			}},
			"origin": {nil, map[string]*bintree{
				"node": {nil, map[string]*bintree{
					"node-dnsmasq.conf": {nodeEtcOriginNodeNodeDnsmasqConf, map[string]*bintree{}},
					"resolv.conf":       {nodeEtcOriginNodeResolvConf, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

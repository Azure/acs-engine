#!/usr/bin/python

from time import gmtime, strftime
import subprocess
import json

time = strftime("%Y-%m-%d %H:%M:%S", gmtime())

def getAllSizes():
    command = "az account list-locations"
    proc = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
    (locations, err) = proc.communicate()
    if err:
        raise Exception(err.message)
    
    sizeMap = {}
    locations = json.loads(locations)
    for location in locations:
        command = "az vm list-sizes -l %s" % (location['name'])
        proc = subprocess.Popen(command , shell=True, stdout=subprocess.PIPE)
        (sizes, err) = proc.communicate()
        if err:
            raise Exception(err.message)
        
        sizes = json.loads(sizes)
        for size in sizes:
            if not size['name'] in sizeMap and not size['name'].split('_')[0] == 'Basic':
                sizeMap[size['name']] = size

    return sizeMap        

min_cores = 2
dcos_masters_ephemeral_disk_min = 102400

def getDcosMasterMap(sizeMap):
    masterMap = {}

    for key in sizeMap.keys():
        size = sizeMap[key]
        if size['numberOfCores'] >= min_cores and \
           size['resourceDiskSizeInMb'] >= dcos_masters_ephemeral_disk_min:
            masterMap[size['name']] = size

    return masterMap    

def getMasterAgentMap(sizeMap):
    agentMap = {}
    
    for key in sizeMap.keys():
        size = sizeMap[key]
        if size['numberOfCores'] >= min_cores:
            agentMap[size['name']] = size
    
    return agentMap

def getLocations():
    proc = subprocess.Popen(['az account list-locations'], stdout=subprocess.PIPE, shell=True)
    (locations, err) = proc.communicate()
    if err:
        raise Exception(err.message)

    locations = json.loads(locations)
    locationList = []
    for location in locations:
        locationList.append(location['name'])

    #hard code Azure China Cloud location
    locationList.append('chinanorth')
    locationList.append('chinaeast')

    locationList = sorted(locationList)
    return locationList    

def getStorageAccountType(sizeName):
    capability = sizeName.split('_')[1]
    if 'S' in capability or 's' in capability:
        return "Premium_LRS"
    else:
        return "Standard_LRS"

def getFileContents(dcosMasterMap, masterAgentMap, kubernetesAgentMap, sizeMap, locations):
    text = 'package acsengine'
    text += '\n\nimport "fmt"'

    text += '\
\n\n\
// AUTOGENERATED FILE - last generated ' + time + '\n\n\
const (\n\
        // AzurePublicProdFQDNFormat specifies the format for a prod dns name \n\
        AzurePublicProdFQDNFormat = "%s.%s.cloudapp.azure.com"\n\
        //AzureChinaProdFQDNFormat specify the endpoint of Azure China Cloud\n\
        AzureChinaProdFQDNFormat = "%s.%s.cloudapp.chinacloudapi.cn"\n\
)\n\n'

    text += '// AzureLocations provides all azure regions in prod.\n\
// Related powershell to refresh this list:\n\
//   Get-AzureRmLocation | Select-Object -Property Location\n\
var AzureLocations = []string{\n'
    for location in locations:
        text += '  "' + location + '",' + '\n'

    text += '}\n'

    text += '\n'
    text += '// FormatAzureProdFQDNs constructs all possible Azure prod fqdn\n\
func FormatAzureProdFQDNs(fqdnPrefix string) []string {\n\
	var fqdns []string\n\
	for _, location := range AzureLocations {\n\
		fqdns = append(fqdns, FormatAzureProdFQDN(fqdnPrefix, location))\n\
	}\n\
	return fqdns\n\
}\n'

    text += '\n'
    text += '// FormatAzureProdFQDN constructs an Azure prod fqdn\n\
func FormatAzureProdFQDN(fqdnPrefix string, location string) string {\n\
	FQDNFormat := AzurePublicProdFQDNFormat\n\
	if location == "chinaeast" || location == "chinanorth" {\n\
		FQDNFormat = AzureChinaProdFQDNFormat\n\
	}\n\
	return fmt.Sprintf(FQDNFormat, fqdnPrefix, location)\n\
}\n'

    text += '\n\
// GetDCOSMasterAllowedSizes returns the master allowed sizes\n\
func GetDCOSMasterAllowedSizes() string {\n\
        return `      "allowedValues": [\n'

    dcosMasterMapKeys = sorted(dcosMasterMap.keys())
    for key in dcosMasterMapKeys[:-1]:
        text += '        "' + key + '",' + '\n'
    text += '        "' + dcosMasterMapKeys[-1] + '"' + '\n'

    text += '    ],\n'
    text += '`\n}'
    
    text += '\n\n\
// GetMasterAgentAllowedSizes returns the agent allowed sizes\n\
func GetMasterAgentAllowedSizes() string {\n\
        return `      "allowedValues": [\n'
   
    masterAgentMapKeys = sorted(masterAgentMap.keys())
    for key in masterAgentMapKeys[:-1]:
        text += '        "' + key + '",' + '\n'
    text += '        "' + masterAgentMapKeys[-1] + '"' + '\n'

    text += '    ],\n'
    text += '`\n}'    

    text += '\n\n\
// GetKubernetesAgentAllowedSizes returns the allowed sizes for Kubernetes agent\n\
func GetKubernetesAgentAllowedSizes() string {\n\
        return `      "allowedValues": [\n'
   
    kubernetesAgentMapKeys = sorted(kubernetesAgentMap.keys())
    for key in kubernetesAgentMapKeys[:-1]:
        text += '        "' + key + '",' + '\n'
    text += '        "' + kubernetesAgentMapKeys[-1] + '"' + '\n'

    text += '    ],\n'
    text += '`\n}'
    
    text += '\n\n\
// GetSizeMap returns the size / storage map\n\
func GetSizeMap() string{\n\
    return `    "vmSizesMap": {\n'
    
    mergedMap = {}
    for key in kubernetesAgentMapKeys:
        size = kubernetesAgentMap[key]
        if not key in mergedMap:
            mergedMap[size['name']] = size

    mergedMapKeys = sorted(mergedMap.keys())
    for key in mergedMapKeys[:-1]:
        size = mergedMap[key]
        text += '    "' + size['name'] + '": {\n'
        storageAccountType = getStorageAccountType(size['name'])
        text += '      "storageAccountType": "' + storageAccountType + '"\n    },\n'

    key = mergedMapKeys[-1]
    size = mergedMap[key]
    text += '    "' + size['name'] + '": {\n'
    storageAccountType = getStorageAccountType(size['name'])
    text += '      "storageAccountType": "' + storageAccountType + '"\n    }\n'

    text += '   }\n'
    text += '`\n}'   

    text += '\n\n\
// GetClassicAllowedSizes returns the classic allowed sizes\n\
func GetClassicAllowedSizes() string {\n\
        return `      "allowedValues": [\n'

    sizeMapKeys = sorted(sizeMap.keys())
    for key in sizeMapKeys[:-1]:
        text += '        "' + sizeMap[key]['name'] + '",' + '\n'
    key = sizeMapKeys[-1]
    text += '        "' + sizeMap[key]['name'] + '"' + '\n'

    text += '    ],\n'
    text += '`\n}'

    text += '\n\n\
// GetClassicSizeMap returns the size / storage map\n\
func GetClassicSizeMap() string {\n\
    return `    "vmSizesMap": {\n'

    sizeMapKeys = sorted(sizeMap.keys())
    for key in sizeMapKeys[:-1]:
        text += '        "' + sizeMap[key]['name'] + '": {' + '\n'
        storageAccountType = getStorageAccountType(size['name'])
        text += '      "storageAccountType": "' + storageAccountType + '"\n    },\n'
    key = sizeMapKeys[-1]
    text += '        "' + sizeMap[key]['name'] + '": {' + '\n'
    storageAccountType = getStorageAccountType(size['name'])
    text += '      "storageAccountType": "' + storageAccountType + '"\n    }\n'

    text += '   }\n'
    text += '`\n}'

    return text

def getSizeDef(sizeMap):
    keys = sizeMap.keys()
    print sizeMap[keys[0]]    


outfile = 'pkg/acsengine/azureconst.go'
allSizes = getAllSizes()
dcosMasterMap = getDcosMasterMap(allSizes) 
masterAgentMap = getMasterAgentMap(allSizes)
kubernetesAgentMap = allSizes
locations = getLocations()
text = getFileContents(dcosMasterMap, masterAgentMap, kubernetesAgentMap, allSizes, locations)
file = open(outfile, 'w')
file.write(text)
file.close()
command = "gofmt -w pkg/acsengine/azureconst.go"
proc = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)


<#
    .SYNOPSIS
        Autogenerates the allowed sizes for masters and agents and the
		associated storage map.

    .DESCRIPTION
        Autogenerates the allowed sizes for masters and agents and the
		associated storage map.

    .PARAMETER OutFile
        The name of the outputfile (Default is azureconst.go)

    .EXAMPLE
        .\Get-AzureConstants.ps1  -OutFile "azureconst.go"
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    $OutFile = "azureconst.go"
)

function
Get-AllSizes() {
	$locations = Get-AzureRmLocation | Select-Object -Property Location
	$sizeMap = @{}
	ForEach ($location in $locations) {
		#Write-Output $location.Location
		$sizes = Get-AzureRmVMSize -Location $location.Location
		ForEach ($size in $sizes) {
			if (!$sizeMap.ContainsKey($size.Name)) {
				$sizeMap.Add($size.Name, $size)
			}	
		}
		#break
	}
	return $sizeMap
}

#  1. Agents >= 2 cores
#  2. Masters >= 2 cores and ephemeral disk >= 100 GB
$MINIMUM_CORES = 2
$MASTERS_EPHEMERAL_DISK_MIN = 102400

function 
Get-MasterMap() {
	param(
        [System.Collections.Hashtable]
        $SizeMap
    )

	$masterMap = @{}
	ForEach ($k in ($SizeMap.Keys | Sort-Object)) {
		#Write-Output $location.Location
		$size = $SizeMap[$k]
		if ($size.NumberOfCores -ge $MINIMUM_CORES -and 
			$size.ResourceDiskSizeInMB -ge $MASTERS_EPHEMERAL_DISK_MIN) {
			$masterMap.Add($size.Name, $size)
		}	
	}
	return $masterMap
}

function 
Get-AgentMap() {
	param(
        [System.Collections.Hashtable]
        $SizeMap
    )

	$agentMap = @{}
	ForEach ($k in ($SizeMap.Keys | Sort-Object)) {
		#Write-Output $location.Location
		$size = $SizeMap[$k]
		if ($size.NumberOfCores -ge $MINIMUM_CORES) {
			$agentMap.Add($size.Name, $size)
		}	
	}
	return $agentMap
}

function
Get-Locations() {
	$locations = Get-AzureRmLocation | Select-Object -Property Location
	$locationList = @()
	ForEach ($location in $locations) {
		$locationList += $location.Location
	}
	return $locationList
}

function
Get-FileContents() {
	param(
		[System.Collections.Hashtable]
        $MasterMap,
		[System.Collections.Hashtable]
        $AgentMap,
		[System.Collections.ArrayList]
        $Locations
    )
	
	$text = "package acsengine"
	$text += @"


import "fmt"

// AUTOGENERATED FILE - last generated $(Get-Date -format 'u')

const (
	// AzureProdFQDNFormat specifies the format for a prod dns name
	AzureProdFQDNFormat = "%s.%s.cloudapp.azure.com"
)

// AzureLocations provides all azure regions in prod.
// Related powershell to refresh this list:
//   Get-AzureRmLocation | Select-Object -Property Location
var AzureLocations = []string{

"@
	ForEach ($location in ($Locations | Sort-Object)) {
		$text += '	"' + $location + '"' + ",`r`n"
	}
	$text += @"
}

// FormatAzureProdFQDNs constructs all possible Azure prod fqdn
func FormatAzureProdFQDNs(fqdnPrefix string) []string {
	var fqdns []string
	for _, location := range AzureLocations {
		fqdns = append(fqdns, FormatAzureProdFQDN(fqdnPrefix, location))
	}
	return fqdns
}

// FormatAzureProdFQDN constructs an Azure prod fqdn
func FormatAzureProdFQDN(fqdnPrefix string, location string) string {
	return fmt.Sprintf(AzureProdFQDNFormat, fqdnPrefix, location)
}

// GetMasterAllowedSizes returns the master allowed sizes
func GetMasterAllowedSizes() string{
    return ``      "allowedValues": [

"@
    $first = $TRUE
	ForEach ($k in ($MasterMap.Keys | Sort-Object)) {
		if ($first -eq $TRUE) 
		{
			$first = $FALSE
		}
		else
		{
			$text += ",`r`n"
		}
		$text += '        "' + $MasterMap.Item($k).Name + '"'
	}
	$text += @"

     ],
``
}

// GetAgentAllowedSizes returns the agent allowed sizes
func GetAgentAllowedSizes() string {
    return ``      "allowedValues": [

"@
	$first = $TRUE
	ForEach ($k in ($AgentMap.Keys | Sort-Object)) {
		if ($first -eq $TRUE) 
		{
			$first = $FALSE
		}
		else
		{
			$text += ",`r`n"
		}
		$text += '        "' + $AgentMap.Item($k).Name + '"'
	}
	$text += @"

     ],
``
}

// GetSizeMap returns the size / storage map
func GetSizeMap() string{
    return ``    "vmSizesMap": {

"@

	# merge the maps
	$mergedMap = @{}
	ForEach ($k in $AgentMap.Keys) {
		$size = $AgentMap.Item($k)
		if (!$mergedMap.ContainsKey($k)) {
			$mergedMap.Add($size.Name, $size)
		}
	}
	ForEach ($k in $MasterMap.Keys) {
		$size = $MasterMap.Item($k)
		if (!$mergedMap.ContainsKey($k)) {
			$mergedMap.Add($size.Name, $size)
		}
	}

	$first = $TRUE
	ForEach ($k in ($mergedMap.Keys | Sort-Object)) {
		$size = $mergedMap.Item($k)
		if ($first -eq $TRUE) 
		{
			$first = $FALSE
		}
		else
		{
			$text += ",`r`n"
		}
		$text += '      "' + $size.Name + '": {' + "`r`n"
		if ($size.Name.Contains("GS") -Or $size.Name.Contains("DS")) {
			$text += '        "storageAccountType": "Premium_LRS"' + "`r`n"
		}
		else
		{
			$text += '        "storageAccountType": "Standard_LRS"' + "`r`n"
		}
		$text += '      }'
	}
	$text += @"

    }	
``
}
"@
	return $text
}

try
{
	$allSizes = Get-AllSizes
	$masterMap = Get-MasterMap -SizeMap $allSizes
	$agentMap = Get-AgentMap -SizeMap $allSizes
	$locations = Get-Locations
	$text = Get-FileContents -MasterMap $masterMap -AgentMap $agentMap -Locations $locations
	$text | Out-File $OutFile
	(Get-Content $OutFile) -replace "`0", "" | Set-Content $OutFile
}
catch
{
	Write-Error $_
}




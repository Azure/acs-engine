{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "agentCount": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 3,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentEndpointDNSNamePrefix": {
      "defaultValue": "UNUSED",
      "metadata": {
        "description": "Sets the Domain name label for the agent pool IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      },
      "type": "string"
    },
    "agentSubnet": {
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Sets the subnet of agent pool 'agent'."
      },
      "type": "string"
    },
    "agentVMSize": {
      "allowedValues": [
        "Basic_A0",
        "Basic_A1",
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A0",
        "Standard_A1",
        "Standard_A1_v2",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D1",
        "Standard_D1_v2",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS1",
        "Standard_DS1_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F1",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F1s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "disablePasswordAuthentication": {
      "defaultValue": true,
      "metadata": {
        "description": "This setting controls whether password auth is disabled for Linux VMs provisioned by this template. Default is true which disables password and makes SSH key required."
      },
      "type": "bool"
    },
    "enableNewStorageAccountNaming": {
      "defaultValue": true,
      "metadata": {
        "description": "If true: uses DNS name prefix + Orchestrator name + Region to create storage account name to reduce name collision probability. If false: uses DNS name prefix + Orchestrator name to create storage account name to maintain template idempotency."
      },
      "type": "bool"
    },
    "enableVMDiagnostics": {
      "defaultValue": true,
      "metadata": {
        "description": "Allows user to enable/disable boot & vm diagnostics."
      },
      "type": "bool"
    },
    "firstConsecutiveStaticIP": {
      "defaultValue": "192.168.255.5",
      "metadata": {
        "description": "Sets the static IP of the first master"
      },
      "type": "string"
    },
    "isValidation": {
      "allowedValues": [
        0,
        1
      ],
      "defaultValue": 0,
      "metadata": {
        "description": "This is testing in the validation region"
      },
      "type": "int"
    },
    "jumpboxEndpointDNSNamePrefix": {
      "defaultValue": "UNUSED",
      "metadata": {
        "description": "Sets the Domain name label for the jumpbox.  The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address."
      },
      "type": "string"
    },
    "linuxAdminPassword": {
      "defaultValue": "UNUSED",
      "metadata": {
        "description": "Password for the Linux Virtual Machine.  Not Required.  If not set, you must provide a SSH key."
      },
      "type": "securestring"
    },
    "linuxAdminUsername": {
      "metadata": {
        "description": "User name for the Linux Virtual Machines (SSH or Password)."
      },
      "type": "string"
    },
    "linuxOffer": {
      "defaultValue": "UNUSED",
      "metadata": {
        "description": "This is the offer of the image used by the linux cluster"
      },
      "type": "string"
    },
    "linuxPublisher": {
      "defaultValue": "UNUSED",
      "metadata": {
        "description": "This is the publisher of the image used by the linux cluster"
      },
      "type": "string"
    },
    "linuxSku": {
      "defaultValue": "UNUSED",
      "metadata": {
        "description": "This is the linux sku used by the linux cluster"
      },
      "type": "string"
    },
    "linuxVersion": {
      "defaultValue": "UNUSED",
      "metadata": {
        "description": "This is the linux version used by the linux cluster"
      },
      "type": "string"
    },
    "masterCount": {
      "allowedValues": [
        1,
        3,
        5
      ],
      "defaultValue": 1,
      "metadata": {
        "description": "The number of Mesos masters for the cluster."
      },
      "type": "int"
    },
    "masterEndpointDNSNamePrefix": {
      "metadata": {
        "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      },
      "type": "string"
    },
    "masterSubnet": {
      "defaultValue": "192.168.255.0/24",
      "metadata": {
        "description": "Sets the subnet of the master node(s)."
      },
      "type": "string"
    },
    "masterVMSize": {
      "allowedValues": [
        "Basic_A0",
        "Basic_A1",
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A0",
        "Standard_A1",
        "Standard_A1_v2",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D1",
        "Standard_D1_v2",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS1",
        "Standard_DS1_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F1",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F1s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "nameSuffix": {
      "defaultValue": "32758952",
      "metadata": {
        "description": "A string hash of the master DNS name to uniquely identify the cluster."
      },
      "type": "string"
    },
    "oauthEnabled": {
      "allowedValues": [
        "true",
        "false"
      ],
      "defaultValue": "false",
      "metadata": {
        "description": "Enable OAuth authentication"
      },
      "type": "string"
    },
    "postInstallScriptURI": {
      "defaultValue": "disabled",
      "metadata": {
        "description": "After installation, this specifies a script to download and install.  To disabled, set value to 'disabled'."
      },
      "type": "string"
    },
    "setLinuxConfigurationForVMCreate": {
      "allowedValues": [
        0,
        1
      ],
      "defaultValue": 1,
      "metadata": {
        "description": "This setting controls whether Linux configuration with SSH Key is passed in VM PUT Payload.  Defaults to 1.  If SSH Key is blank, this must be set to 0."
      },
      "type": "int"
    },
    "sshRSAPublicKey": {
      "metadata": {
        "description": "SSH public key used for auth to all Linux machines.  Not Required.  If not set, you must provide a password key."
      },
      "type": "string"
    },
    "targetEnvironment": {
      "defaultValue": "AzureCloud",
      "metadata": {
        "description": "The azure deploy environment. Currently support: AzureCloud, AzureChinaCloud"
      },
      "type": "string"
    },
    "vmsPerStorageAccount": {
      "defaultValue": 5,
      "metadata": {
        "description": "This specifies the number of VMs per storage accounts"
      },
      "type": "int"
    },
    "windowsAdminPassword": {
      "metadata": {
        "description": "Password for the Windows Swarm Agent Virtual Machines."
      },
      "type": "securestring"
    },
    "windowsAdminUsername": {
      "metadata": {
        "description": "User name for the Windows Swarm Agent Virtual Machines (Password Only Supported)."
      },
      "type": "string"
    },
    "windowsJumpboxOffer": {
      "defaultValue": "UNUSED",
      "metadata": {
        "description": "This is the windows offer used by the windows"
      },
      "type": "string"
    },
    "windowsJumpboxPublisher": {
      "defaultValue": "UNUSED",
      "metadata": {
        "description": "This is the windows publisher used by the windows"
      },
      "type": "string"
    },
    "windowsJumpboxSku": {
      "defaultValue": "UNUSED",
      "metadata": {
        "description": "This is the windows sku used by the windows"
      },
      "type": "string"
    }
  },
  "variables": {
    "adminUsername": "[parameters('linuxAdminUsername')]",
    "agentAccountName": "[concat(variables('storageAccountBaseName'), 'agnt0')]",
    "agentCount": "[parameters('agentCount')]",
    "agentCustomScript": "[concat('/usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/',variables('configureClusterScriptFile'), ' ',variables('clusterInstallParameters'),' >> /var/log/azure/cluster-bootstrap.log 2>&1 &\" &')]",
    "agentEndpointDNSNamePrefix": "[tolower(parameters('agentEndpointDNSNamePrefix'))]",
    "agentIPAddressName": "[concat(variables('orchestratorName'), '-agent-ip-', variables('agentEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
    "agentIndex": 0,
    "agentLbBackendPoolName": "[concat(variables('orchestratorName'), '-agent-', variables('nameSuffix'))]",
    "agentLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('agentLbName'))]",
    "agentLbIPConfigID": "[concat(variables('agentLbID'),'/frontendIPConfigurations/', variables('agentLbIPConfigName'))]",
    "agentLbIPConfigName": "[concat(variables('orchestratorName'), '-agent-', variables('nameSuffix'))]",
    "agentLbName": "[concat(variables('orchestratorName'), '-agent-', variables('nameSuffix'))]",
    "agentMaxVMs": 100,
    "agentRunCmd": "[concat('runcmd:\n -  [ /bin/bash, /opt/azure/containers/install-cluster.sh ]\n\n')]",
    "agentRunCmdFile": "[concat(' -  content: |\n        #!/bin/bash\n        ','sudo mkdir -p /var/log/azure\n        ',variables('agentCustomScript'),'\n    path: /opt/azure/containers/install-cluster.sh\n    permissions: \"0744\"\n')]",
    "agentStorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),0)]",
    "agentStorageAccountsCount": "[variables('maxStorageAccountsPerAgent')]",
    "agentSubnet": "[parameters('agentSubnet')]",
    "agentSubnetName": "[concat(variables('orchestratorName'), '-agentsubnet')]",
    "agentVMNamePrefix": "[concat(variables('orchestratorName'), '-agent-', variables('nameSuffix'))]",
    "agentVMSize": "[parameters('agentVMSize')]",
    "agentVnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('agentSubnetName'))]",
    "agentWindowsBackendPort": 3389,
    "agentWindowsOffer": "WindowsServer",
    "agentWindowsPublisher": "MicrosoftWindowsServer",
    "agentWindowsRDPEndRangeStop": "[add(variables('agentWindowsRDPNatRangeStart'), add(variables('agentCount'),variables('agentCount')))]",
    "agentWindowsRDPNatRangeStart": 3389,
    "agentWindowsSku": "2016-Datacenter-with-Containers",
    "agentWindowsVersion": "latest",
    "apiVersionDefault": "2016-03-30",
    "apiVersionStorage": "2015-06-15",
    "clusterInstallParameters": "[concat(variables('masterCount'), ' ',variables('masterVMNamePrefix'), ' ',variables('masterFirstAddrOctet4'), ' ',variables('adminUsername'),' ',variables('postInstallScriptURI'),' ',variables('masterFirstAddrPrefix'))]",
    "configureClusterScriptFile": "configure-swarmmode-cluster.sh",
    "dataStorageAccountPrefixSeed": 97,
    "masterAvailabilitySet": "[concat(variables('orchestratorName'), '-master-availabilitySet-', variables('nameSuffix'))]",
    "masterCount": "[parameters('masterCount')]",
    "masterCustomScript": "[concat('/bin/bash -c \"/bin/bash /opt/azure/containers/',variables('configureClusterScriptFile'), ' ',variables('clusterInstallParameters'),' >> /var/log/azure/cluster-bootstrap.log 2>&1\"')]",
    "masterEndpointDNSNamePrefix": "[tolower(parameters('masterEndpointDNSNamePrefix'))]",
    "masterFirstAddrOctet4": "[variables('masterFirstAddrOctets')[3]]",
    "masterFirstAddrOctets": "[split(parameters('firstConsecutiveStaticIP'),'.')]",
    "masterFirstAddrPrefix": "[concat(variables('masterFirstAddrOctets')[0],'.',variables('masterFirstAddrOctets')[1],'.',variables('masterFirstAddrOctets')[2],'.')]",
    "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
    "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
    "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
    "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
    "masterLbInboundNatRules": [
      [
        {
          "id": "[concat(variables('masterSshInboundNatRuleIdPrefix'),'0')]"
        },
        {
          "id": "[concat(variables('masterSshPort22InboundNatRuleIdPrefix'),'0')]"
        }
      ],
      [
        {
          "id": "[concat(variables('masterSshInboundNatRuleIdPrefix'),'1')]"
        }
      ],
      [
        {
          "id": "[concat(variables('masterSshInboundNatRuleIdPrefix'),'2')]"
        }
      ],
      [
        {
          "id": "[concat(variables('masterSshInboundNatRuleIdPrefix'),'3')]"
        }
      ],
      [
        {
          "id": "[concat(variables('masterSshInboundNatRuleIdPrefix'),'4')]"
        }
      ]
    ],
    "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
    "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
    "masterSshInboundNatRuleIdPrefix": "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'))]",
    "masterSshPort22InboundNatRuleIdPrefix": "[concat(variables('masterLbID'),'/inboundNatRules/SSHPort22-',variables('masterVMNamePrefix'))]",
    "masterSshPort22InboundNatRuleNamePrefix": "[concat(variables('masterLbName'),'/SSHPort22-',variables('masterVMNamePrefix'))]",
    "masterStorageAccountName": "[concat(variables('storageAccountBaseName'), '0')]",
    "masterSubnet": "[parameters('masterSubnet')]",
    "masterSubnetName": "[concat(variables('orchestratorName'), '-masterSubnet')]",
    "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
    "masterVMSize": "[parameters('masterVMSize')]",
    "masterVnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('masterSubnetName'))]",
    "maxStorageAccountsPerAgent": "[div(variables('maxVMsPerPool'),variables('maxVMsPerStorageAccount'))]",
    "maxVMsPerPool": 100,
    "maxVMsPerStorageAccount": 20,
    "nameSuffix": "[parameters('nameSuffix')]",
    "orchestratorName": "swarmm",
    "osImageOffer": "UbuntuServer",
    "osImagePublisher": "Canonical",
    "osImageSKU": "16.04.0-LTS",
    "osImageVersion": "latest",
    "postInstallScriptURI": "disabled",
    "singleQuote": "'",
    "sshKeyPath": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]",
    "sshRSAPublicKey": "[parameters('sshRSAPublicKey')]",
    "storageAccountBaseName": "[uniqueString(concat(variables('masterEndpointDNSNamePrefix'),resourceGroup().location))]",
    "storageAccountPrefixes": [
      "0",
      "6",
      "c",
      "i",
      "o",
      "u",
      "1",
      "7",
      "d",
      "j",
      "p",
      "v",
      "2",
      "8",
      "e",
      "k",
      "q",
      "w",
      "3",
      "9",
      "f",
      "l",
      "r",
      "x",
      "4",
      "a",
      "g",
      "m",
      "s",
      "y",
      "5",
      "b",
      "h",
      "n",
      "t",
      "z"
    ],
    "storageAccountPrefixesCount": "[length(variables('storageAccountPrefixes'))]",
    "virtualNetworkName": "[concat(variables('orchestratorName'), '-vnet-', variables('nameSuffix'))]",
    "vmSizesMap": {
      "Basic_A0": {
        "storageAccountType": "Standard_LRS"
      },
      "Basic_A1": {
        "storageAccountType": "Standard_LRS"
      },
      "Basic_A2": {
        "storageAccountType": "Standard_LRS"
      },
      "Basic_A3": {
        "storageAccountType": "Standard_LRS"
      },
      "Basic_A4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A0": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A10": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A1_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A7": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A9": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D15_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D1_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D5_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_DS1": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS15_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS1_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS5_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F16": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F16s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F1s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F2s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F4s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F8s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_G1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_GS1": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS5": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_H16": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16m": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16mr": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16r": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H8m": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC24": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC24r": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV24": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV6": {
        "storageAccountType": "Standard_LRS"
      }
    },
    "vmsPerStorageAccount": 20,
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "windowsAdminPassword": "[parameters('windowsAdminPassword')]",
    "windowsAdminUsername": "[parameters('windowsAdminUsername')]",
    "windowsCustomScript": "[concat('powershell.exe -ExecutionPolicy Unrestricted -command \"', variables('windowsCustomScriptArguments'), variables('windowsCustomScriptSuffix'), '\" > %SYSTEMDRIVE%\\AzureData\\CustomDataSetupScript.log 2>&1')]",
    "windowsCustomScriptArguments": "[concat('$arguments = ', variables('singleQuote'),'-SwarmMasterIP ', variables('masterFirstAddrPrefix'), variables('masterFirstAddrOctet4'), variables('singleQuote'), ' ; ')]",
    "windowsCustomScriptSuffix": " $inputFile = '%SYSTEMDRIVE%\\AzureData\\CustomData.bin' ; $outputFile = '%SYSTEMDRIVE%\\AzureData\\CustomDataSetupScript.ps1' ; $inputStream = New-Object System.IO.FileStream $inputFile, ([IO.FileMode]::Open), ([IO.FileAccess]::Read), ([IO.FileShare]::Read) ; $sr = New-Object System.IO.StreamReader(New-Object System.IO.Compression.GZipStream($inputStream, [System.IO.Compression.CompressionMode]::Decompress)) ; $sr.ReadToEnd() | Out-File($outputFile) ; Invoke-Expression('{0} {1}' -f $outputFile, $arguments) ; "
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentStorageAccountsCount')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentVMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('agentIPAddressName')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('agentEndpointDNSNamePrefix')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('agentIPAddressName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[variables('agentLbName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('agentLbBackendPoolName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('agentLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('agentIPAddressName'))]"
              }
            }
          }
        ],
        "inboundNatPools": [
          {
            "name": "[concat('RDP-', variables('agentVMNamePrefix'))]",
            "properties": {
              "backendPort": "[variables('agentWindowsBackendPort')]",
              "frontendIPConfiguration": {
                "id": "[variables('agentLbIPConfigID')]"
              },
              "frontendPortRangeEnd": "[variables('agentWindowsRDPEndRangeStop')]",
              "frontendPortRangeStart": "[variables('agentWindowsRDPNatRangeStart')]",
              "protocol": "tcp"
            }
          }
        ],
        "inboundNatRules": [],
        "loadBalancingRules": [
          {
            "name": "LBRule80",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('agentLbID'), '/backendAddressPools/', variables('agentLbBackendPoolName'))]"
              },
              "backendPort": 80,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('agentLbIPConfigID')]"
              },
              "frontendPort": 80,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentLbID'),'/probes/tcp80Probe')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "LBRule443",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('agentLbID'), '/backendAddressPools/', variables('agentLbBackendPoolName'))]"
              },
              "backendPort": 443,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('agentLbIPConfigID')]"
              },
              "frontendPort": 443,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentLbID'),'/probes/tcp443Probe')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "LBRule8080",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('agentLbID'), '/backendAddressPools/', variables('agentLbBackendPoolName'))]"
              },
              "backendPort": 8080,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('agentLbIPConfigID')]"
              },
              "frontendPort": 8080,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentLbID'),'/probes/tcp8080Probe')]"
              },
              "protocol": "tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "tcp80Probe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 80,
              "protocol": "tcp"
            }
          },
          {
            "name": "tcp443Probe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 443,
              "protocol": "tcp"
            }
          },
          {
            "name": "tcp8080Probe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 8080,
              "protocol": "tcp"
            }
          }
        ]
      },
      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(0,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(1,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(2,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(3,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(4,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName'))]",
        "[variables('vnetID')]",
        "[variables('agentLbID')]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('agentVMNamePrefix'), '-vmss')]",
      "properties": {
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "virtualMachineProfile": {
          "extensionProfile": {
            "extensions": [
              {
                "name": "vmssCustomScriptExtension",
                "properties": {
                  "autoUpgradeMinorVersion": true,
                  "publisher": "Microsoft.Compute",
                  "settings": {
                    "commandToExecute": "[variables('windowsCustomScript')]"
                  },
                  "type": "CustomScriptExtension",
                  "typeHandlerVersion": "1.8"
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "nic",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "properties": {
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat(variables('agentLbID'), '/backendAddressPools/', variables('agentLbBackendPoolName'))]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[concat(variables('agentLbID'), '/inboundNatPools/', 'RDP-', variables('agentVMNamePrefix'))]"
                          }
                        ],
                        "subnet": {
                          "id": "[variables('agentVnetSubnetID')]"
                        }
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "osProfile": {
            "adminPassword": "[variables('windowsAdminPassword')]",
            "adminUsername": "[variables('windowsAdminUsername')]",
            "computerNamePrefix": "[concat(substring(variables('nameSuffix'), 0, 5), 'acs')]",
            "customData": "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"
          },
          "storageProfile": {
            "imageReference": {
              "offer": "[variables('agentWindowsOffer')]",
              "publisher": "[variables('agentWindowsPublisher')]",
              "sku": "[variables('agentWindowsSku')]",
              "version": "latest"
            },
            "osDisk": {
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "name": "vmssosdisk",
              "vhdContainers": [
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName')), variables('apiVersionStorage') ).primaryEndpoints.blob, 'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob, 'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob, 'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob, 'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob, 'osdisk')]"
              ]
            }
          }
        }
      },
      "sku": {
        "capacity": "[variables('agentCount')]",
        "name": "[variables('agentVMSize')]",
        "tier": "Standard"
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('agentVMNamePrefix'), '-vmss')]"
      },
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[variables('masterStorageAccountName')]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('masterVMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('virtualNetworkName')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('masterSubnet')]",
            "[variables('agentSubnet')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('masterSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('masterSubnet')]"
            }
          },
          {
            "name": "[variables('agentSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('agentSubnet')]"
            }
          }
        ]
      },
      "type": "Microsoft.Network/virtualNetworks"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('masterAvailabilitySet')]",
      "properties": {},
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('masterPublicIPAddressName')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('masterEndpointDNSNamePrefix')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[variables('masterLbName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('masterLbBackendPoolName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('masterLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "masterLbLoopNode"
      },
      "dependsOn": [
        "[variables('masterLbID')]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('masterLbName'), '/', 'SSH-', variables('masterVMNamePrefix'), copyIndex())]",
      "properties": {
        "backendPort": 22,
        "enableFloatingIP": false,
        "frontendIPConfiguration": {
          "id": "[variables('masterLbIPConfigID')]"
        },
        "frontendPort": "[copyIndex(2200)]",
        "protocol": "tcp"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[variables('masterLbID')]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('masterSshPort22InboundNatRuleNamePrefix'), '0')]",
      "properties": {
        "backendPort": 2222,
        "enableFloatingIP": false,
        "frontendIPConfiguration": {
          "id": "[variables('masterLbIPConfigID')]"
        },
        "frontendPort": "22",
        "protocol": "tcp"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "nicLoopNode"
      },
      "dependsOn": [
        "[variables('vnetID')]",
        "[variables('masterLbID')]",
        "[concat(variables('masterSshPort22InboundNatRuleIdPrefix'),'0')]",
        "[concat(variables('masterSshInboundNatRuleIdPrefix'),copyIndex())]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipConfigNode",
            "properties": {
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                }
              ],
              "loadBalancerInboundNatRules": "[variables('masterLbInboundNatRules')[copyIndex()]]",
              "privateIPAddress": "[concat(variables('masterFirstAddrPrefix'), copyIndex(int(variables('masterFirstAddrOctet4'))))]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('masterVnetSubnetID')]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/',variables('masterAvailabilitySet'))]",
        "[variables('masterStorageAccountName')]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('masterAvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('masterVMSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'), 'nic-', copyIndex()))]"
            }
          ]
        },
        "osProfile": {
          "adminUsername": "[variables('adminUsername')]",
          "computername": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
          "customData": "[base64('#cloud-config\n\nwrite_files:\n -  encoding: gzip\n    content: !!binary |\n        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\n    path: /opt/azure/containers/configure-swarmmode-cluster.sh\n    permissions: \"0744\"\n\n')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "keyData": "[variables('sshRSAPublicKey')]",
                  "path": "[variables('sshKeyPath')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('osImageOffer')]",
            "publisher": "[variables('osImagePublisher')]",
            "sku": "[variables('osImageSKU')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'-osdisk')]",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('masterStorageAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob, 'vhds/', variables('masterVMNamePrefix'), copyIndex(), '-osdisk.vhd')]"
            }
          }
        }
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('masterVMNamePrefix'), copyIndex())]"
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', concat(variables('masterVMNamePrefix'), copyIndex()))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex(), '/configuremaster')]",
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "settings": {
          "commandToExecute": "[variables('masterCustomScript')]",
          "fileUris": []
        },
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.4"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    }
  ],
  "outputs": {
    "agentFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('agentIPAddressName'))).dnsSettings.fqdn]"
    },
    "diagnosticsStorageAccountUri": {
      "type": "string",
      "value": ""
    },
    "jumpboxFQDN": {
      "type": "string",
      "value": ""
    },
    "masterFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))).dnsSettings.fqdn]"
    }
  }
}
{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "agentCount": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 3,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentEndpointDNSNamePrefix": {
      "defaultValue": "UNUSED",
      "metadata": {
        "description": "Sets the Domain name label for the agent pool IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      },
      "type": "string"
    },
    "agentSubnet": {
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Sets the subnet of agent pool 'agent'."
      },
      "type": "string"
    },
    "agentVMSize": {
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A1_v2",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D1",
        "Standard_D1_v2",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D11_v2_Promo",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D12_v2_Promo",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D13_v2_Promo",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D14_v2_Promo",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D2_v2_Promo",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D3_v2_Promo",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D4_v2_Promo",
        "Standard_D5_v2",
        "Standard_D5_v2_Promo",
        "Standard_DS1",
        "Standard_DS1_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS11_v2_Promo",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS12_v2_Promo",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS13_v2_Promo",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS14_v2_Promo",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS2_v2_Promo",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS3_v2_Promo",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS4_v2_Promo",
        "Standard_DS5_v2",
        "Standard_DS5_v2_Promo",
        "Standard_F1",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F1s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_L16s",
        "Standard_L32s",
        "Standard_L4s",
        "Standard_L8s",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "disablePasswordAuthentication": {
      "defaultValue": true,
      "metadata": {
        "description": "This setting controls whether password auth is disabled for Linux VMs provisioned by this template. Default is true which disables password and makes SSH key required."
      },
      "type": "bool"
    },
    "enableNewStorageAccountNaming": {
      "defaultValue": true,
      "metadata": {
        "description": "If true: uses DNS name prefix + Orchestrator name + Region to create storage account name to reduce name collision probability. If false: uses DNS name prefix + Orchestrator name to create storage account name to maintain template idempotency."
      },
      "type": "bool"
    },
    "enableVMDiagnostics": {
      "defaultValue": true,
      "metadata": {
        "description": "Allows user to enable/disable boot & vm diagnostics."
      },
      "type": "bool"
    },
    "firstConsecutiveStaticIP": {
      "defaultValue": "192.168.255.5",
      "metadata": {
        "description": "Sets the static IP of the first master"
      },
      "type": "string"
    },
    "isValidation": {
      "allowedValues": [
        0,
        1
      ],
      "defaultValue": 0,
      "metadata": {
        "description": "This is testing in the validation region"
      },
      "type": "int"
    },
    "jumpboxEndpointDNSNamePrefix": {
      "defaultValue": "UNUSED",
      "metadata": {
        "description": "Sets the Domain name label for the jumpbox.  The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address."
      },
      "type": "string"
    },
    "linuxAdminPassword": {
      "defaultValue": "UNUSED",
      "metadata": {
        "description": "Password for the Linux Virtual Machine.  Not Required.  If not set, you must provide a SSH key."
      },
      "type": "securestring"
    },
    "linuxAdminUsername": {
      "metadata": {
        "description": "User name for the Linux Virtual Machines (SSH or Password)."
      },
      "type": "string"
    },
    "linuxOffer": {
      "defaultValue": "UNUSED",
      "metadata": {
        "description": "This is the offer of the image used by the linux cluster"
      },
      "type": "string"
    },
    "linuxPublisher": {
      "defaultValue": "UNUSED",
      "metadata": {
        "description": "This is the publisher of the image used by the linux cluster"
      },
      "type": "string"
    },
    "linuxSku": {
      "defaultValue": "UNUSED",
      "metadata": {
        "description": "This is the linux sku used by the linux cluster"
      },
      "type": "string"
    },
    "linuxVersion": {
      "defaultValue": "UNUSED",
      "metadata": {
        "description": "This is the linux version used by the linux cluster"
      },
      "type": "string"
    },
    "location": {
      "defaultValue": "",
      "metadata": {
        "description": "Sets the location for all resources in the cluster"
      },
      "type": "string"
    },
    "masterCount": {
      "allowedValues": [
        1,
        3,
        5
      ],
      "defaultValue": 1,
      "metadata": {
        "description": "The number of Mesos masters for the cluster."
      },
      "type": "int"
    },
    "masterEndpointDNSNamePrefix": {
      "metadata": {
        "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      },
      "type": "string"
    },
    "masterSubnet": {
      "defaultValue": "192.168.255.0/24",
      "metadata": {
        "description": "Sets the subnet of the master node(s)."
      },
      "type": "string"
    },
    "masterVMSize": {
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A1_v2",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D1",
        "Standard_D1_v2",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D11_v2_Promo",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D12_v2_Promo",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D13_v2_Promo",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D14_v2_Promo",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D2_v2_Promo",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D3_v2_Promo",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D4_v2_Promo",
        "Standard_D5_v2",
        "Standard_D5_v2_Promo",
        "Standard_DS1",
        "Standard_DS1_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS11_v2_Promo",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS12_v2_Promo",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS13_v2_Promo",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS14_v2_Promo",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS2_v2_Promo",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS3_v2_Promo",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS4_v2_Promo",
        "Standard_DS5_v2",
        "Standard_DS5_v2_Promo",
        "Standard_F1",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F1s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_L16s",
        "Standard_L32s",
        "Standard_L4s",
        "Standard_L8s",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "nameSuffix": {
      "defaultValue": "32758952",
      "metadata": {
        "description": "A string hash of the master DNS name to uniquely identify the cluster."
      },
      "type": "string"
    },
    "oauthEnabled": {
      "allowedValues": [
        "true",
        "false"
      ],
      "defaultValue": "false",
      "metadata": {
        "description": "Enable OAuth authentication"
      },
      "type": "string"
    },
    "postInstallScriptURI": {
      "defaultValue": "disabled",
      "metadata": {
        "description": "After installation, this specifies a script to download and install.  To disabled, set value to 'disabled'."
      },
      "type": "string"
    },
    "setLinuxConfigurationForVMCreate": {
      "allowedValues": [
        0,
        1
      ],
      "defaultValue": 1,
      "metadata": {
        "description": "This setting controls whether Linux configuration with SSH Key is passed in VM PUT Payload.  Defaults to 1.  If SSH Key is blank, this must be set to 0."
      },
      "type": "int"
    },
    "sshRSAPublicKey": {
      "metadata": {
        "description": "SSH public key used for auth to all Linux machines.  Not Required.  If not set, you must provide a password key."
      },
      "type": "string"
    },
    "targetEnvironment": {
      "defaultValue": "AzureCloud",
      "metadata": {
        "description": "The azure deploy environment. Currently support: AzureCloud, AzureChinaCloud"
      },
      "type": "string"
    },
    "vmsPerStorageAccount": {
      "defaultValue": 5,
      "metadata": {
        "description": "This specifies the number of VMs per storage accounts"
      },
      "type": "int"
    },
    "windowsAdminPassword": {
      "metadata": {
        "description": "Password for the Windows Swarm Agent Virtual Machines."
      },
      "type": "securestring"
    },
    "windowsAdminUsername": {
      "metadata": {
        "description": "User name for the Windows Swarm Agent Virtual Machines (Password Only Supported)."
      },
      "type": "string"
    },
    "windowsJumpboxOffer": {
      "defaultValue": "UNUSED",
      "metadata": {
        "description": "This is the windows offer used by the windows"
      },
      "type": "string"
    },
    "windowsJumpboxPublisher": {
      "defaultValue": "UNUSED",
      "metadata": {
        "description": "This is the windows publisher used by the windows"
      },
      "type": "string"
    },
    "windowsJumpboxSku": {
      "defaultValue": "UNUSED",
      "metadata": {
        "description": "This is the windows sku used by the windows"
      },
      "type": "string"
    }
  },
  "variables": {
    "adminUsername": "[parameters('linuxAdminUsername')]",
    "agentAccountName": "[concat(variables('storageAccountBaseName'), 'agnt0')]",
    "agentCount": "[parameters('agentCount')]",
    "agentCustomScript": "[concat('/usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/',variables('configureClusterScriptFile'), ' ',variables('clusterInstallParameters'),' >> /var/log/azure/cluster-bootstrap.log 2>&1 &\" &')]",
    "agentEndpointDNSNamePrefix": "[tolower(parameters('agentEndpointDNSNamePrefix'))]",
    "agentIPAddressName": "[concat(variables('orchestratorName'), '-agent-ip-', variables('agentEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
    "agentIndex": 0,
    "agentLbBackendPoolName": "[concat(variables('orchestratorName'), '-agent-', variables('nameSuffix'))]",
    "agentLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('agentLbName'))]",
    "agentLbIPConfigID": "[concat(variables('agentLbID'),'/frontendIPConfigurations/', variables('agentLbIPConfigName'))]",
    "agentLbIPConfigName": "[concat(variables('orchestratorName'), '-agent-', variables('nameSuffix'))]",
    "agentLbName": "[concat(variables('orchestratorName'), '-agent-', variables('nameSuffix'))]",
    "agentMaxVMs": 100,
    "agentRunCmd": "[concat('runcmd:\n -  [ /bin/bash, /opt/azure/containers/install-cluster.sh ]\n\n')]",
    "agentRunCmdFile": "[concat(' -  content: |\n        #!/bin/bash\n        ','sudo mkdir -p /var/log/azure\n        ',variables('agentCustomScript'),'\n    path: /opt/azure/containers/install-cluster.sh\n    permissions: \"0744\"\n')]",
    "agentStorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),0)]",
    "agentStorageAccountsCount": "[variables('maxStorageAccountsPerAgent')]",
    "agentSubnet": "[parameters('agentSubnet')]",
    "agentSubnetName": "[concat(variables('orchestratorName'), '-agentsubnet')]",
    "agentVMNamePrefix": "[concat(variables('orchestratorName'), '-agent-', variables('nameSuffix'))]",
    "agentVMSize": "[parameters('agentVMSize')]",
    "agentVnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('agentSubnetName'))]",
    "agentWindowsBackendPort": 3389,
    "agentWindowsOffer": "WindowsServer",
    "agentWindowsPublisher": "MicrosoftWindowsServer",
    "agentWindowsRDPEndRangeStop": "[add(variables('agentWindowsRDPNatRangeStart'), add(variables('agentCount'),variables('agentCount')))]",
    "agentWindowsRDPNatRangeStart": 3389,
    "agentWindowsSku": "2016-Datacenter-with-Containers",
    "agentWindowsVersion": "latest",
    "apiVersionDefault": "2016-03-30",
    "apiVersionStorage": "2015-06-15",
    "clusterInstallParameters": "[concat(variables('masterCount'), ' ',variables('masterVMNamePrefix'), ' ',variables('masterFirstAddrOctet4'), ' ',variables('adminUsername'),' ',variables('postInstallScriptURI'),' ',variables('masterFirstAddrPrefix'))]",
    "configureClusterScriptFile": "configure-swarmmode-cluster.sh",
    "dataStorageAccountPrefixSeed": 97,
    "location": "[variables('locations')[mod(add(2,length(parameters('location'))),add(1,length(parameters('location'))))]]",
    "locations": [
      "[resourceGroup().location]",
      "[parameters('location')]"
    ],
    "masterAvailabilitySet": "[concat(variables('orchestratorName'), '-master-availabilitySet-', variables('nameSuffix'))]",
    "masterCount": "[parameters('masterCount')]",
    "masterCustomScript": "[concat('/bin/bash -c \"/bin/bash /opt/azure/containers/',variables('configureClusterScriptFile'), ' ',variables('clusterInstallParameters'),' >> /var/log/azure/cluster-bootstrap.log 2>&1\"')]",
    "masterEndpointDNSNamePrefix": "[tolower(parameters('masterEndpointDNSNamePrefix'))]",
    "masterFirstAddrOctet4": "[variables('masterFirstAddrOctets')[3]]",
    "masterFirstAddrOctets": "[split(parameters('firstConsecutiveStaticIP'),'.')]",
    "masterFirstAddrPrefix": "[concat(variables('masterFirstAddrOctets')[0],'.',variables('masterFirstAddrOctets')[1],'.',variables('masterFirstAddrOctets')[2],'.')]",
    "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
    "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
    "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
    "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
    "masterLbInboundNatRules": [
      [
        {
          "id": "[concat(variables('masterSshInboundNatRuleIdPrefix'),'0')]"
        },
        {
          "id": "[concat(variables('masterSshPort22InboundNatRuleIdPrefix'),'0')]"
        }
      ],
      [
        {
          "id": "[concat(variables('masterSshInboundNatRuleIdPrefix'),'1')]"
        }
      ],
      [
        {
          "id": "[concat(variables('masterSshInboundNatRuleIdPrefix'),'2')]"
        }
      ],
      [
        {
          "id": "[concat(variables('masterSshInboundNatRuleIdPrefix'),'3')]"
        }
      ],
      [
        {
          "id": "[concat(variables('masterSshInboundNatRuleIdPrefix'),'4')]"
        }
      ]
    ],
    "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
    "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
    "masterSshInboundNatRuleIdPrefix": "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'))]",
    "masterSshPort22InboundNatRuleIdPrefix": "[concat(variables('masterLbID'),'/inboundNatRules/SSHPort22-',variables('masterVMNamePrefix'))]",
    "masterSshPort22InboundNatRuleNamePrefix": "[concat(variables('masterLbName'),'/SSHPort22-',variables('masterVMNamePrefix'))]",
    "masterStorageAccountName": "[concat(variables('storageAccountBaseName'), '0')]",
    "masterSubnet": "[parameters('masterSubnet')]",
    "masterSubnetName": "[concat(variables('orchestratorName'), '-masterSubnet')]",
    "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
    "masterVMSize": "[parameters('masterVMSize')]",
    "masterVnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('masterSubnetName'))]",
    "maxStorageAccountsPerAgent": "[div(variables('maxVMsPerPool'),variables('maxVMsPerStorageAccount'))]",
    "maxVMsPerPool": 100,
    "maxVMsPerStorageAccount": 20,
    "nameSuffix": "[parameters('nameSuffix')]",
    "orchestratorName": "swarmm",
    "osImageOffer": "UbuntuServer",
    "osImagePublisher": "Canonical",
    "osImageSKU": "16.04-LTS",
    "osImageVersion": "16.04.201703070",
    "postInstallScriptURI": "disabled",
    "singleQuote": "'",
    "sshKeyPath": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]",
    "sshRSAPublicKey": "[parameters('sshRSAPublicKey')]",
    "storageAccountBaseName": "[uniqueString(concat(variables('masterEndpointDNSNamePrefix'),variables('location')))]",
    "storageAccountPrefixes": [
      "0",
      "6",
      "c",
      "i",
      "o",
      "u",
      "1",
      "7",
      "d",
      "j",
      "p",
      "v",
      "2",
      "8",
      "e",
      "k",
      "q",
      "w",
      "3",
      "9",
      "f",
      "l",
      "r",
      "x",
      "4",
      "a",
      "g",
      "m",
      "s",
      "y",
      "5",
      "b",
      "h",
      "n",
      "t",
      "z"
    ],
    "storageAccountPrefixesCount": "[length(variables('storageAccountPrefixes'))]",
    "virtualNetworkName": "[concat(variables('orchestratorName'), '-vnet-', variables('nameSuffix'))]",
    "vmSizesMap": {
      "Standard_A0": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A10": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A1_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A7": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A9": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D15_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D1_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D5_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D5_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_DS1": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS15_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS1_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS5_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS5_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F16": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F16s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F1s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F2s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F4s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F8s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_G1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_GS1": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS5": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_H16": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16m": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16mr": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16r": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H8m": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_L16s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_L32s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_L4s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_L8s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_NC12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC24": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC24r": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV24": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV6": {
        "storageAccountType": "Standard_LRS"
      }
    },
    "vmsPerStorageAccount": 20,
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "windowsAdminPassword": "[parameters('windowsAdminPassword')]",
    "windowsAdminUsername": "[parameters('windowsAdminUsername')]",
    "windowsCustomScript": "[concat('powershell.exe -ExecutionPolicy Unrestricted -command \"', variables('windowsCustomScriptArguments'), variables('windowsCustomScriptSuffix'), '\" > %SYSTEMDRIVE%\\AzureData\\CustomDataSetupScript.log 2>&1')]",
    "windowsCustomScriptArguments": "[concat('$arguments = ', variables('singleQuote'),'-SwarmMasterIP ', variables('masterFirstAddrPrefix'), variables('masterFirstAddrOctet4'), variables('singleQuote'), ' ; ')]",
    "windowsCustomScriptSuffix": " $inputFile = '%SYSTEMDRIVE%\\AzureData\\CustomData.bin' ; $outputFile = '%SYSTEMDRIVE%\\AzureData\\CustomDataSetupScript.ps1' ; $inputStream = New-Object System.IO.FileStream $inputFile, ([IO.FileMode]::Open), ([IO.FileAccess]::Read), ([IO.FileShare]::Read) ; $sr = New-Object System.IO.StreamReader(New-Object System.IO.Compression.GZipStream($inputStream, [System.IO.Compression.CompressionMode]::Decompress)) ; $sr.ReadToEnd() | Out-File($outputFile) ; Invoke-Expression('{0} {1}' -f $outputFile, $arguments) ; "
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentStorageAccountsCount')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentVMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('agentIPAddressName')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('agentEndpointDNSNamePrefix')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('agentIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('agentLbName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('agentLbBackendPoolName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('agentLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('agentIPAddressName'))]"
              }
            }
          }
        ],
        "inboundNatPools": [
          {
            "name": "[concat('RDP-', variables('agentVMNamePrefix'))]",
            "properties": {
              "backendPort": "[variables('agentWindowsBackendPort')]",
              "frontendIPConfiguration": {
                "id": "[variables('agentLbIPConfigID')]"
              },
              "frontendPortRangeEnd": "[variables('agentWindowsRDPEndRangeStop')]",
              "frontendPortRangeStart": "[variables('agentWindowsRDPNatRangeStart')]",
              "protocol": "tcp"
            }
          }
        ],
        "inboundNatRules": [],
        "loadBalancingRules": [
          {
            "name": "LBRule80",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('agentLbID'), '/backendAddressPools/', variables('agentLbBackendPoolName'))]"
              },
              "backendPort": 80,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('agentLbIPConfigID')]"
              },
              "frontendPort": 80,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentLbID'),'/probes/tcp80Probe')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "LBRule443",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('agentLbID'), '/backendAddressPools/', variables('agentLbBackendPoolName'))]"
              },
              "backendPort": 443,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('agentLbIPConfigID')]"
              },
              "frontendPort": 443,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentLbID'),'/probes/tcp443Probe')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "LBRule8080",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('agentLbID'), '/backendAddressPools/', variables('agentLbBackendPoolName'))]"
              },
              "backendPort": 8080,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('agentLbIPConfigID')]"
              },
              "frontendPort": 8080,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentLbID'),'/probes/tcp8080Probe')]"
              },
              "protocol": "tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "tcp80Probe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 80,
              "protocol": "tcp"
            }
          },
          {
            "name": "tcp443Probe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 443,
              "protocol": "tcp"
            }
          },
          {
            "name": "tcp8080Probe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 8080,
              "protocol": "tcp"
            }
          }
        ]
      },
      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(0,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(1,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(2,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(3,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(4,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName'))]",
        "[variables('vnetID')]",
        "[variables('agentLbID')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentVMNamePrefix'), '-vmss')]",
      "properties": {
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "virtualMachineProfile": {
          "extensionProfile": {
            "extensions": [
              {
                "name": "vmssCustomScriptExtension",
                "properties": {
                  "autoUpgradeMinorVersion": true,
                  "publisher": "Microsoft.Compute",
                  "settings": {
                    "commandToExecute": "[variables('windowsCustomScript')]"
                  },
                  "type": "CustomScriptExtension",
                  "typeHandlerVersion": "1.8"
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "nic",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "properties": {
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat(variables('agentLbID'), '/backendAddressPools/', variables('agentLbBackendPoolName'))]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[concat(variables('agentLbID'), '/inboundNatPools/', 'RDP-', variables('agentVMNamePrefix'))]"
                          }
                        ],
                        "subnet": {
                          "id": "[variables('agentVnetSubnetID')]"
                        }
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "osProfile": {
            "adminPassword": "[variables('windowsAdminPassword')]",
            "adminUsername": "[variables('windowsAdminUsername')]",
            "computerNamePrefix": "[concat(substring(variables('nameSuffix'), 0, 5), 'acs')]",
            "customData": "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"
          },
          "storageProfile": {
            "imageReference": {
              "offer": "[variables('agentWindowsOffer')]",
              "publisher": "[variables('agentWindowsPublisher')]",
              "sku": "[variables('agentWindowsSku')]",
              "version": "latest"
            },
            "osDisk": {
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "name": "vmssosdisk",
              "vhdContainers": [
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName')), variables('apiVersionStorage') ).primaryEndpoints.blob, 'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob, 'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob, 'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob, 'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob, 'osdisk')]"
              ]
            }
          }
        }
      },
      "sku": {
        "capacity": "[variables('agentCount')]",
        "name": "[variables('agentVMSize')]",
        "tier": "Standard"
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('agentVMNamePrefix'), '-vmss')]"
      },
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('masterStorageAccountName')]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('masterVMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('virtualNetworkName')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('masterSubnet')]",
            "[variables('agentSubnet')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('masterSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('masterSubnet')]"
            }
          },
          {
            "name": "[variables('agentSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('agentSubnet')]"
            }
          }
        ]
      },
      "type": "Microsoft.Network/virtualNetworks"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('masterAvailabilitySet')]",
      "properties": {},
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('masterPublicIPAddressName')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('masterEndpointDNSNamePrefix')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('masterLbName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('masterLbBackendPoolName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('masterLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "masterLbLoopNode"
      },
      "dependsOn": [
        "[variables('masterLbID')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterLbName'), '/', 'SSH-', variables('masterVMNamePrefix'), copyIndex())]",
      "properties": {
        "backendPort": 22,
        "enableFloatingIP": false,
        "frontendIPConfiguration": {
          "id": "[variables('masterLbIPConfigID')]"
        },
        "frontendPort": "[copyIndex(2200)]",
        "protocol": "tcp"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[variables('masterLbID')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterSshPort22InboundNatRuleNamePrefix'), '0')]",
      "properties": {
        "backendPort": 2222,
        "enableFloatingIP": false,
        "frontendIPConfiguration": {
          "id": "[variables('masterLbIPConfigID')]"
        },
        "frontendPort": "22",
        "protocol": "tcp"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "nicLoopNode"
      },
      "dependsOn": [
        "[variables('vnetID')]",
        "[variables('masterLbID')]",
        "[concat(variables('masterSshPort22InboundNatRuleIdPrefix'),'0')]",
        "[concat(variables('masterSshInboundNatRuleIdPrefix'),copyIndex())]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipConfigNode",
            "properties": {
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                }
              ],
              "loadBalancerInboundNatRules": "[variables('masterLbInboundNatRules')[copyIndex()]]",
              "privateIPAddress": "[concat(variables('masterFirstAddrPrefix'), copyIndex(int(variables('masterFirstAddrOctet4'))))]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('masterVnetSubnetID')]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/',variables('masterAvailabilitySet'))]",
        "[variables('masterStorageAccountName')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('masterAvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('masterVMSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'), 'nic-', copyIndex()))]"
            }
          ]
        },
        "osProfile": {
          "adminUsername": "[variables('adminUsername')]",
          "computername": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
          "customData": "[base64('#cloud-config\n\nwrite_files:\n -  encoding: gzip\n    content: !!binary |\n        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\n    path: /opt/azure/containers/configure-swarmmode-cluster.sh\n    permissions: \"0744\"\n\n')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "keyData": "[variables('sshRSAPublicKey')]",
                  "path": "[variables('sshKeyPath')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('osImageOffer')]",
            "publisher": "[variables('osImagePublisher')]",
            "sku": "[variables('osImageSKU')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'-osdisk')]",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('masterStorageAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob, 'vhds/', variables('masterVMNamePrefix'), copyIndex(), '-osdisk.vhd')]"
            }
          }
        }
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('masterVMNamePrefix'), copyIndex())]"
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', concat(variables('masterVMNamePrefix'), copyIndex()))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex(), '/configuremaster')]",
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "settings": {
          "commandToExecute": "[variables('masterCustomScript')]",
          "fileUris": []
        },
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.4"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    }
  ],
  "outputs": {
    "agentFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('agentIPAddressName'))).dnsSettings.fqdn]"
    },
    "diagnosticsStorageAccountUri": {
      "type": "string",
      "value": ""
    },
    "jumpboxFQDN": {
      "type": "string",
      "value": ""
    },
    "masterFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))).dnsSettings.fqdn]"
    }
  }
}
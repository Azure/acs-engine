{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "agentpool1Count": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentpool1Subnet": {
      "defaultValue": "10.240.0.0/16",
      "metadata": {
        "description": "Sets the subnet of agent pool 'agentpool1'."
      },
      "type": "string"
    },
    "agentpool1VMSize": {
      "allowedValues": [
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "apiServerCertificate": {
      "metadata": {
        "description": "The base 64 server certificate used on the master"
      },
      "type": "string"
    },
    "apiServerPrivateKey": {
      "metadata": {
        "description": "The base 64 server private key used on the master."
      },
      "type": "securestring"
    },
    "caCertificate": {
      "metadata": {
        "description": "The base 64 certificate authority certificate"
      },
      "type": "string"
    },
    "clientCertificate": {
      "metadata": {
        "description": "The base 64 client certificate used to communicate with the master"
      },
      "type": "string"
    },
    "clientPrivateKey": {
      "metadata": {
        "description": "The base 64 client private key used to communicate with the master"
      },
      "type": "securestring"
    },
    "firstConsecutiveStaticIP": {
      "defaultValue": "10.240.255.5",
      "metadata": {
        "description": "Sets the static IP of the first master"
      },
      "type": "string"
    },
    "kubeConfigCertificate": {
      "metadata": {
        "description": "The base 64 certificate used by cli to communicate with the master"
      },
      "type": "string"
    },
    "kubeConfigPrivateKey": {
      "metadata": {
        "description": "The base 64 private key used by cli to communicate with the master"
      },
      "type": "securestring"
    },
    "kubectlVersion": {
      "defaultValue": "v1.5.1",
      "metadata": {
        "description": "The kubernetes version."
      },
      "type": "string"
    },
    "kubernetesHyperkubeSpec": {
      "defaultValue": "gcr.io/google_containers/hyperkube-amd64:v1.5.1",
      "metadata": {
        "description": "The container spec for hyperkube."
      },
      "type": "string"
    },
    "linuxAdminUsername": {
      "metadata": {
        "description": "User name for the Linux Virtual Machines (SSH or Password)."
      },
      "type": "string"
    },
    "masterEndpointDNSNamePrefix": {
      "metadata": {
        "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      },
      "type": "string"
    },
    "masterSubnet": {
      "defaultValue": "10.240.0.0/16",
      "metadata": {
        "description": "Sets the subnet of the master node(s)."
      },
      "type": "string"
    },
    "masterVMSize": {
      "allowedValues": [
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F8",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "nameSuffix": {
      "defaultValue": "31559618",
      "metadata": {
        "description": "A string hash of the master DNS name to uniquely identify the cluster."
      },
      "type": "string"
    },
    "servicePrincipalClientId": {
      "metadata": {
        "description": "Client ID (used by cloudprovider)"
      },
      "type": "securestring"
    },
    "servicePrincipalClientSecret": {
      "metadata": {
        "description": "The Service Principal Client Secret."
      },
      "type": "securestring"
    },
    "sshRSAPublicKey": {
      "metadata": {
        "description": "SSH public key used for auth to all Linux machines.  Not Required.  If not set, you must provide a password key."
      },
      "type": "string"
    },
    "windowsAdminPassword": {
      "metadata": {
        "description": "Password for the Windows Swarm Agent Virtual Machines."
      },
      "type": "securestring"
    },
    "windowsAdminUsername": {
      "metadata": {
        "description": "User name for the Windows Swarm Agent Virtual Machines (Password Only Supported)."
      },
      "type": "string"
    }
  },
  "variables": {
    "agentWindowsBackendPort": 3389,
    "agentWindowsOffer": "WindowsServer",
    "agentWindowsPublisher": "MicrosoftWindowsServer",
    "agentWindowsSku": "2016-Datacenter-with-Containers",
    "agentWindowsVersion": "latest",
    "agentpool1AccountName": "[concat(variables('storageAccountBaseName'), 'agnt0')]",
    "agentpool1AvailabilitySet": "[concat('agentpool1-availabilitySet-', variables('nameSuffix'))]",
    "agentpool1Count": "[parameters('agentpool1Count')]",
    "agentpool1IPAddressName": "[concat(variables('orchestratorName'), '-agent-ip-', variables('agentpool1Index'), '-', variables('nameSuffix'))]",
    "agentpool1Index": 0,
    "agentpool1LbBackendPoolName": "[concat(variables('orchestratorName'), '-agentpool1-', variables('nameSuffix'))]",
    "agentpool1LbID": "[resourceId('Microsoft.Network/loadBalancers',variables('agentpool1LbName'))]",
    "agentpool1LbIPConfigID": "[concat(variables('agentpool1LbID'),'/frontendIPConfigurations/', variables('agentpool1LbIPConfigName'))]",
    "agentpool1LbIPConfigName": "[concat(variables('orchestratorName'), '-agentpool1-', variables('nameSuffix'))]",
    "agentpool1LbName": "[concat(variables('orchestratorName'), '-agentpool1-', variables('nameSuffix'))]",
    "agentpool1StorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),variables('agentpool1Index'))]",
    "agentpool1StorageAccountsCount": "[add(div(variables('agentpool1Count'), variables('maxVMsPerStorageAccount')), mod(add(mod(variables('agentpool1Count'), variables('maxVMsPerStorageAccount')),2), add(mod(variables('agentpool1Count'), variables('maxVMsPerStorageAccount')),1)))]",
    "agentpool1SubnetName": "[variables('subnetName')]",
    "agentpool1VMNamePrefix": "[concat(variables('orchestratorName'), '-agentpool1-', variables('nameSuffix'), '-')]",
    "agentpool1VMSize": "[parameters('agentpool1VMSize')]",
    "agentpool1VnetSubnetID": "[variables('vnetSubnetID')]",
    "agentpool1WindowsRDPEndRangeStop": "[add(variables('agentpool1WindowsRDPNatRangeStart'), add(variables('agentpool1Count'),variables('agentpool1Count')))]",
    "agentpool1WindowsRDPNatRangeStart": 3389,
    "apiServerCertificate": "[parameters('apiServerCertificate')]",
    "apiServerPrivateKey": "[parameters('apiServerPrivateKey')]",
    "apiVersionDefault": "2016-03-30",
    "apiVersionStorage": "2015-06-15",
    "caCertificate": "[parameters('caCertificate')]",
    "clientCertificate": "[parameters('clientCertificate')]",
    "clientPrivateKey": "[parameters('clientPrivateKey')]",
    "dockerEngineVersion": "1.12.*",
    "kubeConfigCertificate": "[parameters('kubeConfigCertificate')]",
    "kubeConfigPrivateKey": "[parameters('kubeConfigPrivateKey')]",
    "kubeDnsServiceIp": "10.0.0.10",
    "kubeServiceCidr": "10.0.0.0/16",
    "kubectlVersion": "[parameters('kubectlVersion')]",
    "kubernetesHyperkubeSpec": "[parameters('kubernetesHyperkubeSpec')]",
    "location": "[resourceGroup().location]",
    "masterAvailabilitySet": "master-availabilityset",
    "masterCount": 1,
    "masterFirstAddrComment": "these MasterFirstAddrComment are used to place multiple masters consecutively in the address space",
    "masterFirstAddrOctet4": "[variables('masterFirstAddrOctets')[3]]",
    "masterFirstAddrOctets": "[split(parameters('firstConsecutiveStaticIP'),'.')]",
    "masterFirstAddrPrefix": "[concat(variables('masterFirstAddrOctets')[0],'.',variables('masterFirstAddrOctets')[1],'.',variables('masterFirstAddrOctets')[2],'.')]",
    "masterFqdnPrefix": "[parameters('masterEndpointDNSNamePrefix')]",
    "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
    "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
    "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
    "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
    "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
    "masterPrivateIp": "[parameters('firstConsecutiveStaticIP')]",
    "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterFqdnPrefix'), '-', variables('nameSuffix'))]",
    "masterStorageAccountName": "[concat(variables('storageAccountBaseName'), 'mstr0')]",
    "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
    "masterVMSize": "[parameters('masterVMSize')]",
    "maxStorageAccountsPerAgent": "[div(variables('maxVMsPerPool'),variables('maxVMsPerStorageAccount'))]",
    "maxVMsPerPool": 100,
    "maxVMsPerStorageAccount": 20,
    "nameSuffix": "[parameters('nameSuffix')]",
    "nsgID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nsgName'))]",
    "nsgName": "[concat(variables('masterVMNamePrefix'), 'nsg')]",
    "orchestratorName": "k8s",
    "osImageOffer": "UbuntuServer",
    "osImagePublisher": "Canonical",
    "osImageSKU": "16.04.0-LTS",
    "osImageVersion": "16.04.201606270",
    "primaryAvailablitySetName": "[concat('agentpool1-availabilitySet-',variables('nameSuffix'))]",
    "resourceGroup": "[resourceGroup().name]",
    "routeTableID": "[resourceId('Microsoft.Network/routeTables', variables('routeTableName'))]",
    "routeTableName": "[concat(variables('masterVMNamePrefix'),'routetable')]",
    "servicePrincipalClientId": "[parameters('servicePrincipalClientId')]",
    "servicePrincipalClientSecret": "[parameters('servicePrincipalClientSecret')]",
    "singleQuote": "'",
    "sshKeyPath": "[concat('/home/',variables('username'),'/.ssh/authorized_keys')]",
    "sshNatPorts": [
      22,
      2201,
      2202,
      2203,
      2204
    ],
    "sshPublicKeyData": "[parameters('sshRSAPublicKey')]",
    "storageAccountBaseName": "[uniqueString(concat(variables('masterFqdnPrefix'),resourceGroup().location))]",
    "storageAccountPrefixes": [
      "0",
      "6",
      "c",
      "i",
      "o",
      "u",
      "1",
      "7",
      "d",
      "j",
      "p",
      "v",
      "2",
      "8",
      "e",
      "k",
      "q",
      "w",
      "3",
      "9",
      "f",
      "l",
      "r",
      "x",
      "4",
      "a",
      "g",
      "m",
      "s",
      "y",
      "5",
      "b",
      "h",
      "n",
      "t",
      "z"
    ],
    "storageAccountPrefixesCount": "[length(variables('storageAccountPrefixes'))]",
    "subnet": "[parameters('masterSubnet')]",
    "subnetName": "[concat(variables('orchestratorName'), '-subnet')]",
    "subscriptionId": "[subscription().subscriptionId]",
    "tenantId": "[subscription().tenantId]",
    "username": "[parameters('linuxAdminUsername')]",
    "virtualNetworkName": "[concat(variables('orchestratorName'), '-vnet-', variables('nameSuffix'))]",
    "vmSizesMap": {
      "Basic_A2": {
        "storageAccountType": "Standard_LRS"
      },
      "Basic_A3": {
        "storageAccountType": "Standard_LRS"
      },
      "Basic_A4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A10": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A7": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A9": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D15_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D5_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_DS11": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS15_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS5_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F16": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F16s": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F2s": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F4s": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F8s": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_GS1": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS5": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_H16": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16m": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16mr": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16r": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H8m": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC24": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC24r": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV24": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV6": {
        "storageAccountType": "Standard_LRS"
      }
    },
    "vmsPerStorageAccount": 20,
    "vnetCidr": "10.0.0.0/8",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "vnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    "windowsAdminPassword": "[parameters('windowsAdminPassword')]",
    "windowsAdminUsername": "[parameters('windowsAdminUsername')]",
    "windowsCustomScriptSuffix": " $inputFile = '%SYSTEMDRIVE%\\AzureData\\CustomData.bin' ; $outputFile = '%SYSTEMDRIVE%\\AzureData\\CustomDataSetupScript.ps1' ; $inputStream = New-Object System.IO.FileStream $inputFile, ([IO.FileMode]::Open), ([IO.FileAccess]::Read), ([IO.FileShare]::Read) ; $sr = New-Object System.IO.StreamReader(New-Object System.IO.Compression.GZipStream($inputStream, [System.IO.Compression.CompressionMode]::Decompress)) ; $sr.ReadToEnd() | Out-File($outputFile) ; Invoke-Expression('{0} {1}' -f $outputFile, $arguments) ; "
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('agentpool1Count')]",
        "name": "loop"
      },
      "dependsOn": [
        "[concat(variables('agentpool1LbID'), '/inboundNatRules/RDP-', variables('agentpool1VMNamePrefix'), copyIndex())]",
        "[variables('vnetID')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpool1VMNamePrefix'), 'nicp-', copyIndex())]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('agentpool1LbID'), '/backendAddressPools/pool-',variables('agentpool1LbName'))]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('agentpool1LbID'),'/inboundNatRules/RDP-',variables('agentpool1VMNamePrefix'),copyIndex())]"
                }
              ],
              "privateIPAddress": "[concat('10.240.245.', copyindex(5))]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('agentpool1VnetSubnetID')]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('agentpool1IPAddressName')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[concat('rdp',uniqueString(variables('masterFqdnPrefix')))]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('agentpool1IPAddressName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[variables('agentpool1LbName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "[concat('pool-',variables('agentpool1LbName'))]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('agentpool1LbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('agentpool1IPAddressName'))]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('agentpool1Count')]",
        "name": "loop"
      },
      "dependsOn": [
        "[variables('agentpool1LbID')]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('agentpool1LbName'), '/', 'RDP-', variables('agentpool1VMNamePrefix'), copyIndex())]",
      "properties": {
        "backendPort": "[variables('agentWindowsBackendPort')]",
        "enableFloatingIP": false,
        "frontendIPConfiguration": {
          "id": "[variables('agentpool1LbIPConfigID')]"
        },
        "frontendPort": "[copyIndex(variables('agentWindowsBackendPort'))]",
        "protocol": "tcp"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentpool1StorageAccountsCount')]",
        "name": "loop"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpool1AccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentpool1VMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('agentpool1AvailabilitySet')]",
      "properties": {},
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('agentpool1Count')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(div(copyIndex(),variables('maxVMsPerStorageAccount')),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(div(copyIndex(),variables('maxVMsPerStorageAccount')),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpool1AccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('agentpool1VMNamePrefix'), 'nicp-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('agentpool1AvailabilitySet'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpool1VMNamePrefix'), copyIndex())]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('agentpool1AvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('agentpool1VMSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('agentpool1VMNamePrefix'), 'nicp-', copyIndex()))]",
              "properties": {
                "primary": true
              }
            }
          ]
        },
        "osProfile": {
          "adminPassword": "[variables('windowsAdminPassword')]",
          "adminUsername": "[variables('windowsAdminUsername')]",
          "computername": "[concat(substring(variables('nameSuffix'), 0, 5), 'acs', copyIndex(), add(900,variables('agentpool1Index')))]",
          "customData": "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"
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('agentWindowsOffer')]",
            "publisher": "[variables('agentWindowsPublisher')]",
            "sku": "[variables('agentWindowsSku')]",
            "version": "latest"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "[concat(variables('agentpool1VMNamePrefix'), copyIndex(),'-osdisk')]",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(div(copyIndex(),variables('maxVMsPerStorageAccount')),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(div(copyIndex(),variables('maxVMsPerStorageAccount')),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpool1AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk/', variables('agentpool1VMNamePrefix'), copyIndex(), '-osdisk.vhd')]"
            }
          }
        }
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('agentpool1VMNamePrefix'), copyIndex())]"
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('agentpool1Count')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('agentpool1VMNamePrefix'), copyIndex())]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('agentpool1VMNamePrefix'), copyIndex(), '/cse')]",
      "properties": {
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "commandToExecute": "[concat('powershell.exe -ExecutionPolicy Unrestricted -command \"', '$arguments = ', variables('singleQuote'),'-KubeDnsServiceIp ',variables('kubeDnsServiceIp'),' -MasterFQDNPrefix ',variables('masterFqdnPrefix'),' -Location ',variables('location'),' -AgentKey ',variables('clientPrivateKey'),' -AzureHostname ',variables('agentpool1VMNamePrefix'),copyIndex(),variables('singleQuote'), ' ; ', variables('windowsCustomScriptSuffix'), '\" > %SYSTEMDRIVE%\\AzureData\\CustomDataSetupScript.log 2>&1')]"
        },
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.8"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('masterAvailabilitySet')]",
      "properties": {},
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('masterStorageAccountName')]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('masterVMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]",
        "[concat('Microsoft.Network/routeTables/', variables('routeTableName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('virtualNetworkName')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetCidr')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnet')]",
              "networkSecurityGroup": {
                "id": "[variables('nsgID')]"
              },
              "routeTable": {
                "id": "[variables('routeTableID')]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/virtualNetworks"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('nsgName')]",
      "properties": {
        "securityRules": [
          {
            "name": "allow_rdp",
            "properties": {
              "access": "Allow",
              "description": "Allow RDP traffic to master",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "3389-3389",
              "direction": "Inbound",
              "priority": 102,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "allow_ssh",
            "properties": {
              "access": "Allow",
              "description": "Allow SSH traffic to master",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22-22",
              "direction": "Inbound",
              "priority": 101,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "allow_kube_tls",
            "properties": {
              "access": "Allow",
              "description": "Allow kube-apiserver (tls) traffic to master",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "443-443",
              "direction": "Inbound",
              "priority": 100,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('routeTableName')]",
      "type": "Microsoft.Network/routeTables"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('masterLbName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('masterLbBackendPoolName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('masterLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
              }
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRuleHTTPS",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
              },
              "backendPort": 443,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('masterLbIPConfigID')]"
              },
              "frontendPort": 443,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('masterLbID'),'/probes/tcpHTTPSProbe')]"
              },
              "protocol": "tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "tcpHTTPSProbe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 443,
              "protocol": "tcp"
            }
          }
        ]
      },
      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('masterPublicIPAddressName')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('masterFqdnPrefix')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "masterLbLoopNode"
      },
      "dependsOn": [
        "[variables('masterLbID')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterLbName'), '/', 'SSH-', variables('masterVMNamePrefix'), copyIndex())]",
      "properties": {
        "backendPort": 22,
        "enableFloatingIP": false,
        "frontendIPConfiguration": {
          "id": "[variables('masterLbIPConfigID')]"
        },
        "frontendPort": "[variables('sshNatPorts')[copyIndex()]]",
        "protocol": "tcp"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "nicLoopNode"
      },
      "dependsOn": [
        "[variables('vnetID')]",
        "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]",
        "[variables('nsgID')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]"
                }
              ],
              "privateIPAddress": "[concat(variables('masterFirstAddrPrefix'), copyIndex(int(variables('masterFirstAddrOctet4'))))]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('vnetSubnetID')]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/',variables('masterAvailabilitySet'))]",
        "[variables('masterStorageAccountName')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('masterAvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('masterVMSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'),'nic-', copyIndex()))]"
            }
          ]
        },
        "osProfile": {
          "adminUsername": "[variables('username')]",
          "computername": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
          "customData": "[base64(concat('#cloud-config\n\n# { { { variable } } }\n\npackages:\n - etcd\n - jq\n - traceroute\n\nruncmd:\n- /bin/echo DAEMON_ARGS=--advertise-client-urls \"http://127.0.0.1:2379,http://',variables('masterPrivateIp'),':2379\" --listen-client-urls \"http://0.0.0.0:2379,http://0.0.0.0:4001\" | tee -a /etc/default/etcd\n- apt-get update\n- apt-get install -y apt-transport-https ca-certificates\n- apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\n- echo \"deb https://apt.dockerproject.org/repo ubuntu-xenial main\" | sudo tee /etc/apt/sources.list.d/docker.list\n- \"echo \\\"Package: docker-engine\\nPin: version ',variables('dockerEngineVersion'),'\\nPin-Priority: 550\\n\\\" > /etc/apt/preferences.d/docker.pref\"\n- apt-get update\n- apt-get install -y docker-engine\n- systemctl restart docker\n- /usr/bin/curl -sSL --retry 12 --retry-delay 10 https://storage.googleapis.com/kubernetes-release/release/',variables('kubectlVersion'),'/bin/linux/amd64/kubectl > /usr/local/bin/kubectl\n- chmod +x /usr/local/bin/kubectl\n- mkdir -p /etc/kubernetes/manifests\n\nwrite_files:\n- path: \"/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    MountFlags=shared\n\n- path: \"/etc/systemd/system/docker.service.d/overlay.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    ExecStart=\n    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\n\n- path: \"/etc/kubernetes/certs/ca.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('caCertificate'),'\n\n- path: \"/etc/kubernetes/certs/apiserver.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('apiServerCertificate'),'\n\n- path: \"/etc/kubernetes/certs/client.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('clientCertificate'),'\n\n- path: \"/var/lib/kubelet/kubeconfig\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - name: localcluster\n      cluster:\n        certificate-authority: /etc/kubernetes/certs/ca.crt\n        server: https://',variables('masterPrivateIp'),':443\n    users:\n    - name: client\n      user:\n        client-certificate: /etc/kubernetes/certs/client.crt\n        client-key: /etc/kubernetes/certs/client.key\n    contexts:\n    - context:\n        cluster: localcluster\n        user: client\n      name: localclustercontext\n    current-context: localclustercontext\n\n- path: /etc/kubernetes/manifests/kube-apiserver.yaml\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n      apiVersion: \"v1\"\n      kind: \"Pod\"\n      metadata:\n        name: \"kube-apiserver\"\n        namespace: \"kube-system\"\n        labels:\n          tier: control-plane\n          component: kube-apiserver\n      spec:\n        hostNetwork: true\n        containers:\n          - name: \"kube-apiserver\"\n            image: \"',variables('kubernetesHyperkubeSpec'),'\"\n            command: \n              - \"/hyperkube\"\n              - \"apiserver\"\n              - \"--admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota\"\n              - \"--address=0.0.0.0\"\n              - \"--allow-privileged\"\n              - \"--insecure-port=8080\"\n              - \"--secure-port=443\"\n              - \"--cloud-provider=azure\"\n              - \"--cloud-config=/etc/kubernetes/azure.json\"\n              - \"--service-cluster-ip-range=',variables('kubeServiceCidr'),'\"\n              - \"--etcd-servers=http://127.0.0.1:4001\"\n              - \"--tls-cert-file=/etc/kubernetes/certs/apiserver.crt\"\n              - \"--tls-private-key-file=/etc/kubernetes/certs/apiserver.key\"\n              - \"--client-ca-file=/etc/kubernetes/certs/ca.crt\"\n              - \"--service-account-key-file=/etc/kubernetes/certs/apiserver.key\"\n              - \"--v=4\"\n            volumeMounts:\n              - name: \"etc-kubernetes\"\n                mountPath: \"/etc/kubernetes\"\n              - name: \"var-lib-kubelet\"\n                mountPath: \"/var/lib/kubelet\"\n        volumes:\n          - name: \"etc-kubernetes\"\n            hostPath:\n              path: \"/etc/kubernetes\"\n          - name: \"var-lib-kubelet\"\n            hostPath:\n              path: \"/var/lib/kubelet\"\n\n- path: /etc/kubernetes/manifests/kube-controller-manager.yaml\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n      apiVersion: \"v1\"\n      kind: \"Pod\"\n      metadata:\n        name: \"kube-controller-manager\"\n        namespace: \"kube-system\"\n        labels:\n          tier: control-plane\n          component: kube-controller-manager\n      spec:\n        hostNetwork: true\n        containers:\n          - name: \"kube-controller-manager\"\n            image: \"',variables('kubernetesHyperkubeSpec'),'\"\n            command: \n              - \"/hyperkube\"\n              - \"controller-manager\"\n              - \"--master=127.0.0.1:8080\"\n              - \"--kubeconfig=/var/lib/kubelet/kubeconfig\"\n              - \"--allocate-node-cidrs=true\"\n              - \"--cluster-cidr=10.244.0.0/16\"\n              - \"--cluster-name=',variables('masterFqdnPrefix'),'\"\n              - \"--cloud-provider=azure\"\n              - \"--cloud-config=/etc/kubernetes/azure.json\"\n              - \"--root-ca-file=/etc/kubernetes/certs/ca.crt\"\n              - \"--service-account-private-key-file=/etc/kubernetes/certs/apiserver.key\"\n              - \"--v=2\"\n            volumeMounts: \n              - name: \"etc-kubernetes\"\n                mountPath: \"/etc/kubernetes\"\n              - name: \"var-lib-kubelet\"\n                mountPath: \"/var/lib/kubelet\"\n        volumes:\n          - name: \"etc-kubernetes\"\n            hostPath:\n              path: \"/etc/kubernetes\"\n          - name: \"var-lib-kubelet\"\n            hostPath:\n              path: \"/var/lib/kubelet\"\n\n- path: /etc/kubernetes/manifests/kube-scheduler.yaml\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n      apiVersion: \"v1\"\n      kind: \"Pod\"\n      metadata:\n        name: \"kube-scheduler\"\n        namespace: \"kube-system\"\n        labels:\n          tier: control-plane\n          component: kube-scheduler\n      spec:\n        hostNetwork: true\n        containers:\n          - name: \"kube-scheduler\"\n            image: \"',variables('kubernetesHyperkubeSpec'),'\"\n            command:\n              - \"/hyperkube\"\n              - \"scheduler\"\n              - \"--master=127.0.0.1:8080\"\n              - \"--kubeconfig=/var/lib/kubelet/kubeconfig\"\n              - \"--v=2\"\n            volumeMounts:\n              - name: \"etc-kubernetes\"\n                mountPath: \"/etc/kubernetes\"\n              - name: \"var-lib-kubelet\"\n                mountPath: \"/var/lib/kubelet\"\n        volumes:\n          - name: \"etc-kubernetes\"\n            hostPath:\n              path: \"/etc/kubernetes\"\n          - name: \"var-lib-kubelet\"\n            hostPath:\n              path: \"/var/lib/kubelet\"\n\n- path: /etc/kubernetes/manifests/kube-addon-manager.yml\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: kube-addon-manager\n      namespace: kube-system\n      version: v1\n    spec:\n      hostNetwork: true\n      containers:\n      - name: kube-addon-manager\n        # TODO: consider if hardcoding this is the right thing to do...\n        image: gcr.io/google_containers/kube-addon-manager-amd64:v6\n        resources:\n          requests:\n            cpu: 5m\n            memory: 50Mi\n        volumeMounts:\n        - name: addons\n          mountPath: \"/etc/kubernetes/addons\"\n          readOnly: true\n      volumes:\n      - name: addons\n        hostPath:\n          path: \"/etc/kubernetes/addons\"\n\n- path: /etc/kubernetes/addons/kube-dns-service.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/3xQwUoDMRC95yuG3lO7iCBztRcRpFD1ns2+Q9hsEjKTgn8vcbugoCWXvDfvvXmMK+EDVUJOTJfBzCFNTGfUS/AwC9RNTh0bouhGROk/ovlRrCuFaW4j7JRkZduImqCQfch3PjZRVCtrFtNOa8PuD2VyC5he2ojj69kQrfhHdCekOL+x8imKxUiB732um55PTMNh399wMEQlV/3ua6+JW88+YHq4X0HNmn2OTO/H02+xVV9uGd6eukEQ4TXX/y7zFQAA//8ZlC5KYQEAAA==\n\n- path: /etc/kubernetes/addons/kube-dns-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/8xWXW/rRBB9z68YmVfsOi29LSsFCbUIXhARt/BCENqup/Gq4x13Zx01F/Hf0Tof3viml+QKIfwUzefZMzNH0a39Fb1YdgpW08mzdZWCn7Ela3Sw7O7YBc9E6CcNBl3poNUEgPQjksRfAM/dI3qHAaWwfGGok4A+F/Qra1BBFnyH2SbyVnLdtqpPySsnvXU19P96AuB0g0NEPhil1WbnkbUEbCbSookg/AawKLicAAgSmsBend40YNOSDrhJSV8aP+0ch54O2ZkAxNRYdYS+0NTWuhjR4G2wRlPecqUgy05MC0zot50g++3PRfaM60WmFtndtuC3VcVOfnK0XmRfLjJuYzz7Pua7VytBFtlfv+/6pXN6m4zzpniEPoDdJOJn2AVtHfp94xy0XyYwcsjyvOJGWzfbtiqIjaYiG8U4yVv2YTYty+urwWkbvUQFS+Mj2iXzkvCPoe9FfE3M1U317is1LW72mWRX6FBk7vkRB0QAT9pS5/Gh9ig1U6XgOvHWIbTfY0gTAFodagXZRY2aQv0h33bNDoPYBwW35W15YI57EBf9h4eHeeKwzgar6R5Jr9+jYVeJgndpqnTGoEiCc5p4g22Qu7BPHd4w3FU69ojuYDB7Euc97p73pP6mSqS2n1fiaT0HNkwKfrmff07BYNpPFH24G4p61JU9OsRPjmmf9saApp89oKvypBF4FO68QUnxkW1skEPEDTbs1wqmN+WPNvF4fOlQxtGm7Xpem6M1khJHz9BoU2Mu9gPGIytHB+g4j6hpNbJHYUA/m17eFGVRFtMvRgfaBxEv8ydtLNmwnuXnXW88/UbLy/6Er0abvPWfvMnHt+78BX57e/9hb4+z31QzJ8T83LWpBlf4pDsKhaxMcaCQsKccvrmocHXhOqIR752n2V6Utjxl/1pf1Y/6xO4fSWIf0kt6lMSR/aWzGE7fE3xFs2u0W5PL/0TpPyIV/ndKv4V68n2McL+lvGcq2PUZAnZcv5IKlZM5kzVrBfebPd06HFf4/uBfX/weMYz/X7EoIOu6178DAAD//yNNVaT4CgAA\n\n- path: /etc/kubernetes/addons/kube-proxy-daemonset.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/5RUO4/bPBDs/SsW6nk8t8L3pUmKNHkABtLT1JxNmA+Fu3Tsfx9Qii3pHspFFTG7nJ2dsWl69wOZXYot4SKI9cj6vN1DzHZzcrFr6ZNBSHEH2QSI6YyYdkPkzR6e64noVPbIEQJ+cElbX1iQFSOfnUVLjeSCZui0KfQpIko7XFJ9TpfrUBGH3FJMHTZE0QQ866gQ98becL6yIGy4h60iBKH3RjAKmgut31zsuowXUohuI8aLUYyLyHcyVcmCid3ErqjRx2uPXLmbGbwco6hRqrbYFJ/c4X99Nll7t9cV8xA91SYSF8yhWvrf5Pnn26hdD/than3FxPHL4FSyxcyQCv4sYFlgRLYvLW0fH8MdZdiSnVw/pii4yLy9z+7sPA7oWqqR30vn5EvAl1TinF9RqMh3I8eWGg2xmtlriyzczGjHPZi9GkrqmFgWwk33Lfrrs5mvsE+WvaSHWDXV/5n+PdHNExlrfxtTN/0K+ZXyaYGPfs5+grVxkDJP44+0wlnz0WRoawYH3ZOzZmHCisPr3O9Z+42l14nfimslrPp/3cHDSsoTZX3IHpbvU+KWvIvl8jsAAP//tEWDlf4EAAA=\n\n- path: /etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/4RTTYvbQAy9+1eI3J1s6Afs3EoXeunBsKXXIo+FM6xmNIxkd/3vy2yziQ1pqtMg6T09PTSYw08qGiQ5oFejVJ96mI89GR6bl5AGB0+UWZZIyZpIhgMaugaAsSfW+gJ4mXoqiYx0H+TgeVKj0iqVOXhysLMy0e6tE3N2q/Z2QD31gmV4q87vYubj/tP+2AAkjPRPQC1qRn/uaHVRo9hoJl91FcocPKqDyqTE5E3KX8URzZ++r1a4L80oZkajM3hlQw3e8PxvyXd5Nbwkw5CoXNAtYBnVwYUsRBzJwehL9XYUGZl+XXGHW3NajMPnj+7i4oqpm5g74eAXB1/4Ny56qXOYKZFqV6Sn6zYAJ7P8jWydAshoJwe7w26blWIOHh8eH1bpkIIF5CdiXJ7JSxrUwYd1h4VIMtmt4t0LuA5d2d9ebe1uyclFTLywgx9fu3M+yUDPmwupUb/Bfnvcog44pOkV/gQAAP//QDy26j0DAAA=\n\n- path: /etc/kubernetes/addons/kubernetes-dashboard-service.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/4SOwUpEMQxF9/2KMPvquHPyESII7vPai5bpa0uSNzB/L60uXOnucnOSHBnlHWqlN6bbU7iWlpneoLeSEHa4ZHHhQFRlQ7WZiK7HBm1w2EPpj6ke5tBo31tMJ9cDp0XKGPwLj1nsc+uiORA12fHn0IakHyLa3Rx7sIE0HUZXXzJxRabn8/rnoh/w11VdzpdZGiqSd+V/hfw+wPTSM+aB8BUAAP//d9OtPhsBAAA=\n\n- path: /etc/kubernetes/addons/kube-heapster-service.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/2yOvWrEMBCEez3F4l75q4yeIGUgkH4tD4mwLIndtSFvf8h2cQfXDcN++w239APRVEug/d0tqcyBviF7inArjGc2Do4o84SsPREt2wQpMOhLqq8xb2oQrycVaDDZMDy5LLwi0Ce4dcARncXfY6GN+5eOev1Xw+q0IXZ1q2LHBn/EQOPboTGWX9jXVY0fjkiREa3KtXhUz63duW4BAAD//6ozJXX5AAAA\n\n- path: /etc/kubernetes/addons/kube-heapster-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/6yU32/TMBDH3/NXWHnGaQMbGpbyMG3jibGJSUiIoOrm3Bqr/oXtVA2I/x0ladoka8s0kafqe3ffcz8+H6U0WgldMHKNVppaoQ6Rt8hZRIhDKwUHz0gaERJQWQkBmwghfU7zcaMDCI3O9wolQsESGVlylwgzWxqzlLjYJ85KBOsDOrZOk7fJfFvXeCkFumA7gZJ4lxwPVUq9qRzHbFU9otMY0Ce+UgpcvQArWB7n8b5Ag0JGeqOd7LAz8fuGjfizQh9GGiHcVoxczNVIVKiMqxlJz+a3YhCRQolXG/ybHhSF0dShF7/QsTR5f5qfNcVCg9b1BCC3VXYxVxMVN8FBG5sn59Ngd96sPe7Bum3C2bNwKB360sgiO59Eit3oZf0F0W4s6CMGSNLpsXsQ2ZHBsEZKatEJU2Tv5s03PaoPQkEwLsONNRp1ECCPDQtt0b16ZM6P3PiHF07Mi+pRr4dXvgZZ4Udn1NjvSaAsvuDTWN3q9xBKRhQGKCBA0jAYpHVIbr8t7u+uF58vb2/+fzdvgZ9s+XB/edX11abAB5TIg3F7+3ZYBttAmJnxjEihq03Uoeva9SUSHlEOmK8uPAVrD+yJNTovjGZktK5AaxMgCKMHJp6XWFQSXQLSltMDcSeC4CCpNQUjgwV1uiwYiW7bicTff+fxCus8Znl8tTW8bFaCv9OyzuM3eWxsk29cm3OzET74PP7zo+nnR+AUBF5+GoE4hmEKAaz42ku4Caibn362TpuLSKMh7SHpw/aHCE/Qyap9jh7dWnBkJA6uwuYf7aaHtSXU1z6gip495K119DcAAP//UmlrqfYGAAA=\n\n- path: \"/etc/systemd/system/kubelet.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=Kubelet\n    Requires=docker.service\n    After=docker.service\n\n    [Service]\n    Restart=always\n    ExecStartPre=/bin/mkdir -p /var/lib/kubelet\n    ExecStartPre=/bin/sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g\" \"/etc/kubernetes/addons/kube-proxy-daemonset.yaml\"\n    ExecStartPre=/bin/mount --bind /var/lib/kubelet /var/lib/kubelet\n    ExecStartPre=/bin/mount --make-shared /var/lib/kubelet\n    ExecStart=/usr/bin/docker run \\\n      --net=host \\\n      --pid=host \\\n      --privileged \\\n      --volume=/dev:/dev \\\n      --volume=/sys:/sys:ro \\\n      --volume=/var/run:/var/run:rw \\\n      --volume=/var/lib/docker/:/var/lib/docker:rw \\\n      --volume=/var/lib/kubelet/:/var/lib/kubelet:shared \\\n      --volume=/var/log:/var/log:rw \\\n      --volume=/etc/kubernetes/:/etc/kubernetes:ro \\\n      --volume=/srv/kubernetes/:/srv/kubernetes:ro \\\n        ',variables('kubernetesHyperkubeSpec'),' \\\n          /hyperkube kubelet \\\n            --api-servers=\"https://',variables('masterPrivateIp'),':443\" \\\n            --kubeconfig=/var/lib/kubelet/kubeconfig \\\n            --address=0.0.0.0 \\\n            --allow-privileged=true \\\n            --enable-server \\\n            --enable-debugging-handlers \\\n            --config=/etc/kubernetes/manifests \\\n            --cluster-dns=',variables('kubeDnsServiceIP'),' \\\n            --cluster-domain=cluster.local \\\n            --register-schedulable=false \\\n            --cloud-provider=azure \\\n            --cloud-config=/etc/kubernetes/azure.json \\\n            --v=2\n    ExecStop=/usr/bin/docker stop -t 2 kubelet\n\n    [Install]\n    WantedBy=multi-user.target\n\n- path: \"/opt/azure/containers/provision.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    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\n'))]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "keyData": "[variables('sshPublicKeyData')]",
                  "path": "[variables('sshKeyPath')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('osImageOffer')]",
            "publisher": "[variables('osImagePublisher')]",
            "sku": "[variables('osImageSku')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'-osdisk')]",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('masterStorageAccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'vhds/',variables('masterVMNamePrefix'),copyIndex(),'-osdisk.vhd')]"
            }
          }
        }
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('masterVMNamePrefix'), copyIndex())]"
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('masterVMNamePrefix'), copyIndex())]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'/cse', copyIndex())]",
      "properties": {
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "commandToExecute": "[concat('/usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/provision.sh ',variables('tenantID'),' ',variables('subscriptionId'),' ',variables('resourceGroup'),' ',variables('location'),' ',variables('subnetName'),' ',variables('nsgName'),' ',variables('virtualNetworkName'),' ',variables('routeTableName'),' ',variables('primaryAvailablitySetName'),' ',variables('servicePrincipalClientId'),' ',variables('servicePrincipalClientSecret'),' ',variables('clientPrivateKey'),' ',variables('apiServerPrivateKey'),' ',variables('caCertificate'),' ',variables('masterFqdnPrefix'),' ',variables('kubeConfigCertificate'),' ',variables('kubeConfigPrivateKey'),' ',variables('username'),' >> /var/log/azure/cluster-provision.log 2>&1 &\" &')]"
        },
        "publisher": "Microsoft.OSTCExtensions",
        "settings": {},
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.5"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    }
  ],
  "outputs": {
    "masterFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))).dnsSettings.fqdn]"
    }
  }
}
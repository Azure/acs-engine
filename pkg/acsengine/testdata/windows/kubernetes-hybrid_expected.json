{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "agentpool1Count": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 3,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentpool1Offset": {
      "allowedValues": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99
      ],
      "defaultValue": 0,
      "metadata": {
        "description": "The offset into the agent pool where to start creating agents.  This value can be from 0 to 99, but must be less than agentCount"
      },
      "type": "int"
    },
    "agentpool1Subnet": {
      "defaultValue": "10.240.0.0/16",
      "metadata": {
        "description": "Sets the subnet of agent pool 'agentpool1'."
      },
      "type": "string"
    },
    "agentpool1VMSize": {
      "allowedValues": [
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "apiServerCertificate": {
      "metadata": {
        "description": "The base 64 server certificate used on the master"
      },
      "type": "string"
    },
    "apiServerPrivateKey": {
      "metadata": {
        "description": "The base 64 server private key used on the master."
      },
      "type": "securestring"
    },
    "caCertificate": {
      "metadata": {
        "description": "The base 64 certificate authority certificate"
      },
      "type": "string"
    },
    "clientCertificate": {
      "metadata": {
        "description": "The base 64 client certificate used to communicate with the master"
      },
      "type": "string"
    },
    "clientPrivateKey": {
      "metadata": {
        "description": "The base 64 client private key used to communicate with the master"
      },
      "type": "securestring"
    },
    "dockerEngineDownloadRepo": {
      "defaultValue": "https://apt.dockerproject.org/repo",
      "metadata": {
        "description": "The docker engine download url for kubernetes."
      },
      "type": "string"
    },
    "firstConsecutiveStaticIP": {
      "defaultValue": "10.240.255.5",
      "metadata": {
        "description": "Sets the static IP of the first master"
      },
      "type": "string"
    },
    "kubeConfigCertificate": {
      "metadata": {
        "description": "The base 64 certificate used by cli to communicate with the master"
      },
      "type": "string"
    },
    "kubeConfigPrivateKey": {
      "metadata": {
        "description": "The base 64 private key used by cli to communicate with the master"
      },
      "type": "securestring"
    },
    "kubernetesAddonManagerSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for hyperkube."
      },
      "type": "string"
    },
    "kubernetesAddonResizerSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for addon-resizer."
      },
      "type": "string"
    },
    "kubernetesDNSMasqSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for kube-dnsmasq-amd64."
      },
      "type": "string"
    },
    "kubernetesDashboardSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for kubernetes-dashboard-amd64."
      },
      "type": "string"
    },
    "kubernetesExecHealthzSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for exechealthz-amd64."
      },
      "type": "string"
    },
    "kubernetesHeapsterSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for heapster."
      },
      "type": "string"
    },
    "kubernetesHyperkubeSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for hyperkube."
      },
      "type": "string"
    },
    "kubernetesKubeDNSSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for kubedns-amd64."
      },
      "type": "string"
    },
    "kubernetesPodInfraContainerSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for pod infra."
      },
      "type": "string"
    },
    "linuxAdminUsername": {
      "metadata": {
        "description": "User name for the Linux Virtual Machines (SSH or Password)."
      },
      "type": "string"
    },
    "linuxpool1Count": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 2,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "linuxpool1Offset": {
      "allowedValues": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99
      ],
      "defaultValue": 0,
      "metadata": {
        "description": "The offset into the agent pool where to start creating agents.  This value can be from 0 to 99, but must be less than agentCount"
      },
      "type": "int"
    },
    "linuxpool1Subnet": {
      "defaultValue": "10.240.0.0/16",
      "metadata": {
        "description": "Sets the subnet of agent pool 'linuxpool1'."
      },
      "type": "string"
    },
    "linuxpool1VMSize": {
      "allowedValues": [
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "masterEndpointDNSNamePrefix": {
      "metadata": {
        "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      },
      "type": "string"
    },
    "masterSubnet": {
      "defaultValue": "10.240.0.0/16",
      "metadata": {
        "description": "Sets the subnet of the master node(s)."
      },
      "type": "string"
    },
    "masterVMSize": {
      "allowedValues": [
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "nameSuffix": {
      "defaultValue": "31559618",
      "metadata": {
        "description": "A string hash of the master DNS name to uniquely identify the cluster."
      },
      "type": "string"
    },
    "networkPolicy": {
      "allowedValues": [
        "none",
        "calico"
      ],
      "defaultValue": "none",
      "metadata": {
        "description": "The network policy enforcement to use (none|calico)"
      },
      "type": "string"
    },
    "servicePrincipalClientId": {
      "metadata": {
        "description": "Client ID (used by cloudprovider)"
      },
      "type": "securestring"
    },
    "servicePrincipalClientSecret": {
      "metadata": {
        "description": "The Service Principal Client Secret."
      },
      "type": "securestring"
    },
    "sshRSAPublicKey": {
      "metadata": {
        "description": "SSH public key used for auth to all Linux machines.  Not Required.  If not set, you must provide a password key."
      },
      "type": "string"
    },
    "targetEnvironment": {
      "defaultValue": "AzureCloud",
      "metadata": {
        "description": "The azure deploy environment. Currently support: AzureCloud, AzureChinaCloud"
      },
      "type": "string"
    },
    "windowsAdminPassword": {
      "metadata": {
        "description": "Password for the Windows Swarm Agent Virtual Machines."
      },
      "type": "securestring"
    },
    "windowsAdminUsername": {
      "metadata": {
        "description": "User name for the Windows Swarm Agent Virtual Machines (Password Only Supported)."
      },
      "type": "string"
    }
  },
  "variables": {
    "agentWindowsOffer": "WindowsServer",
    "agentWindowsPublisher": "MicrosoftWindowsServer",
    "agentWindowsSku": "2016-Datacenter-with-Containers",
    "agentWindowsVersion": "2016.0.20170127",
    "agentpool1AccountName": "[concat(variables('storageAccountBaseName'), 'agnt1')]",
    "agentpool1AvailabilitySet": "[concat('agentpool1-availabilitySet-', variables('nameSuffix'))]",
    "agentpool1Count": "[parameters('agentpool1Count')]",
    "agentpool1Index": 1,
    "agentpool1Offset": "[parameters('agentpool1Offset')]",
    "agentpool1StorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),variables('agentpool1Index'))]",
    "agentpool1StorageAccountsCount": "[add(div(variables('agentpool1Count'), variables('maxVMsPerStorageAccount')), mod(add(mod(variables('agentpool1Count'), variables('maxVMsPerStorageAccount')),2), add(mod(variables('agentpool1Count'), variables('maxVMsPerStorageAccount')),1)))]",
    "agentpool1SubnetName": "[variables('subnetName')]",
    "agentpool1VMNamePrefix": "[concat(substring(variables('nameSuffix'), 0, 5), 'acs', add(900,variables('agentpool1Index')))]",
    "agentpool1VMSize": "[parameters('agentpool1VMSize')]",
    "agentpool1VnetSubnetID": "[variables('vnetSubnetID')]",
    "apiServerCertificate": "[parameters('apiServerCertificate')]",
    "apiServerPrivateKey": "[parameters('apiServerPrivateKey')]",
    "apiVersionDefault": "2016-03-30",
    "apiVersionStorage": "2015-06-15",
    "caCertificate": "[parameters('caCertificate')]",
    "clientCertificate": "[parameters('clientCertificate')]",
    "clientPrivateKey": "[parameters('clientPrivateKey')]",
    "dockerEngineDownloadRepo": "[parameters('dockerEngineDownloadRepo')]",
    "dockerEngineVersion": "1.12.*",
    "kubeConfigCertificate": "[parameters('kubeConfigCertificate')]",
    "kubeConfigPrivateKey": "[parameters('kubeConfigPrivateKey')]",
    "kubeDnsServiceIp": "10.0.0.10",
    "kubeServiceCidr": "10.0.0.0/16",
    "kubernetesAddonManagerSpec": "[parameters('kubernetesAddonManagerSpec')]",
    "kubernetesAddonResizerSpec": "[parameters('kubernetesAddonResizerSpec')]",
    "kubernetesDNSMasqSpec": "[parameters('kubernetesDNSMasqSpec')]",
    "kubernetesDashboardSpec": "[parameters('kubernetesDashboardSpec')]",
    "kubernetesExecHealthzSpec": "[parameters('kubernetesExecHealthzSpec')]",
    "kubernetesHeapsterSpec": "[parameters('kubernetesHeapsterSpec')]",
    "kubernetesHyperkubeSpec": "[parameters('kubernetesHyperkubeSpec')]",
    "kubernetesKubeDNSSpec": "[parameters('kubernetesKubeDNSSpec')]",
    "kubernetesPodInfraContainerSpec": "[parameters('kubernetesPodInfraContainerSpec')]",
    "linuxpool1AccountName": "[concat(variables('storageAccountBaseName'), 'agnt0')]",
    "linuxpool1AvailabilitySet": "[concat('linuxpool1-availabilitySet-', variables('nameSuffix'))]",
    "linuxpool1Count": "[parameters('linuxpool1Count')]",
    "linuxpool1Index": 0,
    "linuxpool1Offset": "[parameters('linuxpool1Offset')]",
    "linuxpool1StorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),variables('linuxpool1Index'))]",
    "linuxpool1StorageAccountsCount": "[add(div(variables('linuxpool1Count'), variables('maxVMsPerStorageAccount')), mod(add(mod(variables('linuxpool1Count'), variables('maxVMsPerStorageAccount')),2), add(mod(variables('linuxpool1Count'), variables('maxVMsPerStorageAccount')),1)))]",
    "linuxpool1SubnetName": "[variables('subnetName')]",
    "linuxpool1VMNamePrefix": "[concat(variables('orchestratorName'), '-linuxpool1-', variables('nameSuffix'), '-')]",
    "linuxpool1VMSize": "[parameters('linuxpool1VMSize')]",
    "linuxpool1VnetSubnetID": "[variables('vnetSubnetID')]",
    "location": "[resourceGroup().location]",
    "masterAvailabilitySet": "[concat('master-availabilityset-', variables('nameSuffix'))]",
    "masterCount": 1,
    "masterEtcdClientPort": 2379,
    "masterEtcdClientURLs": [
      "[concat('http://', variables('masterPrivateIpAddrs')[0], ':', variables('masterEtcdClientPort'))]",
      "[concat('http://', variables('masterPrivateIpAddrs')[1], ':', variables('masterEtcdClientPort'))]",
      "[concat('http://', variables('masterPrivateIpAddrs')[2], ':', variables('masterEtcdClientPort'))]",
      "[concat('http://', variables('masterPrivateIpAddrs')[3], ':', variables('masterEtcdClientPort'))]",
      "[concat('http://', variables('masterPrivateIpAddrs')[4], ':', variables('masterEtcdClientPort'))]"
    ],
    "masterEtcdClusterStates": [
      "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0])]",
      "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0], ',', variables('masterVMNames')[1], '=', variables('masterEtcdPeerURLs')[1], ',', variables('masterVMNames')[2], '=', variables('masterEtcdPeerURLs')[2])]",
      "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0], ',', variables('masterVMNames')[1], '=', variables('masterEtcdPeerURLs')[1], ',', variables('masterVMNames')[2], '=', variables('masterEtcdPeerURLs')[2], ',', variables('masterVMNames')[3], '=', variables('masterEtcdPeerURLs')[3], ',', variables('masterVMNames')[4], '=', variables('masterEtcdPeerURLs')[4])]"
    ],
    "masterEtcdPeerURLs": [
      "[concat('http://', variables('masterPrivateIpAddrs')[0], ':', variables('masterEtcdServerPort'))]",
      "[concat('http://', variables('masterPrivateIpAddrs')[1], ':', variables('masterEtcdServerPort'))]",
      "[concat('http://', variables('masterPrivateIpAddrs')[2], ':', variables('masterEtcdServerPort'))]",
      "[concat('http://', variables('masterPrivateIpAddrs')[3], ':', variables('masterEtcdServerPort'))]",
      "[concat('http://', variables('masterPrivateIpAddrs')[4], ':', variables('masterEtcdServerPort'))]"
    ],
    "masterEtcdServerPort": 2380,
    "masterFirstAddrComment": "these MasterFirstAddrComment are used to place multiple masters consecutively in the address space",
    "masterFirstAddrOctet4": "[variables('masterFirstAddrOctets')[3]]",
    "masterFirstAddrOctets": "[split(parameters('firstConsecutiveStaticIP'),'.')]",
    "masterFirstAddrPrefix": "[concat(variables('masterFirstAddrOctets')[0],'.',variables('masterFirstAddrOctets')[1],'.',variables('masterFirstAddrOctets')[2],'.')]",
    "masterFqdnPrefix": "[toLower(parameters('masterEndpointDNSNamePrefix'))]",
    "masterInternalLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterInternalLbName'))]",
    "masterInternalLbIPConfigID": "[concat(variables('masterInternalLbID'),'/frontendIPConfigurations/', variables('masterInternalLbIPConfigName'))]",
    "masterInternalLbIPConfigName": "[concat(variables('orchestratorName'), '-master-internal-lbFrontEnd-', variables('nameSuffix'))]",
    "masterInternalLbIPOffset": 10,
    "masterInternalLbIp": "[concat(variables('masterFirstAddrPrefix'), add(variables('masterInternalLbIPOffset'), int(variables('masterFirstAddrOctet4'))))]",
    "masterInternalLbName": "[concat(variables('orchestratorName'), '-master-internal-lb-', variables('nameSuffix'))]",
    "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
    "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
    "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
    "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
    "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
    "masterPrivateIp": "[parameters('firstConsecutiveStaticIP')]",
    "masterPrivateIpAddrs": [
      "[concat(variables('masterFirstAddrPrefix'), add(0, int(variables('masterFirstAddrOctet4'))))]",
      "[concat(variables('masterFirstAddrPrefix'), add(1, int(variables('masterFirstAddrOctet4'))))]",
      "[concat(variables('masterFirstAddrPrefix'), add(2, int(variables('masterFirstAddrOctet4'))))]",
      "[concat(variables('masterFirstAddrPrefix'), add(3, int(variables('masterFirstAddrOctet4'))))]",
      "[concat(variables('masterFirstAddrPrefix'), add(4, int(variables('masterFirstAddrOctet4'))))]"
    ],
    "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterFqdnPrefix'), '-', variables('nameSuffix'))]",
    "masterStorageAccountName": "[concat(variables('storageAccountBaseName'), 'mstr0')]",
    "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
    "masterVMNames": [
      "[concat(variables('masterVMNamePrefix'), '0')]",
      "[concat(variables('masterVMNamePrefix'), '1')]",
      "[concat(variables('masterVMNamePrefix'), '2')]",
      "[concat(variables('masterVMNamePrefix'), '3')]",
      "[concat(variables('masterVMNamePrefix'), '4')]"
    ],
    "masterVMSize": "[parameters('masterVMSize')]",
    "maxStorageAccountsPerAgent": "[div(variables('maxVMsPerPool'),variables('maxVMsPerStorageAccount'))]",
    "maxVMsPerPool": 100,
    "maxVMsPerStorageAccount": 20,
    "nameSuffix": "[parameters('nameSuffix')]",
    "networkPolicy": "[parameters('networkPolicy')]",
    "nsgID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nsgName'))]",
    "nsgName": "[concat(variables('masterVMNamePrefix'), 'nsg')]",
    "orchestratorName": "k8s",
    "osImageOffer": "UbuntuServer",
    "osImagePublisher": "Canonical",
    "osImageSKU": "16.04.0-LTS",
    "osImageVersion": "16.04.201606270",
    "primaryAvailablitySetName": "[concat('linuxpool1-availabilitySet-',variables('nameSuffix'))]",
    "provisionScript": "H4sIAAAJbogA/9QZWXubSPKdX9HBethjEFLiK5rR7Eck7GEtS14d3i+byWha0FiMEfDRjW0l6/++1d2cAineJC+jhwS67qOrivLRK33lBfoK07WiHH39TzlCs7kxnaOZOZiaczQ05gbSkDn4ZYKG1sx4NzKH38QfBFx4xHcocsMY/Y4/JTFp/0HD4Hdlbo6N8XxpDftq63P3WVVmi3djcz4bTK2buTUZp5DXAJmas8liOjCXl9PJ4oafvoHT0WRgcET+fpzT87cTeIPHf0+mV0uwbDG15u8L2lOA3lrT+cIYLVMsfnzGBU0Wc3M553bzo3M4upla18b0/dK4NayR8c4acV4zKectl2pOby1QDfDGA+sGeA5GllkY1jmEI90u8LgHrhbvzJE553i3BihyZb4XMO4DCNMlgMwxqD4ZXwO1AL0pmXozGVkDScH9Ab6/xpSRGIWBv0WU2DFhVDFuLK6POa2J4W4bGMuBOZ1bFxY4Vzihy/11bczmQHHxr6Fwd/cs1XYwGV9YlzWS8yo4E8D9ZQyvrfECNBDB7Ug9LRc1qoU8isgmYtsfEFuTAD0ShGOCgpCBTfwIbYSFiueiDx/QK6R9QsC2kdezij5+/FHwURD8iL0OkbpXbBAGWioaU5psvOAuFQYgh4DanEkj+fLGmP/SV3XCbP0+WZE4IIxQ3SYxozqOPEriBxK378lWFUxYmNjrvXoLbs8S015vQgd1To+PX4gePgYoDkPW4/+8iEa6Zb8P/4ug6pDTY6RpDrHBE+jnL/IlPiUv8fmuvx/D+D73t+spTRfkoLNt3yMBk57OvbyPCSha9e9BxJpnD2BnPm1A2e/RA/wU4z+Lqbn85wyqZLP5RaEtGb5DVbO3CV5PoDoSZuinn5A5uUhToYbxWQRftf0wcdQeoNSL2bP6g0RiJMABswCP88qbRA6nyYrasRcxLwwyrHrnyNExdgYiCXLc/fW6TjQTNfMLhLKI58QxoWES2+QyDpNIklb7V47ph+A6MEMiZe2sbCkEc4w3pGxlASZ2EntsK+QUWM19L6d6qLDcaYOFDWHCyByvfFLglnpjjhfF3gbHW+MBez5eeT6oMyvz39c8ISeeFUiYbx1ezPEQQdqVppdvm1YoYUh74h3pEXtMzCz8UtnMhyKNYhKFMUM0sW1CqZv4yPYT0RHWBPtsrbhJYPOAIhJQuH9XkvQvf0XyAqSs3DAJnH5XHHEJHvIC9Lnbbp92Os8/IicUEP7jXQ1pBOkJjXWeLb4Y+zKVPuaIeVPLfhVRnQpoFRN8n59AVc0eqU9IhKReThjIii1UaJXZIS0gqJMKrwgWuK9yhbmqTmjzCn5AU1kbM5MC8EdK43iOaPReQBn2/ZLb/bRv5iyeIFbdXZPgv2elCAmEdkwY7yg3fnIHHs/DQgnY5MGF0n/Lam4+UY0Wl9a43/6bvgfCJ1ddRaL8OsTFic9EeHzCdqUPhVmTiNEG0Ue/DSeDK+iIk5v5DOQdlV+5kKMXCLHDwPXuMitD37O3uaSvGJD474jPWXLsofmhMRxOxrO+Cvno2aEmxW5w1N7iDdwJeepgsgkDsFucqjvEsm3VupYDeVfIGRgwz06Wi+mor64Zi2hP12P82L7z2DpZJTBGgWjGG7wdbvQoDv+AHJLi9fQ/fExW7go7Jyd41V2dud2O67hvVm/enpyfHJ913fNO9zU5f3uuP7xud/Q7whjMHRokXMyIU1YtzUJRr/V1SAX4nGorDFENHE2orm1wgO9IrFauxIdyWZYzOri6j1L/NXhdet6B3uuH2Ek9irgfaQWHVw8hmFcQiKpwbbWEZD/oFT7S5GRXROBZb30WDEAhjc5GMIJAv4u3qPs6e4SZxMdw0OGkRURKlBVZeeEQFzOb+wqjNvieIF4cy1aJoT6GfHkgztcaGG+Q5u43b7+Sabmo6CrSHiIZMPodQlkrPXbg7SKUqgOEQnsI/WRD5AUBbL2XPcEcVgKHEUvB6ROA1f3urynCExzy+5Ay6hfqqmx1JrOdoqpt4XpseDmnLIwQaC6jykMUu0h/wNDNvBU3yckK2g4hDFH8DkraujipYINAGB5haElbyB6eJaB8nMnr3tSS3za05Fe19uYFbtgQd9naQChLKGr9o5qDgv6gco0hlDxTuWmd2k3usk3f3vsr/PY3/4piWe8WCpYSsmjUjVl0JZva/rhmXa85sE09kTyxGNssH8UOMIZXLUU/IKCMVbfAyL7uK0Of7CEH0uw7Tn57KNJJVeOpWsEXklTITl7GOmqJdSP7ItSFYc152Gx8p4ZTzck0N3JRu/m/e/UiCt/PdzCZo3yx8icy7+XTd0XMl25hSff/+yY+wjeluIgDMdbleVys84bWtA8j0IborXyZp7e5zB3EC2tk9lsVQl0OiwJxc+94MdIiVEUprcRaVV6lnVYhuVc8NjF6IXqJPd+InHU6zcw48LQKFKQCzLejs8R1vae+3HXgKGrLTQwMqKpSysf6AkQkqMGRB2svwAOxK2kKcaMUm9Okb17bDlSllF4wSnpUlDk/vLvjizXs8q9WuRFG8K0fJWnJg9e/P5VWdYqmaQqwvIX5H7Kjhx66SlpKaE/RsrLSk+4hMfNcz8aMaDhh65CvJ+BDgOEe+lVtVVfLv6qpRH5leyib71ulTXO7le1E2q3CaiAL8IYIliVk4Ce+Bp6YVEw+p4qlWtZJOJR/SOyCYJ7feIFA2CcsiWOYD7VMUB3j3gucHpLXSOFChGJN7ErShDKp0p7gX3Jq7srm1XtqT0p4T7aNBPClB4gq+rkx/4+g2QV7c4XmWaI98apxlK3EceCINa1Sns+Uhg9SpdLplWp7LjEUf7L4mrX+Tv2SuVxex5ROzGwy3WneYtf8Hf4qIe+QlS4woAZEYDPZ2WQo/wsAAP//Uogaz80bAAA=",
    "registerSchedulable": "false",
    "resourceGroup": "[resourceGroup().name]",
    "routeTableID": "[resourceId('Microsoft.Network/routeTables', variables('routeTableName'))]",
    "routeTableName": "[concat(variables('masterVMNamePrefix'),'routetable')]",
    "servicePrincipalClientId": "[parameters('servicePrincipalClientId')]",
    "servicePrincipalClientSecret": "[parameters('servicePrincipalClientSecret')]",
    "singleQuote": "'",
    "sshKeyPath": "[concat('/home/',variables('username'),'/.ssh/authorized_keys')]",
    "sshNatPorts": [
      22,
      2201,
      2202,
      2203,
      2204
    ],
    "sshPublicKeyData": "[parameters('sshRSAPublicKey')]",
    "storageAccountBaseName": "[uniqueString(concat(variables('masterFqdnPrefix'),resourceGroup().location))]",
    "storageAccountPrefixes": [
      "0",
      "6",
      "c",
      "i",
      "o",
      "u",
      "1",
      "7",
      "d",
      "j",
      "p",
      "v",
      "2",
      "8",
      "e",
      "k",
      "q",
      "w",
      "3",
      "9",
      "f",
      "l",
      "r",
      "x",
      "4",
      "a",
      "g",
      "m",
      "s",
      "y",
      "5",
      "b",
      "h",
      "n",
      "t",
      "z"
    ],
    "storageAccountPrefixesCount": "[length(variables('storageAccountPrefixes'))]",
    "subnet": "[parameters('masterSubnet')]",
    "subnetName": "[concat(variables('orchestratorName'), '-subnet')]",
    "subscriptionId": "[subscription().subscriptionId]",
    "targetEnvironment": "[parameters('targetEnvironment')]",
    "tenantId": "[subscription().tenantId]",
    "username": "[parameters('linuxAdminUsername')]",
    "virtualNetworkName": "[concat(variables('orchestratorName'), '-vnet-', variables('nameSuffix'))]",
    "vmSizesMap": {
      "Basic_A2": {
        "storageAccountType": "Standard_LRS"
      },
      "Basic_A3": {
        "storageAccountType": "Standard_LRS"
      },
      "Basic_A4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A10": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A7": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A9": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D15_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D5_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_DS11": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS15_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS5_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F16": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F16s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F2s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F4s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F8s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_G1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_GS1": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS5": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_H16": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16m": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16mr": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16r": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H8m": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC24": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC24r": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV24": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV6": {
        "storageAccountType": "Standard_LRS"
      }
    },
    "vmsPerStorageAccount": 20,
    "vnetCidr": "10.0.0.0/8",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "vnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    "windowsAdminPassword": "[parameters('windowsAdminPassword')]",
    "windowsAdminUsername": "[parameters('windowsAdminUsername')]",
    "windowsCustomScriptSuffix": " $inputFile = '%SYSTEMDRIVE%\\AzureData\\CustomData.bin' ; $outputFile = '%SYSTEMDRIVE%\\AzureData\\CustomDataSetupScript.ps1' ; Copy-Item $inputFile $outputFile ; Invoke-Expression('{0} {1}' -f $outputFile, $arguments) ; "
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[sub(variables('linuxpool1Count'), variables('linuxpool1Offset'))]",
        "name": "loop"
      },
      "dependsOn": [
        "[variables('vnetID')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('linuxpool1VMNamePrefix'), 'nic-', copyIndex(variables('linuxpool1Offset')))]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('linuxpool1VnetSubnetID')]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('linuxpool1StorageAccountsCount')]",
        "name": "loop"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('linuxpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('linuxpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('linuxpool1AccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('linuxpool1VMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('linuxpool1AvailabilitySet')]",
      "properties": {},
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[sub(variables('linuxpool1Count'), variables('linuxpool1Offset'))]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(div(copyIndex(variables('linuxpool1Offset')),variables('maxVMsPerStorageAccount')),variables('linuxpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(div(copyIndex(variables('linuxpool1Offset')),variables('maxVMsPerStorageAccount')),variables('linuxpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('linuxpool1AccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('linuxpool1VMNamePrefix'), 'nic-', copyIndex(variables('linuxpool1Offset')))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('linuxpool1AvailabilitySet'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('linuxpool1VMNamePrefix'), copyIndex(variables('linuxpool1Offset')))]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('linuxpool1AvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('linuxpool1VMSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('linuxpool1VMNamePrefix'), 'nic-', copyIndex(variables('linuxpool1Offset'))))]"
            }
          ]
        },
        "osProfile": {
          "adminUsername": "[variables('username')]",
          "computername": "[concat(variables('linuxpool1VMNamePrefix'), copyIndex(variables('linuxpool1Offset')))]",
          "customData": "[base64(concat('#cloud-config\n\n# { { { variable } } }\n\nruncmd:\n- apt-get update\n- apt-get install -y apt-transport-https ca-certificates\n- for i in 1 2 3 4 5; do curl --max-time 60 -fsSL https://apt.dockerproject.org/gpg | apt-key add -; [ $? -eq 0 ] && break || sleep 5; done\n- echo \"deb ',variables('dockerEngineDownloadRepo'),' ubuntu-xenial main\" | sudo tee /etc/apt/sources.list.d/docker.list\n- \"echo \\\"Package: docker-engine\\nPin: version ',variables('dockerEngineVersion'),'\\nPin-Priority: 550\\n\\\" > /etc/apt/preferences.d/docker.pref\"\n- apt-get update\n- apt-get install -y docker-engine\n- systemctl restart docker\n- mkdir -p /etc/kubernetes/manifests\n- usermod -aG docker ',variables('username'),'\n\nwrite_files:\n- path: \"/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    MountFlags=shared\n\n- path: \"/etc/systemd/system/docker.service.d/exec_start.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    ExecStart=\n    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay --log-driver=journald\n\n- path: \"/etc/docker/daemon.json\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    {\n      \"live-restore\": true\n    }\n\n- path: \"/etc/kubernetes/certs/ca.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('caCertificate'),'\n\n- path: \"/etc/kubernetes/certs/apiserver.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('apiserverCertificate'),'\n\n- path: \"/etc/kubernetes/certs/client.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('clientCertificate'),'\n\n- path: \"/var/lib/kubelet/kubeconfig\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - name: localcluster\n      cluster:\n        certificate-authority: /etc/kubernetes/certs/ca.crt\n        server: https://',variables('masterInternalLbIp'),':443\n    users:\n    - name: client\n      user:\n        client-certificate: /etc/kubernetes/certs/client.crt\n        client-key: /etc/kubernetes/certs/client.key\n    contexts:\n    - context:\n        cluster: localcluster\n        user: client\n      name: localclustercontext\n    current-context: localclustercontext\n\n- path: \"/etc/systemd/system/kubectl-extract.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=Kubectl extraction\n    Requires=docker.service\n    After=docker.service\n    ConditionPathExists=!/usr/local/bin/kubectl\n\n    [Service]\n    TimeoutStartSec=0\n    Restart=on-failure\n    RestartSec=5s\n    ExecStartPre=/bin/mkdir -p /tmp/kubectldir\n    ExecStartPre=/usr/bin/docker pull ',variables('kubernetesHyperkubeSpec'),'\n    ExecStartPre=/usr/bin/docker run --rm -v /tmp/kubectldir:/opt/kubectldir ',variables('kubernetesHyperkubeSpec'),' /bin/bash -c \"cp /hyperkube /opt/kubectldir/\"\n    ExecStartPre=/bin/mv /tmp/kubectldir/hyperkube /usr/local/bin/kubectl\n    ExecStart=/bin/chmod a+x /usr/local/bin/kubectl\n\n    [Install]\n    WantedBy=multi-user.target\n\n- path: \"/etc/default/kubelet\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    KUBELET_CLUSTER_DNS=',variables('kubeDnsServiceIP'),'\n    KUBELET_API_SERVERS=https://',variables('masterInternalLbIp'),':443\n    KUBELET_IMAGE=',variables('kubernetesHyperkubeSpec'),'\n    KUBELET_NETWORK_PLUGIN=kubenet\n    DOCKER_OPTS=\n    CUSTOM_CMD=/bin/true\n    KUBELET_REGISTER_SCHEDULABLE=true\n    KUBELET_NODE_LABELS=role=agent\n    KUBELET_POD_INFRA_CONTAINER_IMAGE=',variables('kubernetesPodInfraContainerSpec'),'\n\n- path: \"/etc/systemd/system/kubelet.service\"\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/5RUUW/aMBB+51dEVV9Dpj0i5YFC2iEYIALbQ1chEx+Jh2NnZzuMTf3vc0IoMdBJFVJkn7/vu/vOh59XgumXzhBUgqzQTIpwbDbAQXcW8MswBBVSmewAuwqwZAl0+lsNeBnsPMfH1YvlKU1Qh4TvyUF1IlEylCIHoR8ZhzAAnQQUtsRwHeyaXNFvSOKKNUeL2DARbIjKvEAWOiB/DEKQSKEJE4DqROqq7AYv31GGnl94QUkw4Gzznxy5NEJ7vm/X9Ar/EYGc7MBXGUG41jnTwsAorHnH5nlohPej41kBATrMpNLNtmDU2SIrbetSq34MlJKb3NZAoexVn4uwOqhe/UF5cVLVZrP23ha4v4Goqj+WGPQuAu8TGrstRhPpNY25QZNp721xJVzNSSWBtjmgrK4buDansHQJbqAi3A9ng3G0WM/my7hme9793/HqIZpEy/Xoa/8pem3CnhdkhwKw4nunkTgdVVlJwfxq+u1Ehndnkf58tI6jxbdoEb/eOYRKxE7xlqXXTTufOZRCUp+JLRL/bfx9lpMU2hnns+F6NH1c9NeD2XTZH02tv6MVNz+h1P6bVfipW//cM87lvjVnoUYDDgIE2XBoHN86obAxacpE6mdEUG7b4qBOzi9uNSeCbe2DcQHmRtlHxqdChWejg8kqXlpzw2n8ehsuc9ujsNl2uUwId4AIKauRKsmAGl4V3kqwiJ5GdYZ48CUarib9h0nkZhKSgm9pwNuFTWfDaG3R0eSqMGmobassGbVvZv2S3QC805sa3v2ppHDvqgq3BuJoCg8flMkIw4IJP7eWQltizlRipFH+BhlN3TKt0F7izi+4sTfcdh4tv88W4/V8snoaTV3zZfi58y8AAP//lFb2TV8GAAA=\n\n- path: \"/opt/azure/containers/kubelet.sh\"\n  permissions: \"0755\"\n  owner: \"root\"\n  content: |\n    #!/bin/bash\n    exit 0\n\n- path: \"/opt/azure/containers/provision.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionScript'),'\n'))]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "keyData": "[parameters('sshRSAPublicKey')]",
                  "path": "[variables('sshKeyPath')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('osImageOffer')]",
            "publisher": "[variables('osImagePublisher')]",
            "sku": "[variables('osImageSKU')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "[concat(variables('linuxpool1VMNamePrefix'), copyIndex(variables('linuxpool1Offset')),'-osdisk')]",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(div(copyIndex(variables('linuxpool1Offset')),variables('maxVMsPerStorageAccount')),variables('linuxpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(div(copyIndex(variables('linuxpool1Offset')),variables('maxVMsPerStorageAccount')),variables('linuxpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('linuxpool1AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk/', variables('linuxpool1VMNamePrefix'), copyIndex(variables('linuxpool1Offset')), '-osdisk.vhd')]"
            }
          }
        }
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('linuxpool1VMNamePrefix'), copyIndex(variables('linuxpool1Offset')))]"
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[sub(variables('linuxpool1Count'), variables('linuxpool1Offset'))]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('linuxpool1VMNamePrefix'), copyIndex(variables('linuxpool1Offset')))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('linuxpool1VMNamePrefix'), copyIndex(variables('linuxpool1Offset')),'/cse', copyIndex(variables('linuxpool1Offset')))]",
      "properties": {
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "commandToExecute": "[concat('/usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/provision.sh ',variables('tenantID'),' ',variables('subscriptionId'),' ',variables('resourceGroup'),' ',variables('location'),' ',variables('subnetName'),' ',variables('nsgName'),' ',variables('virtualNetworkName'),' ',variables('routeTableName'),' ',variables('primaryAvailablitySetName'),' ',variables('servicePrincipalClientId'),' ',variables('servicePrincipalClientSecret'),' ',variables('clientPrivateKey'),' ',variables('targetEnvironment'),' ',variables('networkPolicy'),' >> /var/log/azure/cluster-provision.log 2>&1 &\" &')]"
        },
        "publisher": "Microsoft.OSTCExtensions",
        "settings": {},
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.5"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[sub(variables('agentpool1Count'), variables('agentpool1Offset'))]",
        "name": "loop"
      },
      "dependsOn": [
        "[variables('vnetID')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpool1VMNamePrefix'), 'nicp-', copyIndex(variables('agentpool1Offset'))]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('agentpool1VnetSubnetID')]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentpool1StorageAccountsCount')]",
        "name": "loop"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpool1AccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentpool1VMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('agentpool1AvailabilitySet')]",
      "properties": {},
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[sub(variables('agentpool1Count'), variables('agentpool1Offset'))]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(div(copyIndex(variables('agentpool1Offset')),variables('maxVMsPerStorageAccount')),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(div(copyIndex(variables('agentpool1Offset')),variables('maxVMsPerStorageAccount')),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpool1AccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('agentpool1VMNamePrefix'), 'nicp-', copyIndex(variables('agentpool1Offset')))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('agentpool1AvailabilitySet'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpool1VMNamePrefix'), copyIndex(variables('agentpool1Offset')))]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('agentpool1AvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('agentpool1VMSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('agentpool1VMNamePrefix'), 'nicp-', copyIndex(variables('agentpool1Offset'))))]",
              "properties": {
                "primary": true
              }
            }
          ]
        },
        "osProfile": {
          "adminPassword": "[variables('windowsAdminPassword')]",
          "adminUsername": "[variables('windowsAdminUsername')]",
          "computername": "[concat(variables('agentpool1VMNamePrefix'), copyIndex(variables('agentpool1Offset')))]",
          "customData": "[base64(concat('<#\n    .SYNOPSIS\n        Provisions VM as a Kubernetes agent.\n\n    .DESCRIPTION\n        Provisions VM as a Kubernetes agent.\n#>\n[CmdletBinding(DefaultParameterSetName=\"Standard\")]\nparam(\n    [string]\n    [ValidateNotNullOrEmpty()]\n    $MasterIP,\n\n    [parameter()]\n    [ValidateNotNullOrEmpty()]\n    $KubeDnsServiceIp,\n\n    [parameter(Mandatory=$true)]\n    [ValidateNotNullOrEmpty()]\n    $MasterFQDNPrefix,\n\n    [parameter(Mandatory=$true)]\n    [ValidateNotNullOrEmpty()]\n    $Location,\n\n    [parameter(Mandatory=$true)]\n    [ValidateNotNullOrEmpty()]\n    $AgentKey,\n\n    [parameter(Mandatory=$true)]\n    [ValidateNotNullOrEmpty()]\n    $AzureHostname,\n\n    [parameter(Mandatory=$true)]\n    [ValidateNotNullOrEmpty()]\n    $AADClientId,\n\n    [parameter(Mandatory=$true)]\n    [ValidateNotNullOrEmpty()]\n    $AADClientSecret\n)\n\n$global:CACertificate = \"',variables('caCertificate'),'\"\n$global:AgentCertificate = \"',variables('clientCertificate'),'\"\n$global:DockerServiceName = \"Docker\"\n$global:RRASServiceName = \"RemoteAccess\"\n$global:KubeDir = \"c:\\k\"\n$global:KubeBinariesSASURL = \"https://acsengine.blob.core.windows.net/wink8s/v1.5.3int.zip\"\n$global:KubeletStartFile = $global:KubeDir + \"\\kubeletstart.ps1\"\n$global:KubeProxyStartFile = $global:KubeDir + \"\\kubeproxystart.ps1\"\n$global:NatNetworkName=\"nat\"\n$global:TransparentNetworkName=\"transparentNet\"\n\n$global:TenantId = \"',variables('tenantID'),'\"\n$global:SubscriptionId = \"',variables('subscriptionId'),'\"\n$global:ResourceGroup = \"',variables('resourceGroup'),'\"\n$global:SubnetName = \"',variables('subnetName'),'\"\n$global:SecurityGroupName = \"',variables('nsgName'),'\"\n$global:VNetName = \"',variables('virtualNetworkName'),'\"\n$global:RouteTableName = \"',variables('routeTableName'),'\"\n$global:PrimaryAvailabilitySetName = \"',variables('primaryAvailablitySetName'),'\"\n\nfilter Timestamp {\"$(Get-Date -Format o): $_\"}\n\nfunction\nWrite-Log($message)\n{\n    $msg = $message | Timestamp\n    Write-Output $msg\n}\n\nfunction\nExpand-ZIPFile($file, $destination)\n{\n    $shell = new-object -com shell.application\n    $zip = $shell.NameSpace($file)\n    foreach($item in $zip.items())\n    {\n        $shell.Namespace($destination).copyhere($item)\n    }\n}\n\nfunction\nGet-KubeBinaries()\n{\n    $zipfile = \"c:\\k.zip\"\n    Invoke-WebRequest -Uri $global:KubeBinariesSASURL -OutFile $zipfile\n    Expand-ZIPFile -File $zipfile -Destination C:\\\n}\n\nfunction\nWrite-AzureConfig()\n{\n    $azureConfigFile = $global:KubeDir + \"\\azure.json\"\n\n    $azureConfig = @\"\n{\n    \"tenantId\": \"$global:TenantId\",\n    \"subscriptionId\": \"$global:SubscriptionId\",\n    \"aadClientId\": \"$AADClientId\",\n    \"aadClientSecret\": \"$AADClientSecret\",\n    \"resourceGroup\": \"$global:ResourceGroup\",\n    \"location\": \"$Location\",\n    \"subnetName\": \"$global:SubnetName\",\n    \"securityGroupName\": \"$global:SecurityGroupName\",\n    \"vnetName\": \"$global:VNetName\",\n    \"routeTableName\": \"$global:RouteTableName\",\n    \"primaryAvailabilitySetName\": \"$global:PrimaryAvailabilitySetName\"\n}\n\"@\n\n    $azureConfig | Out-File -encoding ASCII -filepath \"$azureConfigFile\"    \n}\n\nfunction\nWrite-KubeConfig()\n{\n    $kubeConfigFile = $global:KubeDir + \"\\config\"\n\n    $kubeConfig = @\"\n---\napiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: \"$global:CACertificate\"\n    server: https://${MasterIP}:443\n  name: \"$MasterFQDNPrefix\"\ncontexts:\n- context:\n    cluster: \"$MasterFQDNPrefix\"\n    user: \"$MasterFQDNPrefix-admin\"\n  name: \"$MasterFQDNPrefix\"\ncurrent-context: \"$MasterFQDNPrefix\"\nkind: Config\nusers:\n- name: \"$MasterFQDNPrefix-admin\"\n  user:\n    client-certificate-data: \"$global:AgentCertificate\"\n    client-key-data: \"$AgentKey\"\n\"@\n\n    $kubeConfig | Out-File -encoding ASCII -filepath \"$kubeConfigFile\"    \n}\n\nfunction\nNew-InfraContainer()\n{\n    cd $global:KubeDir\n    docker build -t kubletwin/pause . \n}\n\nfunction\nGet-PodCIDR\n{\n    $argList = @(\"--hostname-override=$AzureHostname\",\"--pod-infra-container-image=kubletwin/pause\",\"--resolv-conf=\"\"\"\"\",\"--api-servers=https://${MasterIP}:443\",\"--kubeconfig=c:\\k\\config\")\n    $process = Start-Process -FilePath c:\\k\\kubelet.exe -PassThru -ArgumentList $argList\n\n    $podCidrDiscovered=$false\n    $podCIDR=\"\"\n    # run kubelet until podCidr is discovered\n    Write-Host \"waiting to discover pod CIDR\"\n    while (-not $podCidrDiscovered)\n    {\n        $podCIDR=c:\\k\\kubectl.exe --kubeconfig=c:\\k\\config get nodes/$($AzureHostname.ToLower()) -o custom-columns=podCidr:.spec.podCIDR --no-headers\n\n        if ($podCIDR.length -gt 0)\n        {\n            $podCidrDiscovered=$true\n        }\n        else\n        {\n            Write-Host \"Sleeping for 10s, and then waiting to discover pod CIDR\"\n            Start-Sleep -sec 10    \n        }\n    }\n    \n    # stop the kubelet process now that we have our CIDR, discard the process output\n    $process | Stop-Process | Out-Null\n    \n    return $podCIDR\n}\n\nfunction\nGet-PodGateway($podCIDR)\n{\n    return $podCIDR.substring(0,$podCIDR.lastIndexOf(\".\")) + \".1\"\n}\n\nfunction\nWrite-KubernetesStartFiles($podCIDR)\n{\n    $podGW=Get-PodGateway($podCIDR)\n\n    $kubeConfig = @\"\n`$env:CONTAINER_NETWORK=\"$global:TransparentNetworkName\"\n`$env:NAT_NETWORK=\"$global:NatNetworkName\"\n`$env:POD_GW=\"$podGW\"\n`$env:VIP_CIDR=\"10.0.0.0/8\"\nc:\\k\\kubelet.exe --hostname-override=$AzureHostname --pod-infra-container-image=kubletwin/pause --resolv-conf=\"\" --allow-privileged=true --enable-debugging-handlers --api-servers=https://${MasterIP}:443 --cluster-dns=$KubeDnsServiceIp --cluster-domain=cluster.local  --kubeconfig=c:\\k\\config --hairpin-mode=promiscuous-bridge --v=2 --azure-container-registry-config=c:\\k\\azure.json\n\"@\n    $kubeConfig | Out-File -encoding ASCII -filepath $global:KubeletStartFile\n\n    $kubeProxyStartStr = @\"\n`$env:INTERFACE_TO_ADD_SERVICE_IP=\"vEthernet (forwarder)\"\nc:\\k\\kube-proxy.exe --v=3 --proxy-mode=userspace --hostname-override=$AzureHostname --kubeconfig=c:\\k\\config\n\"@\n\n    $kubeProxyStartStr | Out-File -encoding ASCII -filepath $global:KubeProxyStartFile\n}\n\nfunction\nSet-DockerNetwork($podCIDR)\n{\n    $podGW=Get-PodGateway($podCIDR)\n\n    # Turn off Firewall to enable pods to talk to service endpoints. (Kubelet should eventually do this)\n    netsh advfirewall set allprofiles state off\n\n    # create new transparent network\n    docker network create --driver=transparent --subnet=$podCIDR --gateway=$podGW $global:TransparentNetworkName\n\n    # create host vnic for gateway ip to forward the traffic and kubeproxy to listen over VIP\n    Add-VMNetworkAdapter -ManagementOS -Name forwarder -SwitchName \"Layered Ethernet 3\"\n\n    # Assign gateway IP to new adapter and enable forwarding on host adapters:\n    netsh interface ipv4 add address \"vEthernet (forwarder)\" $podGW 255.255.255.0\n    netsh interface ipv4 set interface \"vEthernet (forwarder)\" for=en\n    netsh interface ipv4 set interface \"vEthernet (HNSTransparent)\" for=en\n}\n\nfunction\nNew-NSSMService\n{\n    # setup kubelet\n    c:\\k\\nssm install Kubelet C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n    c:\\k\\nssm set Kubelet AppDirectory $global:KubeDir\n    c:\\k\\nssm set Kubelet AppParameters $global:KubeletStartFile\n    c:\\k\\nssm set Kubelet DisplayName Kubelet\n    c:\\k\\nssm set Kubelet Description Kubelet\n    c:\\k\\nssm set Kubelet Start SERVICE_AUTO_START\n    c:\\k\\nssm set Kubelet ObjectName LocalSystem\n    c:\\k\\nssm set Kubelet Type SERVICE_WIN32_OWN_PROCESS\n    c:\\k\\nssm set Kubelet AppThrottle 1500\n    c:\\k\\nssm set Kubelet AppStdout C:\\k\\kubelet.log\n    c:\\k\\nssm set Kubelet AppStderr C:\\k\\kubelet.err.log\n    c:\\k\\nssm set Kubelet AppStdoutCreationDisposition 4\n    c:\\k\\nssm set Kubelet AppStderrCreationDisposition 4\n    c:\\k\\nssm set Kubelet AppRotateFiles 1\n    c:\\k\\nssm set Kubelet AppRotateOnline 1\n    c:\\k\\nssm set Kubelet AppRotateSeconds 86400\n    c:\\k\\nssm set Kubelet AppRotateBytes 1048576\n    net start Kubelet\n    \n    # setup kubeproxy\n    c:\\k\\nssm install Kubeproxy C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n    c:\\k\\nssm set Kubeproxy AppDirectory $global:KubeDir\n    c:\\k\\nssm set Kubeproxy AppParameters $global:KubeProxyStartFile\n    c:\\k\\nssm set Kubeproxy DisplayName Kubeproxy\n    c:\\k\\nssm set Kubeproxy DependOnService Kubelet\n    c:\\k\\nssm set Kubeproxy Description Kubeproxy\n    c:\\k\\nssm set Kubeproxy Start SERVICE_AUTO_START\n    c:\\k\\nssm set Kubeproxy ObjectName LocalSystem\n    c:\\k\\nssm set Kubeproxy Type SERVICE_WIN32_OWN_PROCESS\n    c:\\k\\nssm set Kubeproxy AppThrottle 1500\n    c:\\k\\nssm set Kubeproxy AppStdout C:\\k\\kubeproxy.log\n    c:\\k\\nssm set Kubeproxy AppStderr C:\\k\\kubeproxy.err.log\n    c:\\k\\nssm set Kubeproxy AppRotateFiles 1\n    c:\\k\\nssm set Kubeproxy AppRotateOnline 1\n    c:\\k\\nssm set Kubeproxy AppRotateSeconds 86400\n    c:\\k\\nssm set Kubeproxy AppRotateBytes 1048576\n    net start Kubeproxy\n}\n\nfunction\nSet-Explorer\n{\n    # setup explorer so that it is usable\n    New-Item -Path HKLM:\"\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Internet Explorer\"\n    New-Item -Path HKLM:\"\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Internet Explorer\\\\BrowserEmulation\"\n    New-ItemProperty -Path HKLM:\"\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Internet Explorer\\\\BrowserEmulation\" -Name IntranetCompatibilityMode -Value 0 -Type DWord\n    New-Item -Path HKLM:\"\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Internet Explorer\\\\Main\"\n    New-ItemProperty -Path HKLM:\"\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Internet Explorer\\\\Main\" -Name \"Start Page\" -Type String -Value http://bing.com\n}\n\ntry\n{\n    # Set to false for debugging.  This will output the start script to\n    # c:\\AzureData\\CustomDataSetupScript.log, and then you can RDP \n    # to the windows machine, and run the script manually to watch\n    # the output.\n    if ($true) {\n        Write-Log \"Provisioning $global:DockerServiceName... with IP $MasterIP\"\n\n        Write-Log \"download kubelet binaries and unzip\"\n        Get-KubeBinaries\n\n        Write-Log \"Write azure config\"\n        Write-AzureConfig\n\n        Write-Log \"Write kube config\"\n        Write-KubeConfig\n\n        Write-Log \"Create the Pause Container kubletwin/pause\"\n        New-InfraContainer\n\n        Write-Log \"Get the POD CIDR\"\n        $podCIDR = Get-PodCIDR\n\n        Write-Log \"write kubelet startfile with pod CIDR of $podCIDR\"\n        Write-KubernetesStartFiles $podCIDR\n\n        Write-Log \"setup docker network with pod CIDR of $podCIDR\"\n        Set-DockerNetwork $podCIDR\n\n        Write-Log \"install the NSSM service\"\n        New-NSSMService\n\n        Write-Log \"Set Internet Explorer\"\n        Set-Explorer\n\n        Write-Log \"Setup Complete\"\n    }\n    else \n    {\n        # keep for debugging purposes\n        Write-Log \".\\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AgentKey $AgentKey -AzureHostname $AzureHostname -AADClientId $AADClientId -AADClientSecret $AADClientSecret\"\n    }\n}\ncatch\n{\n    Write-Error $_\n}\n'))]"
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('agentWindowsOffer')]",
            "publisher": "[variables('agentWindowsPublisher')]",
            "sku": "[variables('agentWindowsSku')]",
            "version": "[variables('agentWindowsVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "[concat(variables('agentpool1VMNamePrefix'), copyIndex(variables('agentpool1Offset')),'-osdisk')]",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(div(copyIndex(variables('agentpool1Offset')),variables('maxVMsPerStorageAccount')),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(div(copyIndex(variables('agentpool1Offset')),variables('maxVMsPerStorageAccount')),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpool1AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk/', variables('agentpool1VMNamePrefix'), copyIndex(variables('agentpool1Offset')), '-osdisk.vhd')]"
            }
          }
        }
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('agentpool1VMNamePrefix'), copyIndex(variables('agentpool1Offset')))]"
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[sub(variables('agentpool1Count'), variables('agentpool1Offset'))]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('agentpool1VMNamePrefix'), copyIndex(variables('agentpool1Offset')))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('agentpool1VMNamePrefix'), copyIndex(variables('agentpool1Offset')), '/cse')]",
      "properties": {
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "commandToExecute": "[concat('powershell.exe -ExecutionPolicy Unrestricted -command \"', '$arguments = ', variables('singleQuote'),'-MasterIP ',variables('masterInternalLbIp'),' -KubeDnsServiceIp ',variables('kubeDnsServiceIp'),' -MasterFQDNPrefix ',variables('masterFqdnPrefix'),' -Location ',variables('location'),' -AgentKey ',variables('clientPrivateKey'),' -AzureHostname ',variables('agentpool1VMNamePrefix'),copyIndex(variables('agentpool1Offset')),' -AADClientId ',variables('servicePrincipalClientId'),' -AADClientSecret ',variables('servicePrincipalClientSecret'),variables('singleQuote'), ' ; ', variables('windowsCustomScriptSuffix'), '\" > %SYSTEMDRIVE%\\AzureData\\CustomDataSetupScript.log 2>&1')]"
        },
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.8"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('masterAvailabilitySet')]",
      "properties": {},
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('masterStorageAccountName')]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('masterVMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]",
        "[concat('Microsoft.Network/routeTables/', variables('routeTableName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('virtualNetworkName')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetCidr')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnet')]",
              "networkSecurityGroup": {
                "id": "[variables('nsgID')]"
              },
              "routeTable": {
                "id": "[variables('routeTableID')]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/virtualNetworks"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('nsgName')]",
      "properties": {
        "securityRules": [
          {
            "name": "allow_rdp",
            "properties": {
              "access": "Allow",
              "description": "Allow RDP traffic to master",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "3389-3389",
              "direction": "Inbound",
              "priority": 102,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "allow_ssh",
            "properties": {
              "access": "Allow",
              "description": "Allow SSH traffic to master",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22-22",
              "direction": "Inbound",
              "priority": 101,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "allow_kube_tls",
            "properties": {
              "access": "Allow",
              "description": "Allow kube-apiserver (tls) traffic to master",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "443-443",
              "direction": "Inbound",
              "priority": 100,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('routeTableName')]",
      "type": "Microsoft.Network/routeTables"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('masterLbName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('masterLbBackendPoolName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('masterLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
              }
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRuleHTTPS",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
              },
              "backendPort": 443,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('masterLbIPConfigID')]"
              },
              "frontendPort": 443,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('masterLbID'),'/probes/tcpHTTPSProbe')]"
              },
              "protocol": "tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "tcpHTTPSProbe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 443,
              "protocol": "tcp"
            }
          }
        ]
      },
      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[variables('vnetID')]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('masterInternalLbName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('masterLbBackendPoolName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('masterInternalLbIPConfigName')]",
            "properties": {
              "privateIPAddress": "[variables('masterInternalLbIp')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('vnetSubnetID')]"
              }
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "InternalLBRuleHTTPS",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('masterInternalLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
              },
              "backendPort": 4443,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('masterInternalLbIPConfigID')]"
              },
              "frontendPort": 443,
              "idleTimeoutInMinutes": 5,
              "protocol": "tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "tcpHTTPSProbe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 4443,
              "protocol": "tcp"
            }
          }
        ]
      },
      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('masterPublicIPAddressName')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('masterFqdnPrefix')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "masterLbLoopNode"
      },
      "dependsOn": [
        "[variables('masterLbID')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterLbName'), '/', 'SSH-', variables('masterVMNamePrefix'), copyIndex())]",
      "properties": {
        "backendPort": 22,
        "enableFloatingIP": false,
        "frontendIPConfiguration": {
          "id": "[variables('masterLbIPConfigID')]"
        },
        "frontendPort": "[variables('sshNatPorts')[copyIndex()]]",
        "protocol": "tcp"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "nicLoopNode"
      },
      "dependsOn": [
        "[variables('vnetID')]",
        "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]",
        "[variables('masterInternalLbName')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                },
                {
                  "id": "[concat(variables('masterInternalLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]"
                }
              ],
              "privateIPAddress": "[concat(variables('masterFirstAddrPrefix'), copyIndex(int(variables('masterFirstAddrOctet4'))))]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('vnetSubnetID')]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/',variables('masterAvailabilitySet'))]",
        "[variables('masterStorageAccountName')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('masterAvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('masterVMSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'),'nic-', copyIndex()))]"
            }
          ]
        },
        "osProfile": {
          "adminUsername": "[variables('username')]",
          "computername": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
          "customData": "[base64(concat('#cloud-config\n\n# { { { variable } } }\n\npackages:\n - etcd\n - jq\n - traceroute\n\nruncmd:\n- /bin/echo DAEMON_ARGS=--name \"',variables('masterVMNames')[copyIndex()],'\" --initial-advertise-peer-urls \"',variables('masterEtcdPeerURLs')[copyIndex()],'\" --listen-peer-urls \"',variables('masterEtcdPeerURLs')[copyIndex()],'\" --advertise-client-urls \"',variables('masterEtcdClientURLs')[copyIndex()],'\" --listen-client-urls \"',concat(variables('masterEtcdClientURLs')[copyIndex()], ',http://127.0.0.1:', variables('masterEtcdClientPort')),'\" --initial-cluster-token \"k8s-etcd-cluster\" --initial-cluster \"',variables('masterEtcdClusterStates')[div(variables('masterCount'), 2)],'\" --initial-cluster-state \"new\" | tee -a /etc/default/etcd\n- apt-get update\n- apt-get install -y apt-transport-https ca-certificates\n- for i in 1 2 3 4 5; do curl --max-time 60 -fsSL https://apt.dockerproject.org/gpg | apt-key add -; [ $? -eq 0 ] && break || sleep 5; done\n- echo \"deb ',variables('dockerEngineDownloadRepo'),' ubuntu-xenial main\" | sudo tee /etc/apt/sources.list.d/docker.list\n- \"echo \\\"Package: docker-engine\\nPin: version ',variables('dockerEngineVersion'),'\\nPin-Priority: 550\\n\\\" > /etc/apt/preferences.d/docker.pref\"\n- apt-get update\n- apt-get install -y docker-engine\n- systemctl restart docker\n- mkdir -p /etc/kubernetes/manifests\n- usermod -aG docker ',variables('username'),'\n\nwrite_files:\n- path: \"/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    MountFlags=shared\n\n- path: \"/etc/systemd/system/docker.service.d/exec_start.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    ExecStart=\n    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay --log-driver=journald\n\n- path: \"/etc/docker/daemon.json\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    {\n      \"live-restore\": true\n    }\n\n- path: \"/etc/kubernetes/certs/ca.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('caCertificate'),'\n\n- path: \"/etc/kubernetes/certs/apiserver.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('apiServerCertificate'),'\n\n- path: \"/etc/kubernetes/certs/client.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('clientCertificate'),'\n\n- path: \"/var/lib/kubelet/kubeconfig\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - name: localcluster\n      cluster:\n        certificate-authority: /etc/kubernetes/certs/ca.crt\n        server: ',concat('https://', variables('masterPrivateIpAddrs')[copyIndex()], ':443'),'\n    users:\n    - name: client\n      user:\n        client-certificate: /etc/kubernetes/certs/client.crt\n        client-key: /etc/kubernetes/certs/client.key\n    contexts:\n    - context:\n        cluster: localcluster\n        user: client\n      name: localclustercontext\n    current-context: localclustercontext\n\n- path: /etc/kubernetes/manifests/kube-apiserver.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/6RUzW7bPBC8+ykEnc0oyRfgC4QoQOEW6CEN0gTofU2tbdYUqS5XCtyn71I/SSrZaYHaF5E7MzucpQS1+YYUjHd5krYX6WJvXCmPD75MFxUylMCQL5LEQYWyv2/WqIQUkFqkdCiEGvRLNRwCYxVLFtZoQ2QnCRukPNHeMXmragsOu33tq9o7dJwnv2svQo06cnc+8D3ys6d9njA1kRd1wDhx3qur0/7iz1SwjdWbWCaHjOHzoUaKyydpczsCxU0FMYBhHZXTbDdi07fbsy7drlJQVibERNVw2uJ+jOjObFAftMXlnakMP4LbIi2fRMVo/KC1bxwvP+IGGstP7ElcryyEsHzE4BvS+LXxDLN+JWEIxflZ959WrfXPqibTGotbLCdl4wLqhlDVnri4Pr+e8t+Wr67+m1S19U0p6r41JVIBPwV7FCJRbMy2yJB19jqErCOcfQ/ezdp2mQi7kdtEytSKYlpFN8IhsZUp6XZClAal6ucSih1znWfZxeX/XTYX+U0FUe6TgFbWyK17kHMdlfjReGoqRQhlES/dNNZx+KobWjEIr+Jiqsc2KI3EaiMjmEUQKxLEqHemiY/w4wCBUe3x8HcyApwNIh5YaXhPQMMRA+MwoL+h/2Ii9LdarUHv0ZVFzPpygmmLq3Gn9bap8EvsOrzpPWp424WtXtu/yiRJFSkPwDtBTVymc50WSFmz7rQs8kkhwWWCy97geofTz9BxY/FL1km96NfvOPyTu9NqM5u/AgAA//91ER+E5gUAAA==\n\n- path: /etc/kubernetes/manifests/kube-controller-manager.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/4xTX2/TMBB/76ew8u6kmSaYomWPiBdQJSTer851NXXscHYC5dNzl6YrJMtgk6r6/Pt31zN09itStMFXKhvKbHOyvuGvu9BkmxYTNJCg2ijloUWun/o9ahN8ouAckm7BwzNSNiFiB+YFFs8xYStXDvboosgolSxSpSYJ3TnwONZNaLvg0adKrZhsYodGRI4hps+YfgQ6VSpRLwICB+u5l4uN/o/E8mdbPjHsUXDkMWH8eO6Q5PiF/Z6uQM7HVJ7NdBaLrDhesdmf5XW78VpzlUdDdXn3Pt/yf1k9bB+2M4yostDBPtfFAFQ4uy+k5jAVt7sZCZwLBhJqHxpu2zYUa5nQDGZcLwFGQF1u87v7ewlSlO9WgDLM+vES+8P3xu8ID/bn0wId+kZ3FAbbcHvwq6els0CufWEyxW3wxUjIv8XgZywKIWkD+mAdLlgGKfEn5IbSjBeRBmtQgzGh94mj2UGmc8LzW1r8KoSJlDNwJukQuDfNP4NJr412qO+ulSG4vsVP4hz/2ptpNdlb37xvOkq1wtlBOjJqFjFb6vB2aN4OPW3HqtBsiwR3iTh/M68Hk2c3Sr3od28k/Fe6dbVFzN8BAAD//4xtSC6lBAAA\n\n- path: /etc/kubernetes/manifests/kube-scheduler.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/4RSTW+DMAy98ysi7hltL6vQ2HmXTZUm7e6CV6LmAyWGqf9+dktLx9otXMh7z8/PBujMB8Zkgi9VPizzbG98w6+b0OSZQ4IGCMpMKQ8OGd/3W9SpbrHpLcZ8JFIH9cQeEqETysIWbZJqpchgLFUdPMVgdWfB4xGvg+uCR0+l+umdpQ5rqW1DojekrxD3paLYS534gPGc/OSu7+eTYxzshH0SOnokTC+HDqNc37nN81nIaRzwAsarGOdFe5bm1/CvJkdUawc8fqyWq8eHBT/Lcr1YL2YaMeMRPs2uKgaIhTXbQjCLVEzcrMgiNBg1i2qqZA8zfqhWZ2QItnf4GnpP6XqWcUlItZ42Mdko5aRkA9SyqmBZcUt28eHomqPrMfpdo9mIojslnH+928HkBzhaXfy7PxL+l+6+242Yp/MdAAD//0ChWBIlAwAA\n\n- path: /etc/kubernetes/manifests/kube-addon-manager.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/3xQzU70MAy89ymsvVf9vgOXCCHxAIWVkLibxmKjbuISO0V9e5L0h+Wyt3hmPDMOTu6dojgOBub/zeiCNXBm23hStKhoGoCAngyM6YNatJZD6zHgJ8WNkgmHnZdFlHwm5htXmWgoPhcWfSH95jga0JgoYwMHRReyuijae1kAzuengcdCx0BK8lw0/Sp5yzFPVRdJOMWBqucKfCUSPeacOyUDD/6YPXmOS4b+9a6CM1+Tp55T2Nf2crWXbJu+CM6oFwOnjnTofrt1q/B0dED7Gq7Lcfqa8OfuG+vyWdV3W5/uZvwEAAD//w/cJI7IAQAA\n\n- path: /etc/kubernetes/addons/kube-dns-service.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/3yQQUsDMRCF7/srht5Tu4ggc7UXEaRQ9T7NziFsNgkzswX/vYlpQUFLLnnfm3l5hEr4YNGQE8J5HOaQJoQjyzl4HhY2msgIB4BIJ47abgDzozoqBWFeT+ympJ1WIYmNdRvynY+rGovTnoWwMVl588dkoqXaL5XtX4/V7/pHdANayF+pftbkZdDCvvW5vPR8QBh323bGXcUli333dZfEa89mIDzcdyHZss8R4X1/+D3szJdbC29PbUE5srcs//3MVwAAAP//GZQuSmEBAAA=\n\n- path: /etc/kubernetes/addons/kube-dns-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/8xWTW/bOBC9+1cQ2utKlhNkkxXWARZxsAEWaY3a7aXugaYmEWGKZPhhxCn63zuSP0QrtmsHRVHl4swMZx7fmxmQav4JjOVKZmTe68y4zDPyAbTgjDq03ijpjBICTKcER3PqaNYhRNApCFv9ImTmp2AkOLAJV10mvHVgYgtmzhlkJHLGQ7SMvLIx1Tqrj8S5tLV13tT/Gw2SltBExI3RasrWHrvAImXHamAVCLMEbDNyhv9ZEMCcMtnxRTGZFtTB8kh40+qjUipX02HXJqzCCsg9EpNQoQuatGgw3CEiEWuFhEbRkcecQs+qEok+f51EM1hMomwS3awS/pvn6HwvBZr/nERKV/HK1DG3z9w6O4m+fVnXC3XaT8ZpKu6gD6+1UqL6GPYM5RJD1paYUPMYwIhJFMe5KjGqvyqVCIW3S6JWDHaAVsb1e2l6cd44eUkfEdU/Der/8dfg3WiEOK43YYLPQYK1Q6Om0JQn5IFy4Q2MCwO2UAIlugi8hXP6P3DhAUI0dQXy0C2ACle8xFVphBdtByHWjFylV+mWuRK96uq78XgYOLhETakYgKCLESBtOar+V3jUesYQf4CzF3gdL0F5tzna3KEZolDjCt2WChulhjXumuQg/zJLpUEtTuDRRjnFlMjIx8HwLQkd0weSjm+apAZozneKeFCmzbE9AvXeLNB5epQEqJjyBtUL8Qlecme3EZdQKrNAsi7Tex54DDx5sO1opn3Na7kzR5Bi58wxiheNLX+BaqLS1rRJFVeoxbxlr7YAmH7v7DJJ8a/3R2sa6yChHuMHyrjgbtGPD40qjuk9tU/bo7ppjRJdR3fs7u46vVH3d+kP+nM3y2Xel1YoNfM6XKw5PFAvXGLnLNlae2RDLbnu5jDvSi9Ei19vRH+zfFY8RT+tblZLemT1V6uvDqn3dLX6WvYnz8Ed6ofbZ2B3y9S/bn2/YrAO+q3W9wrq0cPQwr1vnZ64li5O2Eq7l1KQAVkfKnyqoXWwbMqVQ6ocRlvvtuqb4kOs9UJSSJTg0j9/DwAA//+O/Dp4ugoAAA==\n\n- path: /etc/kubernetes/addons/kube-proxy-daemonset.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/5RUu5LbMAzs/RUc9TyeW02SJinS5DHjmfQ0jbM55kMBQMX6+5BSbFH3UHysqAW4WCwo6s7+AiQbQyvgwhDKllS/3QPr7eZsw6EVXzT4GHbAG5/Rg2bdboRweg+Oyk6Ic9oDBmCgBxuVcYkYUBJgbw20omFM0IyZJvouBgjcjodkh/EyjBG2gK0I8QD5M2gPzzIKRJ02V5yGXMRvqANTROR95zTDJKgWWlYtdl3GCylCXEtMBwNrG7JnV0QWMq+zUbfzUjTqNHSAhbup4GWZnCZlScmkT/b4UfUalbN7VTAHrObYTGK9PhZLP8yef72W2mWhn+bUV0ycFgLFhAYqQwr4OwHxAsv9dqkV28dHf0MJTELLw+fsRL4ydXqHtrcOjpAvTRn5LdRHlzx8iynU/FL4gvzUfMoNKWCjiJwygExNRTv1kUNyDMlTJF4I14cfwQ3Par7CPlv2kj7H5Rx/N/09o6snMsX+V6Z0+h34T8TzAp/8rK5gSRyl1NP4Jy0RKjppBGX06KB9skYvTFhxeJ37nrbfaHqd+K1xrQyr/K+7rMJwxJmyPGQPy/cpUiucDenyNwAA//+0RYOV/gQAAA==\n\n- path: /etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/4ySzarbMBCF936KIXs715RCryiF0kA3XRhSuh/Lw7WILAnN2I3fvlITxzakP1qJo9HRd0aDwfygyMY7BXQVcnnLx6luSbAuLsZ1Ck4UrJ8HclIMSe5QUBUAFluynHcAl7Gl6EiIK+OP2o4sFEumOBlNCg4SRzrcKj9wiSGozZWyQ+5bj7H7XTEtQFNdva/qpDkc6I8X8iEH1PeKkuf09lBwIJ3ZYoI3GllBdmKypMXHG/WAovtvmxj/xkvWwaLQ3WDTjrzszut/wi6YeWnvBI1L8RelBIxvCf1haAZ8S0E/rn6nxe6cnD7tC5vR2san+LOCz/Ynzvw4t2YiR8xN9C2twAC9SPhKspUAAkqffvF42Ks+ioLXl9eXjWycEYP2RBbnM6VIXeJ/t60QM5Af5dnhXz96fXTT4XLtWvMMJ0QvXnur4PuX5q4739F5Nwh55Ymv9nPsE501brxC8SsAAP//WoCbXSkDAAA=\n\n- path: /etc/kubernetes/addons/kubernetes-dashboard-service.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/4yOsU4DMRBEe3/FKr0hdIk/AiEh0e/ZI7Dis63dvUj5e84+CipEN5qd2Xnc8wdEc6uB7i/ulmsK9A655wi3wjixcXBEhRcUHYroti2QCoM+5fYcy6YG8Xq0Ap1MNpyO5EU99x5+VXxi/VoaS9oTlVf8edTO8Sfh9bHvrE474uDoTWwC+SkDXc5z01g+YW/Tup6vw1QURGsS/gVlj75PvraE8cR9BwAA//+lMk5xIwEAAA==\n\n- path: /etc/kubernetes/addons/kube-heapster-service.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/2yOverDMAzEdz+FyO7/R6fgJ+hYKHRXHNGaOLaRlEDfvnaSoYVu4nd3usMSbsQScnKw/psppNHBlXgNnsxMiiMqOgMQcaAo7QKYloE4kZL8hPzr4yJKbGVPOeiUF+q+OBPOVT4Tlhaohh08PoEUbF9a1MqzCrORQr5Vl8y6bbDb6aD/22oU+U56OVB/qlAoktfMx+JeLJby1vUKAAD//6ozJXX5AAAA\n\n- path: /etc/kubernetes/addons/kube-heapster-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/6xUS2vbTBTd61cMWn+j2F8TSEVVCElKF00TEiiUqpiJdFMNnldnRsJq6X/v1cuWFDuYUK2Sc58+98yhlAZrrvKYXIERupagfOAMZHFAiEWIZ8zFZIn/eZBGMA9NhJAhp/kyrTzjCqwbEEq4ZD8gJu/W5SNYBR7cR2DGebAPWPm+z2tqpWQ4fwtQEp4UfWo4Ril1urQZJLuWkSux2tYrZnichmm4K1BM4vih0Ra20DVxu4EN+LME5ycYbmbKmJwv5ASUILWtkZDTxQ0fRQSX/NUN9rF1keda3YPjv45izOh8pZhS9Ywy3CHBFWYobLxlbWwRnc2D3YZJu+Deuj7h9FnYF0hvoUWenM0i+VZcyXASWi2j/6MFfQTPouV87UFRyQEpGC0ENWC5zpM3i+abr+o8kuq1TWBjtMLJnIlD8qAtda8WydmBG789UiNH1YOqxievmCjhg9Vy2u+Jg8jv4WmK9vgd80WM3T3LGZLecDBK6yi5+bq6u71afb64uf7305xh2YsjH+4uLoe5SufwAAIyPOJ4QCuYkQdwfaLRogRX5Sbo6OtGDkWCPYIY8b4+d5QZs8cdKrQwrlVMOm32OGpDe+YxMGrisgLyUoCNmDDFfKHMco/OiRLVaK0jW3q5zGuM9JNI+O13Gq6hTkO0tsu+YWsL7lYJhP9LQ22afG3bnOsNR32m4Z/vzTw3oQ6fQlZ8mhBxiIY5CeitXwYIDQBU86c7qZbNIZbBmO0x0/vb72N4Rp0o2yfpwFY8Q3mE3pbQ/KKtguK2hLoaE2Xw7DH3rYO/AQAA//9Ky8Hp3AYAAA==\n\n- path: /etc/kubernetes/addons/default-storage-class.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/1yPsW7EIAxAd74CZYcqW8XaT6jU3QluZUEgsk2Gfv1BLnfS3Wg9v2fZOWdgpx9koVqCFa0Mf+jTp3iqH8e8oMJsEpUY7PcdfmUQMVsHERSCsbbAhsFG/IWWtc9QSlXQXpSB7SO7DtOPpE9tQS6oeN4hcZftzp1gJ+WGU5czLJivzKu05iaK7AT5oBWfzs71oPEOcnhT4L8xukiSzC0AAP//anuEZPoAAAA=\n\n- path: \"/etc/systemd/system/kubectl-extract.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=Kubectl extraction\n    Requires=docker.service\n    After=docker.service\n    ConditionPathExists=!/usr/local/bin/kubectl\n\n    [Service]\n    TimeoutStartSec=0\n    Restart=on-failure\n    RestartSec=5s\n    ExecStartPre=/bin/mkdir -p /tmp/kubectldir\n    ExecStartPre=/usr/bin/docker pull ',variables('kubernetesHyperkubeSpec'),'\n    ExecStartPre=/usr/bin/docker run --rm -v /tmp/kubectldir:/opt/kubectldir ',variables('kubernetesHyperkubeSpec'),' /bin/bash -c \"cp /hyperkube /opt/kubectldir/\"\n    ExecStartPre=/bin/mv /tmp/kubectldir/hyperkube /usr/local/bin/kubectl\n    ExecStart=/bin/chmod a+x /usr/local/bin/kubectl\n\n    [Install]\n    WantedBy=multi-user.target\n\n- path: \"/etc/default/kubelet\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    KUBELET_CLUSTER_DNS=',variables('kubeDnsServiceIP'),'\n    KUBELET_API_SERVERS=',concat('https://', variables('masterPrivateIpAddrs')[copyIndex()], ':443'),'\n    KUBELET_IMAGE=',variables('kubernetesHyperkubeSpec'),'\n    KUBELET_NETWORK_PLUGIN=\n    DOCKER_OPTS=\n    KUBELET_REGISTER_SCHEDULABLE=',variables('registerSchedulable'),'\n    KUBELET_NODE_LABELS=role=master\n    KUBELET_POD_INFRA_CONTAINER_IMAGE=',variables('kubernetesPodInfraContainerSpec'),'\n\n- path: \"/etc/systemd/system/kubelet.service\"\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/5RUUW/aMBB+51dEVV9Dpj0i5YFC2iEYIALbQ1chEx+Jh2NnZzuMTf3vc0IoMdBJFVJkn7/vu/vOh59XgumXzhBUgqzQTIpwbDbAQXcW8MswBBVSmewAuwqwZAl0+lsNeBnsPMfH1YvlKU1Qh4TvyUF1IlEylCIHoR8ZhzAAnQQUtsRwHeyaXNFvSOKKNUeL2DARbIjKvEAWOiB/DEKQSKEJE4DqROqq7AYv31GGnl94QUkw4Gzznxy5NEJ7vm/X9Ar/EYGc7MBXGUG41jnTwsAorHnH5nlohPej41kBATrMpNLNtmDU2SIrbetSq34MlJKb3NZAoexVn4uwOqhe/UF5cVLVZrP23ha4v4Goqj+WGPQuAu8TGrstRhPpNY25QZNp721xJVzNSSWBtjmgrK4buDansHQJbqAi3A9ng3G0WM/my7hme9793/HqIZpEy/Xoa/8pem3CnhdkhwKw4nunkTgdVVlJwfxq+u1Ehndnkf58tI6jxbdoEb/eOYRKxE7xlqXXTTufOZRCUp+JLRL/bfx9lpMU2hnns+F6NH1c9NeD2XTZH02tv6MVNz+h1P6bVfipW//cM87lvjVnoUYDDgIE2XBoHN86obAxacpE6mdEUG7b4qBOzi9uNSeCbe2DcQHmRtlHxqdChWejg8kqXlpzw2n8ehsuc9ujsNl2uUwId4AIKauRKsmAGl4V3kqwiJ5GdYZ48CUarib9h0nkZhKSgm9pwNuFTWfDaG3R0eSqMGmobassGbVvZv2S3QC805sa3v2ppHDvqgq3BuJoCg8flMkIw4IJP7eWQltizlRipFH+BhlN3TKt0F7izi+4sTfcdh4tv88W4/V8snoaTV3zZfi58y8AAP//lFb2TV8GAAA=\n\n- path: \"/opt/azure/containers/kubelet.sh\"\n  permissions: \"0755\"\n  owner: \"root\"\n  content: |\n    #!/bin/bash\n    set -e\n\n    # Azure does not support two LoadBalancers(LB) sharing the same nic and backend port.\n    # As a workaround, the Internal LB(ILB) listens for apiserver traffic on port 4443 and the External LB(ELB) on port 443\n    # This IPTable rule then redirects ILB traffic to port 443 in the prerouting chain\n    iptables -t nat -A PREROUTING -p tcp --dport 4443 -j REDIRECT --to-port 443\n\n    sed -i \"s|<kubernetesAddonManagerSpec>|',variables('kubernetesAddonManagerSpec'),'|g\" \"/etc/kubernetes/manifests/kube-addon-manager.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g; s|<kubeServiceCidr>|',variables('kubeServiceCidr'),'|g; s|<masterEtcdClientPort>|',variables('masterEtcdClientPort'),'|g; s|<masterCount>|',variables('masterCount'),'|g\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g; s|<masterFqdnPrefix>|',variables('masterFqdnPrefix'),'|g\" \"/etc/kubernetes/manifests/kube-controller-manager.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g\" \"/etc/kubernetes/manifests/kube-scheduler.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g\" \"/etc/kubernetes/addons/kube-proxy-daemonset.yaml\"\n    sed -i \"s|<kubernetesKubeDNSSpec>|',variables('kubernetesKubeDNSSpec'),'|g; s|<kubernetesDNSMasqSpec>|',variables('kubernetesDNSMasqSpec'),'|g; s|<kubernetesExecHealthzSpec>|',variables('kubernetesExecHealthzSpec'),'|g\" \"/etc/kubernetes/addons/kube-dns-deployment.yaml\"\n    sed -i \"s|<kubernetesHeapsterSpec>|',variables('kubernetesHeapsterSpec'),'|g; s|<kubernetesAddonResizerSpec>|',variables('kubernetesAddonResizerSpec'),'|g\" \"/etc/kubernetes/addons/kube-heapster-deployment.yaml\"\n    sed -i \"s|<kubernetesDashboardSpec>|',variables('kubernetesDashboardSpec'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n\n- path: \"/opt/azure/containers/provision.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionScript'),'\n'))]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "keyData": "[variables('sshPublicKeyData')]",
                  "path": "[variables('sshKeyPath')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('osImageOffer')]",
            "publisher": "[variables('osImagePublisher')]",
            "sku": "[variables('osImageSku')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'-osdisk')]",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('masterStorageAccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'vhds/',variables('masterVMNamePrefix'),copyIndex(),'-osdisk.vhd')]"
            }
          }
        }
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('masterVMNamePrefix'), copyIndex())]"
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('masterVMNamePrefix'), copyIndex())]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'/cse', copyIndex())]",
      "properties": {
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "commandToExecute": "[concat('/usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/provision.sh ',variables('tenantID'),' ',variables('subscriptionId'),' ',variables('resourceGroup'),' ',variables('location'),' ',variables('subnetName'),' ',variables('nsgName'),' ',variables('virtualNetworkName'),' ',variables('routeTableName'),' ',variables('primaryAvailablitySetName'),' ',variables('servicePrincipalClientId'),' ',variables('servicePrincipalClientSecret'),' ',variables('clientPrivateKey'),' ',variables('targetEnvironment'),' ',variables('networkPolicy'),' ',variables('apiServerPrivateKey'),' ',variables('caCertificate'),' ',variables('masterFqdnPrefix'),' ',variables('kubeConfigCertificate'),' ',variables('kubeConfigPrivateKey'),' ',variables('username'),' >> /var/log/azure/cluster-provision.log 2>&1 &\" &')]"
        },
        "publisher": "Microsoft.OSTCExtensions",
        "settings": {},
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.5"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    }
  ],
  "outputs": {
    "agentStorageAccountPrefixes": {
      "type": "array",
      "value": "[variables('storageAccountPrefixes')]"
    },
    "agentStorageAccountSuffix": {
      "type": "string",
      "value": "[variables('storageAccountBaseName')]"
    },
    "agentpool1StorageAccountCount": {
      "type": "int",
      "value": "[variables('agentpool1Count')]"
    },
    "agentpool1StorageAccountOffset": {
      "type": "int",
      "value": "[variables('agentpool1Offset')]"
    },
    "linuxpool1StorageAccountCount": {
      "type": "int",
      "value": "[variables('linuxpool1Count')]"
    },
    "linuxpool1StorageAccountOffset": {
      "type": "int",
      "value": "[variables('linuxpool1Offset')]"
    },
    "masterFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))).dnsSettings.fqdn]"
    }
  }
}
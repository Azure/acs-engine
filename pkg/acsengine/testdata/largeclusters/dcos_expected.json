{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "agentpri0Count": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 100,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentpri0Subnet": {
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Sets the subnet of agent pool 'agentpri0'."
      },
      "type": "string"
    },
    "agentpri0VMSize": {
      "allowedValues": [
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "agentpri10Count": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 100,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentpri10Subnet": {
      "defaultValue": "10.10.0.0/16",
      "metadata": {
        "description": "Sets the subnet of agent pool 'agentpri10'."
      },
      "type": "string"
    },
    "agentpri10VMSize": {
      "allowedValues": [
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "agentpri1Count": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 100,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentpri1Subnet": {
      "defaultValue": "10.1.0.0/16",
      "metadata": {
        "description": "Sets the subnet of agent pool 'agentpri1'."
      },
      "type": "string"
    },
    "agentpri1VMSize": {
      "allowedValues": [
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "agentpri2Count": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 100,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentpri2Subnet": {
      "defaultValue": "10.2.0.0/16",
      "metadata": {
        "description": "Sets the subnet of agent pool 'agentpri2'."
      },
      "type": "string"
    },
    "agentpri2VMSize": {
      "allowedValues": [
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "agentpri3Count": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 100,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentpri3Subnet": {
      "defaultValue": "10.3.0.0/16",
      "metadata": {
        "description": "Sets the subnet of agent pool 'agentpri3'."
      },
      "type": "string"
    },
    "agentpri3VMSize": {
      "allowedValues": [
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "agentpri4Count": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 100,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentpri4Subnet": {
      "defaultValue": "10.4.0.0/16",
      "metadata": {
        "description": "Sets the subnet of agent pool 'agentpri4'."
      },
      "type": "string"
    },
    "agentpri4VMSize": {
      "allowedValues": [
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "agentpri5Count": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 100,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentpri5Subnet": {
      "defaultValue": "10.5.0.0/16",
      "metadata": {
        "description": "Sets the subnet of agent pool 'agentpri5'."
      },
      "type": "string"
    },
    "agentpri5VMSize": {
      "allowedValues": [
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "agentpri6Count": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 100,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentpri6Subnet": {
      "defaultValue": "10.6.0.0/16",
      "metadata": {
        "description": "Sets the subnet of agent pool 'agentpri6'."
      },
      "type": "string"
    },
    "agentpri6VMSize": {
      "allowedValues": [
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "agentpri7Count": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 100,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentpri7Subnet": {
      "defaultValue": "10.7.0.0/16",
      "metadata": {
        "description": "Sets the subnet of agent pool 'agentpri7'."
      },
      "type": "string"
    },
    "agentpri7VMSize": {
      "allowedValues": [
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "agentpri8Count": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 100,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentpri8Subnet": {
      "defaultValue": "10.8.0.0/16",
      "metadata": {
        "description": "Sets the subnet of agent pool 'agentpri8'."
      },
      "type": "string"
    },
    "agentpri8VMSize": {
      "allowedValues": [
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "agentpri9Count": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 100,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentpri9Subnet": {
      "defaultValue": "10.9.0.0/16",
      "metadata": {
        "description": "Sets the subnet of agent pool 'agentpri9'."
      },
      "type": "string"
    },
    "agentpri9VMSize": {
      "allowedValues": [
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "agentpublic1Count": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 100,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentpublic1EndpointDNSNamePrefix": {
      "metadata": {
        "description": "Sets the Domain name label for the agent pool IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      },
      "type": "string"
    },
    "agentpublic1Subnet": {
      "defaultValue": "10.11.0.0/16",
      "metadata": {
        "description": "Sets the subnet of agent pool 'agentpublic1'."
      },
      "type": "string"
    },
    "agentpublic1VMSize": {
      "allowedValues": [
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "dcosBootstrapURL": {
      "defaultValue": "https://dcosio.azureedge.net/dcos/stable/bootstrap/e73ba2b1cd17795e4dcb3d6647d11a29b9c35084.bootstrap.tar.xz",
      "metadata": {
        "description": "The default mesosphere bootstrap package."
      },
      "type": "string"
    },
    "firstConsecutiveStaticIP": {
      "defaultValue": "172.16.0.5",
      "metadata": {
        "description": "Sets the static IP of the first master"
      },
      "type": "string"
    },
    "linuxAdminUsername": {
      "metadata": {
        "description": "User name for the Linux Virtual Machines (SSH or Password)."
      },
      "type": "string"
    },
    "location": {
      "defaultValue": "",
      "metadata": {
        "description": "Sets the location for all resources in the cluster"
      },
      "type": "string"
    },
    "masterEndpointDNSNamePrefix": {
      "metadata": {
        "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      },
      "type": "string"
    },
    "masterSubnet": {
      "defaultValue": "172.16.0.0/24",
      "metadata": {
        "description": "Sets the subnet of the master node(s)."
      },
      "type": "string"
    },
    "masterVMSize": {
      "allowedValues": [
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F8",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "nameSuffix": {
      "defaultValue": "31559618",
      "metadata": {
        "description": "A string hash of the master DNS name to uniquely identify the cluster."
      },
      "type": "string"
    },
    "sshRSAPublicKey": {
      "metadata": {
        "description": "SSH public key used for auth to all Linux machines.  Not Required.  If not set, you must provide a password key."
      },
      "type": "string"
    },
    "targetEnvironment": {
      "defaultValue": "AzureCloud",
      "metadata": {
        "description": "The azure deploy environment. Currently support: AzureCloud, AzureChinaCloud"
      },
      "type": "string"
    }
  },
  "variables": {
    "adminUsername": "[parameters('linuxAdminUsername')]",
    "agentpri0AccountName": "[concat(variables('storageAccountBaseName'), 'agnt0')]",
    "agentpri0Count": "[parameters('agentpri0Count')]",
    "agentpri0NSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('agentpri0NSGName'))]",
    "agentpri0NSGName": "[concat(variables('orchestratorName'), '-agentpri0-nsg-', variables('nameSuffix'))]",
    "agentpri0StorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),0)]",
    "agentpri0StorageAccountsCount": "[variables('maxStorageAccountsPerAgent')]",
    "agentpri0Subnet": "[parameters('agentpri0Subnet')]",
    "agentpri0SubnetName": "[concat(variables('orchestratorName'), '-agentpri0Subnet')]",
    "agentpri0VMNamePrefix": "[concat(variables('orchestratorName'), '-agentpri0-', variables('nameSuffix'))]",
    "agentpri0VMSize": "[parameters('agentpri0VMSize')]",
    "agentpri0VnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('agentpri0SubnetName'))]",
    "agentpri10AccountName": "[concat(variables('storageAccountBaseName'), 'agnt10')]",
    "agentpri10Count": "[parameters('agentpri10Count')]",
    "agentpri10NSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('agentpri10NSGName'))]",
    "agentpri10NSGName": "[concat(variables('orchestratorName'), '-agentpri10-nsg-', variables('nameSuffix'))]",
    "agentpri10StorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),10)]",
    "agentpri10StorageAccountsCount": "[variables('maxStorageAccountsPerAgent')]",
    "agentpri10Subnet": "[parameters('agentpri10Subnet')]",
    "agentpri10SubnetName": "[concat(variables('orchestratorName'), '-agentpri10Subnet')]",
    "agentpri10VMNamePrefix": "[concat(variables('orchestratorName'), '-agentpri10-', variables('nameSuffix'))]",
    "agentpri10VMSize": "[parameters('agentpri10VMSize')]",
    "agentpri10VnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('agentpri10SubnetName'))]",
    "agentpri1AccountName": "[concat(variables('storageAccountBaseName'), 'agnt1')]",
    "agentpri1Count": "[parameters('agentpri1Count')]",
    "agentpri1NSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('agentpri1NSGName'))]",
    "agentpri1NSGName": "[concat(variables('orchestratorName'), '-agentpri1-nsg-', variables('nameSuffix'))]",
    "agentpri1StorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),1)]",
    "agentpri1StorageAccountsCount": "[variables('maxStorageAccountsPerAgent')]",
    "agentpri1Subnet": "[parameters('agentpri1Subnet')]",
    "agentpri1SubnetName": "[concat(variables('orchestratorName'), '-agentpri1Subnet')]",
    "agentpri1VMNamePrefix": "[concat(variables('orchestratorName'), '-agentpri1-', variables('nameSuffix'))]",
    "agentpri1VMSize": "[parameters('agentpri1VMSize')]",
    "agentpri1VnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('agentpri1SubnetName'))]",
    "agentpri2AccountName": "[concat(variables('storageAccountBaseName'), 'agnt2')]",
    "agentpri2Count": "[parameters('agentpri2Count')]",
    "agentpri2NSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('agentpri2NSGName'))]",
    "agentpri2NSGName": "[concat(variables('orchestratorName'), '-agentpri2-nsg-', variables('nameSuffix'))]",
    "agentpri2StorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),2)]",
    "agentpri2StorageAccountsCount": "[variables('maxStorageAccountsPerAgent')]",
    "agentpri2Subnet": "[parameters('agentpri2Subnet')]",
    "agentpri2SubnetName": "[concat(variables('orchestratorName'), '-agentpri2Subnet')]",
    "agentpri2VMNamePrefix": "[concat(variables('orchestratorName'), '-agentpri2-', variables('nameSuffix'))]",
    "agentpri2VMSize": "[parameters('agentpri2VMSize')]",
    "agentpri2VnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('agentpri2SubnetName'))]",
    "agentpri3AccountName": "[concat(variables('storageAccountBaseName'), 'agnt3')]",
    "agentpri3Count": "[parameters('agentpri3Count')]",
    "agentpri3NSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('agentpri3NSGName'))]",
    "agentpri3NSGName": "[concat(variables('orchestratorName'), '-agentpri3-nsg-', variables('nameSuffix'))]",
    "agentpri3StorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),3)]",
    "agentpri3StorageAccountsCount": "[variables('maxStorageAccountsPerAgent')]",
    "agentpri3Subnet": "[parameters('agentpri3Subnet')]",
    "agentpri3SubnetName": "[concat(variables('orchestratorName'), '-agentpri3Subnet')]",
    "agentpri3VMNamePrefix": "[concat(variables('orchestratorName'), '-agentpri3-', variables('nameSuffix'))]",
    "agentpri3VMSize": "[parameters('agentpri3VMSize')]",
    "agentpri3VnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('agentpri3SubnetName'))]",
    "agentpri4AccountName": "[concat(variables('storageAccountBaseName'), 'agnt4')]",
    "agentpri4Count": "[parameters('agentpri4Count')]",
    "agentpri4NSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('agentpri4NSGName'))]",
    "agentpri4NSGName": "[concat(variables('orchestratorName'), '-agentpri4-nsg-', variables('nameSuffix'))]",
    "agentpri4StorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),4)]",
    "agentpri4StorageAccountsCount": "[variables('maxStorageAccountsPerAgent')]",
    "agentpri4Subnet": "[parameters('agentpri4Subnet')]",
    "agentpri4SubnetName": "[concat(variables('orchestratorName'), '-agentpri4Subnet')]",
    "agentpri4VMNamePrefix": "[concat(variables('orchestratorName'), '-agentpri4-', variables('nameSuffix'))]",
    "agentpri4VMSize": "[parameters('agentpri4VMSize')]",
    "agentpri4VnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('agentpri4SubnetName'))]",
    "agentpri5AccountName": "[concat(variables('storageAccountBaseName'), 'agnt5')]",
    "agentpri5Count": "[parameters('agentpri5Count')]",
    "agentpri5NSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('agentpri5NSGName'))]",
    "agentpri5NSGName": "[concat(variables('orchestratorName'), '-agentpri5-nsg-', variables('nameSuffix'))]",
    "agentpri5StorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),5)]",
    "agentpri5StorageAccountsCount": "[variables('maxStorageAccountsPerAgent')]",
    "agentpri5Subnet": "[parameters('agentpri5Subnet')]",
    "agentpri5SubnetName": "[concat(variables('orchestratorName'), '-agentpri5Subnet')]",
    "agentpri5VMNamePrefix": "[concat(variables('orchestratorName'), '-agentpri5-', variables('nameSuffix'))]",
    "agentpri5VMSize": "[parameters('agentpri5VMSize')]",
    "agentpri5VnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('agentpri5SubnetName'))]",
    "agentpri6AccountName": "[concat(variables('storageAccountBaseName'), 'agnt6')]",
    "agentpri6Count": "[parameters('agentpri6Count')]",
    "agentpri6NSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('agentpri6NSGName'))]",
    "agentpri6NSGName": "[concat(variables('orchestratorName'), '-agentpri6-nsg-', variables('nameSuffix'))]",
    "agentpri6StorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),6)]",
    "agentpri6StorageAccountsCount": "[variables('maxStorageAccountsPerAgent')]",
    "agentpri6Subnet": "[parameters('agentpri6Subnet')]",
    "agentpri6SubnetName": "[concat(variables('orchestratorName'), '-agentpri6Subnet')]",
    "agentpri6VMNamePrefix": "[concat(variables('orchestratorName'), '-agentpri6-', variables('nameSuffix'))]",
    "agentpri6VMSize": "[parameters('agentpri6VMSize')]",
    "agentpri6VnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('agentpri6SubnetName'))]",
    "agentpri7AccountName": "[concat(variables('storageAccountBaseName'), 'agnt7')]",
    "agentpri7Count": "[parameters('agentpri7Count')]",
    "agentpri7NSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('agentpri7NSGName'))]",
    "agentpri7NSGName": "[concat(variables('orchestratorName'), '-agentpri7-nsg-', variables('nameSuffix'))]",
    "agentpri7StorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),7)]",
    "agentpri7StorageAccountsCount": "[variables('maxStorageAccountsPerAgent')]",
    "agentpri7Subnet": "[parameters('agentpri7Subnet')]",
    "agentpri7SubnetName": "[concat(variables('orchestratorName'), '-agentpri7Subnet')]",
    "agentpri7VMNamePrefix": "[concat(variables('orchestratorName'), '-agentpri7-', variables('nameSuffix'))]",
    "agentpri7VMSize": "[parameters('agentpri7VMSize')]",
    "agentpri7VnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('agentpri7SubnetName'))]",
    "agentpri8AccountName": "[concat(variables('storageAccountBaseName'), 'agnt8')]",
    "agentpri8Count": "[parameters('agentpri8Count')]",
    "agentpri8NSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('agentpri8NSGName'))]",
    "agentpri8NSGName": "[concat(variables('orchestratorName'), '-agentpri8-nsg-', variables('nameSuffix'))]",
    "agentpri8StorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),8)]",
    "agentpri8StorageAccountsCount": "[variables('maxStorageAccountsPerAgent')]",
    "agentpri8Subnet": "[parameters('agentpri8Subnet')]",
    "agentpri8SubnetName": "[concat(variables('orchestratorName'), '-agentpri8Subnet')]",
    "agentpri8VMNamePrefix": "[concat(variables('orchestratorName'), '-agentpri8-', variables('nameSuffix'))]",
    "agentpri8VMSize": "[parameters('agentpri8VMSize')]",
    "agentpri8VnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('agentpri8SubnetName'))]",
    "agentpri9AccountName": "[concat(variables('storageAccountBaseName'), 'agnt9')]",
    "agentpri9Count": "[parameters('agentpri9Count')]",
    "agentpri9NSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('agentpri9NSGName'))]",
    "agentpri9NSGName": "[concat(variables('orchestratorName'), '-agentpri9-nsg-', variables('nameSuffix'))]",
    "agentpri9StorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),9)]",
    "agentpri9StorageAccountsCount": "[variables('maxStorageAccountsPerAgent')]",
    "agentpri9Subnet": "[parameters('agentpri9Subnet')]",
    "agentpri9SubnetName": "[concat(variables('orchestratorName'), '-agentpri9Subnet')]",
    "agentpri9VMNamePrefix": "[concat(variables('orchestratorName'), '-agentpri9-', variables('nameSuffix'))]",
    "agentpri9VMSize": "[parameters('agentpri9VMSize')]",
    "agentpri9VnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('agentpri9SubnetName'))]",
    "agentpublic1AccountName": "[concat(variables('storageAccountBaseName'), 'agnt11')]",
    "agentpublic1Count": "[parameters('agentpublic1Count')]",
    "agentpublic1EndpointDNSNamePrefix": "[tolower(parameters('agentpublic1EndpointDNSNamePrefix'))]",
    "agentpublic1IPAddressName": "[concat(variables('orchestratorName'), '-agent-ip-', variables('agentpublic1EndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
    "agentpublic1LbBackendPoolName": "[concat(variables('orchestratorName'), '-agentpublic1-', variables('nameSuffix'))]",
    "agentpublic1LbID": "[resourceId('Microsoft.Network/loadBalancers',variables('agentpublic1LbName'))]",
    "agentpublic1LbIPConfigID": "[concat(variables('agentpublic1LbID'),'/frontendIPConfigurations/', variables('agentpublic1LbIPConfigName'))]",
    "agentpublic1LbIPConfigName": "[concat(variables('orchestratorName'), '-agentpublic1-', variables('nameSuffix'))]",
    "agentpublic1LbName": "[concat(variables('orchestratorName'), '-agentpublic1-', variables('nameSuffix'))]",
    "agentpublic1NSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('agentpublic1NSGName'))]",
    "agentpublic1NSGName": "[concat(variables('orchestratorName'), '-agentpublic1-nsg-', variables('nameSuffix'))]",
    "agentpublic1StorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),11)]",
    "agentpublic1StorageAccountsCount": "[variables('maxStorageAccountsPerAgent')]",
    "agentpublic1Subnet": "[parameters('agentpublic1Subnet')]",
    "agentpublic1SubnetName": "[concat(variables('orchestratorName'), '-agentpublic1Subnet')]",
    "agentpublic1VMNamePrefix": "[concat(variables('orchestratorName'), '-agentpublic1-', variables('nameSuffix'))]",
    "agentpublic1VMSize": "[parameters('agentpublic1VMSize')]",
    "agentpublic1VnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('agentpublic1SubnetName'))]",
    "apiVersionDefault": "2016-03-30",
    "apiVersionStorage": "2015-06-15",
    "dataStorageAccountPrefixSeed": 97,
    "dcosBootstrapURL": "[parameters('dcosBootstrapURL')]",
    "location": "[variables('locations')[mod(add(2,length(parameters('location'))),add(1,length(parameters('location'))))]]",
    "locations": [
      "[resourceGroup().location]",
      "[parameters('location')]"
    ],
    "masterAvailabilitySet": "[concat(variables('orchestratorName'), '-master-availabilitySet-', variables('nameSuffix'))]",
    "masterCount": 3,
    "masterEndpointDNSNamePrefix": "[tolower(parameters('masterEndpointDNSNamePrefix'))]",
    "masterFirstAddrOctet4": "[variables('masterFirstAddrOctets')[3]]",
    "masterFirstAddrOctets": "[split(parameters('firstConsecutiveStaticIP'),'.')]",
    "masterFirstAddrPrefix": "[concat(variables('masterFirstAddrOctets')[0],'.',variables('masterFirstAddrOctets')[1],'.',variables('masterFirstAddrOctets')[2],'.')]",
    "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
    "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
    "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
    "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
    "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
    "masterNSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('masterNSGName'))]",
    "masterNSGName": "[concat(variables('orchestratorName'), '-master-nsg-', variables('nameSuffix'))]",
    "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
    "masterStorageAccountExhibitorName": "[concat(variables('storageAccountBaseName'), 'exhb0')]",
    "masterStorageAccountName": "[concat(variables('storageAccountBaseName'), 'mstr0')]",
    "masterSubnet": "[parameters('masterSubnet')]",
    "masterSubnetName": "[concat(variables('orchestratorName'), '-masterSubnet')]",
    "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
    "masterVMNic": [
      "[concat(variables('masterVMNamePrefix'), 'nic-0')]",
      "[concat(variables('masterVMNamePrefix'), 'nic-1')]",
      "[concat(variables('masterVMNamePrefix'), 'nic-2')]",
      "[concat(variables('masterVMNamePrefix'), 'nic-3')]",
      "[concat(variables('masterVMNamePrefix'), 'nic-4')]",
      "[concat(variables('masterVMNamePrefix'), 'nic-5')]",
      "[concat(variables('masterVMNamePrefix'), 'nic-6')]"
    ],
    "masterVMSize": "[parameters('masterVMSize')]",
    "masterVnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('masterSubnetName'))]",
    "maxStorageAccountsPerAgent": "[div(variables('maxVMsPerPool'),variables('maxVMsPerStorageAccount'))]",
    "maxVMsPerPool": 100,
    "maxVMsPerStorageAccount": 20,
    "nameSuffix": "[parameters('nameSuffix')]",
    "oauthEnabled": "false",
    "orchestratorName": "dcos",
    "osImageOffer": "UbuntuServer",
    "osImagePublisher": "Canonical",
    "osImageSKU": "16.04.0-LTS",
    "osImageVersion": "16.04.201606270",
    "sshKeyPath": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]",
    "sshRSAPublicKey": "[parameters('sshRSAPublicKey')]",
    "storageAccountBaseName": "[uniqueString(concat(variables('masterEndpointDNSNamePrefix'),variables('location'),variables('orchestratorName')))]",
    "storageAccountPrefixes": [
      "0",
      "6",
      "c",
      "i",
      "o",
      "u",
      "1",
      "7",
      "d",
      "j",
      "p",
      "v",
      "2",
      "8",
      "e",
      "k",
      "q",
      "w",
      "3",
      "9",
      "f",
      "l",
      "r",
      "x",
      "4",
      "a",
      "g",
      "m",
      "s",
      "y",
      "5",
      "b",
      "h",
      "n",
      "t",
      "z"
    ],
    "storageAccountPrefixesCount": "[length(variables('storageAccountPrefixes'))]",
    "storageAccountType": "Standard_LRS",
    "targetEnvironment": "[parameters('targetEnvironment')]",
    "virtualNetworkName": "[concat(variables('orchestratorName'), '-vnet-', variables('nameSuffix'))]",
    "vmSizesMap": {
      "Basic_A2": {
        "storageAccountType": "Standard_LRS"
      },
      "Basic_A3": {
        "storageAccountType": "Standard_LRS"
      },
      "Basic_A4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A10": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A7": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A9": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D15_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D5_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_DS11": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS15_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS5_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F16": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F16s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F2s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F4s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F8s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_G1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_GS1": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS5": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_H16": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16m": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16mr": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16r": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H8m": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC24": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC24r": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV24": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV6": {
        "storageAccountType": "Standard_LRS"
      }
    },
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('agentpri0NSGName')]",
      "properties": {
        "securityRules": []
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentpri0StorageAccountsCount')]",
        "name": "loop"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri0AccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentpri0VMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[variables('vnetID')]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri0AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri0AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri0AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri0AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri0AccountName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpri0VMNamePrefix'), '-vmss')]",
      "properties": {
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "nic",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpri0VnetSubnetID')]"
                        }
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[variables('adminUsername')]",
            "computerNamePrefix": "[variables('agentpri0VMNamePrefix')]",
            "customData": "[base64(concat('#cloud-config\n\n', '{\"bootcmd\":[\"bash -c \\\"if [ ! -f /var/lib/sdb-gpt ];then echo DCOS-5890;parted -s /dev/sdb mklabel gpt;touch /var/lib/sdb-gpt;fi\\\"\"],\"disk_setup\":{\"ephemeral0\":{\"layout\":[50,50],\"overwrite\":true,\"table_type\":\"gpt\"}},\"fs_setup\":[{\"device\":\"ephemeral0.1\",\"filesystem\":\"ext4\",\"overwrite\":true},{\"device\":\"ephemeral0.2\",\"filesystem\":\"ext4\",\"overwrite\":true}],\"mounts\":[[\"ephemeral0.1\",\"/var/lib/mesos\"],[\"ephemeral0.2\",\"/var/lib/docker\"]],\"runcmd\":[[\"ln\",\"-s\",\"/bin/rm\",\"/usr/bin/rm\"],[\"ln\",\"-s\",\"/bin/mkdir\",\"/usr/bin/mkdir\"],[\"ln\",\"-s\",\"/bin/tar\",\"/usr/bin/tar\"],[\"ln\",\"-s\",\"/bin/ln\",\"/usr/bin/ln\"],[\"ln\",\"-s\",\"/bin/cp\",\"/usr/bin/cp\"],[\"ln\",\"-s\",\"/bin/systemctl\",\"/usr/bin/systemctl\"],[\"ln\",\"-s\",\"/bin/mount\",\"/usr/bin/mount\"],[\"ln\",\"-s\",\"/bin/bash\",\"/usr/bin/bash\"],[\"ln\",\"-s\",\"/usr/sbin/useradd\",\"/usr/bin/useradd\"],[\"systemctl\",\"disable\",\"--now\",\"resolvconf.service\"],[\"systemctl\",\"mask\",\"--now\",\"lxc-net.service\"],\"/opt/azure/containers/provision.sh\",[\"cp\",\"-p\",\"/etc/resolv.conf\",\"/tmp/resolv.conf\"],[\"rm\",\"-f\",\"/etc/resolv.conf\"],[\"cp\",\"-p\",\"/tmp/resolv.conf\",\"/etc/resolv.conf\"],[\"systemctl\",\"start\",\"dcos-docker-install.service\"],[\"systemctl\",\"start\",\"dcos-config-writer.service\"],[\"systemctl\",\"restart\",\"systemd-journald.service\"],[\"systemctl\",\"restart\",\"docker.service\"],[\"systemctl\",\"start\",\"dcos-link-env.service\"],[\"systemctl\",\"enable\",\"dcos-setup.service\"],[\"systemctl\",\"--no-block\",\"start\",\"dcos-setup.service\"]],\"write_files\":[{\"content\":\"https://dcosio.azureedge.net/dcos/stable\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/repository-url\",\"permissions\":\"0644\"},{\"content\":\"DCOS_ENVIRONMENT=',variables('targetEnvironment'),'\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/dcos-deploy-environment\",\"permissions\":\"0644\"},{\"content\":\"[\\\"dcos-config--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\", \\\"dcos-metadata--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\"]\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/cluster-packages.json\",\"permissions\":\"0644\"},{\"content\":\"[Journal]\\nMaxLevelConsole=warning\\nRateLimitInterval=1s\\nRateLimitBurst=20000\\n\",\"owner\":\"root\",\"path\":\"/etc/systemd/journald.conf.d/dcos.conf\",\"permissions\":\"0644\"},{\"content\":\"rexray:\\n  loglevel: info\\n  modules:\\n    default-admin:\\n      host: tcp://127.0.0.1:61003\\n    default-docker:\\n      disabled: true\\n\",\"path\":\"/etc/rexray/config.yml\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nAfter=network-online.target\\nWants=network-online.target\\n[Service]\\nType=oneshot\\nEnvironment=DEBIAN_FRONTEND=noninteractive\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStart=/usr/bin/bash -c \\\"try=1;until dpkg -D3 -i /var/lib/mesos/dl/d.deb || ((try\\u003e9));do echo retry $((try++));sleep $((try*try));done;systemctl --now start docker;systemctl restart docker.socket\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-docker-install.service\",\"permissions\":\"0644\"},{\"content\":\"[Service]\\nRestart=always\\nStartLimitInterval=0\\nRestartSec=15\\nExecStartPre=-/sbin/ip link del docker0\\nExecStart=\\nExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\\n\",\"path\":\"/etc/systemd/system/docker.service.d/execstart.conf\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nPartOf=docker.service\\n[Socket]\\nListenStream=/var/run/docker.sock\\nSocketMode=0660\\nSocketUser=root\\nSocketGroup=docker\\nListenStream=2375\\nBindIPv6Only=both\\n[Install]\\nWantedBy=sockets.target\\n\",\"path\":\"/etc/systemd/system/docker.socket\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nRequires=dcos-setup.service\\nAfter=dcos-setup.service\\n[Service]\\nType=oneshot\\nEnvironmentFile=/etc/environment\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/usr/bin/bash -c \\\"echo $(detect_ip) $(hostname) \\u003e /etc/hosts\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-config-writer.service\",\"permissions\":\"0644\"},{\"content\":\"MESOS_CLUSTER=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/mesos-master-provider\"},{\"content\":\"ADMINROUTER_ACTIVATE_AUTH_MODULE=',variables('oauthEnabled'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/adminrouter.env\"},{\"content\":\"[\\\"', reference(variables('masterVMNic')[0]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[1]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[2]).ipConfigurations[0].properties.privateIPAddress,'\\\"]\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/master_list\"},{\"content\":\"EXHIBITOR_BACKEND=AZURE\\nAZURE_CONTAINER=dcos-exhibitor\\nAZURE_PREFIX=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor\"},{\"content\":\"com.netflix.exhibitor.azure.account-name=',variables('masterStorageAccountExhibitorName'),'\\ncom.netflix.exhibitor.azure.account-key=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('masterStorageAccountExhibitorName')), '2015-06-15').key1,'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor.properties\"},{\"content\":\"{\\\"uiConfiguration\\\":{\\\"plugins\\\":{\\\"banner\\\":{\\\"enabled\\\":false,\\\"backgroundColor\\\":\\\"#1E232F\\\",\\\"foregroundColor\\\":\\\"#FFFFFF\\\",\\\"headerTitle\\\":null,\\\"headerContent\\\":null,\\\"footerContent\\\":null,\\\"imagePath\\\":null,\\\"dismissible\\\":null},\\\"branding\\\":{\\\"enabled\\\":false},\\\"external-links\\\": {\\\"enabled\\\": false},\\n\\n\\\"authentication\\\":{\\\"enabled\\\":false},\\n\\n\\\"oauth\\\":{\\\"enabled\\\":',variables('oauthEnabled'),',\\\"authHost\\\":\\\"https://dcos.auth0.com\\\"},\\n\\n\\n\\\"tracking\\\":{\\\"enabled\\\":false}}}}\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/ui-config.json\"},{\"content\":\"{}\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/pkginfo.json\"},{\"content\":\"[Unit]\\nBefore=dcos.target\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\nExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\",\"path\":\"/etc/systemd/system/dcos-link-env.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Download DC/OS to this host.\\nAfter=network-online.target\\nWants=network-online.target\\nConditionPathExists=!/opt/mesosphere/\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /var/lib/mesos/dl/bootstrap.tar.xz ',variables('dcosBootstrapURL'),'\\nExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\nExecStart=/usr/bin/tar -axf /var/lib/mesos/dl/bootstrap.tar.xz -C /opt/mesosphere\\nExecStartPost=-/usr/bin/rm -f /var/lib/mesos/dl/bootstrap.tar.xz\\n\",\"path\":\"/etc/systemd/system/dcos-download.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Specialize DC/OS for this host.\\nRequires=dcos-download.service\\nAfter=dcos-download.service\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n[Install]\\nWantedBy=multi-user.target\\n\",\"path\":\"/etc/systemd/system/dcos-setup.service\",\"permissions\":\"0644\"},{\"content\":\"\",\"path\":\"/etc/mesosphere/roles/azure\"},{\"content\":\"#!/bin/bash\\n\\n\\nMESOSDIR=/var/lib/mesos/dl\\nmkdir $MESOSDIR\\n\\n\\n# load the env vars\\n. /etc/mesosphere/setup-flags/dcos-deploy-environment\\n\\n\\n# default dc/os component download address (Azure CDN)\\nDOCKER_ENGINE_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libltdl7_2.4.6-0.1_amd64.deb\\n\\n\\ncase $DCOS_ENVIRONMENT in\\n# because of Chinese GreatWall Firewall, the default packages on Azure CDN is blocked. So the following Chinese local mirror url should be used instead.\\nAzureChinaCloud)\\nDOCKER_ENGINE_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libltdl7_2.4.6-0.1_amd64.deb\\n;;\\nesac\\n\\n\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/d.deb $DOCKER_ENGINE_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/1.deb $LIBIPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/2.deb $IPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/3.deb $UNZIP_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/4.deb $LIBLTDL_DOWNLOAD_URL \\u0026\\nwait\\n\\n\\nfor i in {1..300}; do\\ndpkg -i $MESOSDIR/{1,2,3,4}.deb\\nif [ \\\"$?\\\" = \\\"0\\\" ]\\nthen\\necho \\\"succeeded\\\"\\nbreak\\nfi\\nsleep 1\\ndone\\n\\n\\ntouch /etc/mesosphere/roles/slave\\n\",\"owner\":\"root\",\"path\":\"/opt/azure/containers/provision.sh\",\"permissions\":\"0744\"},{\"content\":\"\",\"owner\":\"root\",\"path\":\"/var/lib/dcos/mesos-slave-common\",\"permissions\":\"0644\"}]}'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('sshRSAPublicKey')]",
                    "path": "[variables('sshKeyPath')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": {
              "offer": "[variables('osImageOffer')]",
              "publisher": "[variables('osImagePublisher')]",
              "sku": "[variables('osImageSKU')]",
              "version": "[variables('osImageVersion')]"
            },
            "osDisk": {
              "caching": "ReadOnly",
              "createOption": "FromImage",
              "name": "vmssosdisk",
              "vhdContainers": [
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri0AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri0AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri0AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri0AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri0StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri0AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]"
              ]
            }
          }
        }
      },
      "sku": {
        "capacity": "[variables('agentpri0Count')]",
        "name": "[variables('agentpri0VMSize')]",
        "tier": "Standard"
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('agentpri0VMNamePrefix'), '-vmss')]"
      },
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('agentpri1NSGName')]",
      "properties": {
        "securityRules": []
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentpri1StorageAccountsCount')]",
        "name": "loop"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri1AccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentpri1VMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[variables('vnetID')]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri1AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri1AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri1AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri1AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri1AccountName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpri1VMNamePrefix'), '-vmss')]",
      "properties": {
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "nic",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpri1VnetSubnetID')]"
                        }
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[variables('adminUsername')]",
            "computerNamePrefix": "[variables('agentpri1VMNamePrefix')]",
            "customData": "[base64(concat('#cloud-config\n\n', '{\"bootcmd\":[\"bash -c \\\"if [ ! -f /var/lib/sdb-gpt ];then echo DCOS-5890;parted -s /dev/sdb mklabel gpt;touch /var/lib/sdb-gpt;fi\\\"\"],\"disk_setup\":{\"ephemeral0\":{\"layout\":[50,50],\"overwrite\":true,\"table_type\":\"gpt\"}},\"fs_setup\":[{\"device\":\"ephemeral0.1\",\"filesystem\":\"ext4\",\"overwrite\":true},{\"device\":\"ephemeral0.2\",\"filesystem\":\"ext4\",\"overwrite\":true}],\"mounts\":[[\"ephemeral0.1\",\"/var/lib/mesos\"],[\"ephemeral0.2\",\"/var/lib/docker\"]],\"runcmd\":[[\"ln\",\"-s\",\"/bin/rm\",\"/usr/bin/rm\"],[\"ln\",\"-s\",\"/bin/mkdir\",\"/usr/bin/mkdir\"],[\"ln\",\"-s\",\"/bin/tar\",\"/usr/bin/tar\"],[\"ln\",\"-s\",\"/bin/ln\",\"/usr/bin/ln\"],[\"ln\",\"-s\",\"/bin/cp\",\"/usr/bin/cp\"],[\"ln\",\"-s\",\"/bin/systemctl\",\"/usr/bin/systemctl\"],[\"ln\",\"-s\",\"/bin/mount\",\"/usr/bin/mount\"],[\"ln\",\"-s\",\"/bin/bash\",\"/usr/bin/bash\"],[\"ln\",\"-s\",\"/usr/sbin/useradd\",\"/usr/bin/useradd\"],[\"systemctl\",\"disable\",\"--now\",\"resolvconf.service\"],[\"systemctl\",\"mask\",\"--now\",\"lxc-net.service\"],\"/opt/azure/containers/provision.sh\",[\"cp\",\"-p\",\"/etc/resolv.conf\",\"/tmp/resolv.conf\"],[\"rm\",\"-f\",\"/etc/resolv.conf\"],[\"cp\",\"-p\",\"/tmp/resolv.conf\",\"/etc/resolv.conf\"],[\"systemctl\",\"start\",\"dcos-docker-install.service\"],[\"systemctl\",\"start\",\"dcos-config-writer.service\"],[\"systemctl\",\"restart\",\"systemd-journald.service\"],[\"systemctl\",\"restart\",\"docker.service\"],[\"systemctl\",\"start\",\"dcos-link-env.service\"],[\"systemctl\",\"enable\",\"dcos-setup.service\"],[\"systemctl\",\"--no-block\",\"start\",\"dcos-setup.service\"]],\"write_files\":[{\"content\":\"https://dcosio.azureedge.net/dcos/stable\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/repository-url\",\"permissions\":\"0644\"},{\"content\":\"DCOS_ENVIRONMENT=',variables('targetEnvironment'),'\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/dcos-deploy-environment\",\"permissions\":\"0644\"},{\"content\":\"[\\\"dcos-config--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\", \\\"dcos-metadata--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\"]\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/cluster-packages.json\",\"permissions\":\"0644\"},{\"content\":\"[Journal]\\nMaxLevelConsole=warning\\nRateLimitInterval=1s\\nRateLimitBurst=20000\\n\",\"owner\":\"root\",\"path\":\"/etc/systemd/journald.conf.d/dcos.conf\",\"permissions\":\"0644\"},{\"content\":\"rexray:\\n  loglevel: info\\n  modules:\\n    default-admin:\\n      host: tcp://127.0.0.1:61003\\n    default-docker:\\n      disabled: true\\n\",\"path\":\"/etc/rexray/config.yml\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nAfter=network-online.target\\nWants=network-online.target\\n[Service]\\nType=oneshot\\nEnvironment=DEBIAN_FRONTEND=noninteractive\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStart=/usr/bin/bash -c \\\"try=1;until dpkg -D3 -i /var/lib/mesos/dl/d.deb || ((try\\u003e9));do echo retry $((try++));sleep $((try*try));done;systemctl --now start docker;systemctl restart docker.socket\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-docker-install.service\",\"permissions\":\"0644\"},{\"content\":\"[Service]\\nRestart=always\\nStartLimitInterval=0\\nRestartSec=15\\nExecStartPre=-/sbin/ip link del docker0\\nExecStart=\\nExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\\n\",\"path\":\"/etc/systemd/system/docker.service.d/execstart.conf\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nPartOf=docker.service\\n[Socket]\\nListenStream=/var/run/docker.sock\\nSocketMode=0660\\nSocketUser=root\\nSocketGroup=docker\\nListenStream=2375\\nBindIPv6Only=both\\n[Install]\\nWantedBy=sockets.target\\n\",\"path\":\"/etc/systemd/system/docker.socket\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nRequires=dcos-setup.service\\nAfter=dcos-setup.service\\n[Service]\\nType=oneshot\\nEnvironmentFile=/etc/environment\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/usr/bin/bash -c \\\"echo $(detect_ip) $(hostname) \\u003e /etc/hosts\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-config-writer.service\",\"permissions\":\"0644\"},{\"content\":\"MESOS_CLUSTER=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/mesos-master-provider\"},{\"content\":\"ADMINROUTER_ACTIVATE_AUTH_MODULE=',variables('oauthEnabled'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/adminrouter.env\"},{\"content\":\"[\\\"', reference(variables('masterVMNic')[0]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[1]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[2]).ipConfigurations[0].properties.privateIPAddress,'\\\"]\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/master_list\"},{\"content\":\"EXHIBITOR_BACKEND=AZURE\\nAZURE_CONTAINER=dcos-exhibitor\\nAZURE_PREFIX=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor\"},{\"content\":\"com.netflix.exhibitor.azure.account-name=',variables('masterStorageAccountExhibitorName'),'\\ncom.netflix.exhibitor.azure.account-key=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('masterStorageAccountExhibitorName')), '2015-06-15').key1,'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor.properties\"},{\"content\":\"{\\\"uiConfiguration\\\":{\\\"plugins\\\":{\\\"banner\\\":{\\\"enabled\\\":false,\\\"backgroundColor\\\":\\\"#1E232F\\\",\\\"foregroundColor\\\":\\\"#FFFFFF\\\",\\\"headerTitle\\\":null,\\\"headerContent\\\":null,\\\"footerContent\\\":null,\\\"imagePath\\\":null,\\\"dismissible\\\":null},\\\"branding\\\":{\\\"enabled\\\":false},\\\"external-links\\\": {\\\"enabled\\\": false},\\n\\n\\\"authentication\\\":{\\\"enabled\\\":false},\\n\\n\\\"oauth\\\":{\\\"enabled\\\":',variables('oauthEnabled'),',\\\"authHost\\\":\\\"https://dcos.auth0.com\\\"},\\n\\n\\n\\\"tracking\\\":{\\\"enabled\\\":false}}}}\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/ui-config.json\"},{\"content\":\"{}\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/pkginfo.json\"},{\"content\":\"[Unit]\\nBefore=dcos.target\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\nExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\",\"path\":\"/etc/systemd/system/dcos-link-env.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Download DC/OS to this host.\\nAfter=network-online.target\\nWants=network-online.target\\nConditionPathExists=!/opt/mesosphere/\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /var/lib/mesos/dl/bootstrap.tar.xz ',variables('dcosBootstrapURL'),'\\nExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\nExecStart=/usr/bin/tar -axf /var/lib/mesos/dl/bootstrap.tar.xz -C /opt/mesosphere\\nExecStartPost=-/usr/bin/rm -f /var/lib/mesos/dl/bootstrap.tar.xz\\n\",\"path\":\"/etc/systemd/system/dcos-download.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Specialize DC/OS for this host.\\nRequires=dcos-download.service\\nAfter=dcos-download.service\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n[Install]\\nWantedBy=multi-user.target\\n\",\"path\":\"/etc/systemd/system/dcos-setup.service\",\"permissions\":\"0644\"},{\"content\":\"\",\"path\":\"/etc/mesosphere/roles/azure\"},{\"content\":\"#!/bin/bash\\n\\n\\nMESOSDIR=/var/lib/mesos/dl\\nmkdir $MESOSDIR\\n\\n\\n# load the env vars\\n. /etc/mesosphere/setup-flags/dcos-deploy-environment\\n\\n\\n# default dc/os component download address (Azure CDN)\\nDOCKER_ENGINE_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libltdl7_2.4.6-0.1_amd64.deb\\n\\n\\ncase $DCOS_ENVIRONMENT in\\n# because of Chinese GreatWall Firewall, the default packages on Azure CDN is blocked. So the following Chinese local mirror url should be used instead.\\nAzureChinaCloud)\\nDOCKER_ENGINE_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libltdl7_2.4.6-0.1_amd64.deb\\n;;\\nesac\\n\\n\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/d.deb $DOCKER_ENGINE_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/1.deb $LIBIPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/2.deb $IPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/3.deb $UNZIP_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/4.deb $LIBLTDL_DOWNLOAD_URL \\u0026\\nwait\\n\\n\\nfor i in {1..300}; do\\ndpkg -i $MESOSDIR/{1,2,3,4}.deb\\nif [ \\\"$?\\\" = \\\"0\\\" ]\\nthen\\necho \\\"succeeded\\\"\\nbreak\\nfi\\nsleep 1\\ndone\\n\\n\\ntouch /etc/mesosphere/roles/slave\\n\",\"owner\":\"root\",\"path\":\"/opt/azure/containers/provision.sh\",\"permissions\":\"0744\"},{\"content\":\"\",\"owner\":\"root\",\"path\":\"/var/lib/dcos/mesos-slave-common\",\"permissions\":\"0644\"}]}'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('sshRSAPublicKey')]",
                    "path": "[variables('sshKeyPath')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": {
              "offer": "[variables('osImageOffer')]",
              "publisher": "[variables('osImagePublisher')]",
              "sku": "[variables('osImageSKU')]",
              "version": "[variables('osImageVersion')]"
            },
            "osDisk": {
              "caching": "ReadOnly",
              "createOption": "FromImage",
              "name": "vmssosdisk",
              "vhdContainers": [
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri1AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri1AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri1AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri1AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri1AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]"
              ]
            }
          }
        }
      },
      "sku": {
        "capacity": "[variables('agentpri1Count')]",
        "name": "[variables('agentpri1VMSize')]",
        "tier": "Standard"
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('agentpri1VMNamePrefix'), '-vmss')]"
      },
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('agentpri2NSGName')]",
      "properties": {
        "securityRules": []
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentpri2StorageAccountsCount')]",
        "name": "loop"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri2AccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentpri2VMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[variables('vnetID')]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri2AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri2AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri2AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri2AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri2AccountName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpri2VMNamePrefix'), '-vmss')]",
      "properties": {
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "nic",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpri2VnetSubnetID')]"
                        }
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[variables('adminUsername')]",
            "computerNamePrefix": "[variables('agentpri2VMNamePrefix')]",
            "customData": "[base64(concat('#cloud-config\n\n', '{\"bootcmd\":[\"bash -c \\\"if [ ! -f /var/lib/sdb-gpt ];then echo DCOS-5890;parted -s /dev/sdb mklabel gpt;touch /var/lib/sdb-gpt;fi\\\"\"],\"disk_setup\":{\"ephemeral0\":{\"layout\":[50,50],\"overwrite\":true,\"table_type\":\"gpt\"}},\"fs_setup\":[{\"device\":\"ephemeral0.1\",\"filesystem\":\"ext4\",\"overwrite\":true},{\"device\":\"ephemeral0.2\",\"filesystem\":\"ext4\",\"overwrite\":true}],\"mounts\":[[\"ephemeral0.1\",\"/var/lib/mesos\"],[\"ephemeral0.2\",\"/var/lib/docker\"]],\"runcmd\":[[\"ln\",\"-s\",\"/bin/rm\",\"/usr/bin/rm\"],[\"ln\",\"-s\",\"/bin/mkdir\",\"/usr/bin/mkdir\"],[\"ln\",\"-s\",\"/bin/tar\",\"/usr/bin/tar\"],[\"ln\",\"-s\",\"/bin/ln\",\"/usr/bin/ln\"],[\"ln\",\"-s\",\"/bin/cp\",\"/usr/bin/cp\"],[\"ln\",\"-s\",\"/bin/systemctl\",\"/usr/bin/systemctl\"],[\"ln\",\"-s\",\"/bin/mount\",\"/usr/bin/mount\"],[\"ln\",\"-s\",\"/bin/bash\",\"/usr/bin/bash\"],[\"ln\",\"-s\",\"/usr/sbin/useradd\",\"/usr/bin/useradd\"],[\"systemctl\",\"disable\",\"--now\",\"resolvconf.service\"],[\"systemctl\",\"mask\",\"--now\",\"lxc-net.service\"],\"/opt/azure/containers/provision.sh\",[\"cp\",\"-p\",\"/etc/resolv.conf\",\"/tmp/resolv.conf\"],[\"rm\",\"-f\",\"/etc/resolv.conf\"],[\"cp\",\"-p\",\"/tmp/resolv.conf\",\"/etc/resolv.conf\"],[\"systemctl\",\"start\",\"dcos-docker-install.service\"],[\"systemctl\",\"start\",\"dcos-config-writer.service\"],[\"systemctl\",\"restart\",\"systemd-journald.service\"],[\"systemctl\",\"restart\",\"docker.service\"],[\"systemctl\",\"start\",\"dcos-link-env.service\"],[\"systemctl\",\"enable\",\"dcos-setup.service\"],[\"systemctl\",\"--no-block\",\"start\",\"dcos-setup.service\"]],\"write_files\":[{\"content\":\"https://dcosio.azureedge.net/dcos/stable\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/repository-url\",\"permissions\":\"0644\"},{\"content\":\"DCOS_ENVIRONMENT=',variables('targetEnvironment'),'\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/dcos-deploy-environment\",\"permissions\":\"0644\"},{\"content\":\"[\\\"dcos-config--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\", \\\"dcos-metadata--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\"]\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/cluster-packages.json\",\"permissions\":\"0644\"},{\"content\":\"[Journal]\\nMaxLevelConsole=warning\\nRateLimitInterval=1s\\nRateLimitBurst=20000\\n\",\"owner\":\"root\",\"path\":\"/etc/systemd/journald.conf.d/dcos.conf\",\"permissions\":\"0644\"},{\"content\":\"rexray:\\n  loglevel: info\\n  modules:\\n    default-admin:\\n      host: tcp://127.0.0.1:61003\\n    default-docker:\\n      disabled: true\\n\",\"path\":\"/etc/rexray/config.yml\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nAfter=network-online.target\\nWants=network-online.target\\n[Service]\\nType=oneshot\\nEnvironment=DEBIAN_FRONTEND=noninteractive\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStart=/usr/bin/bash -c \\\"try=1;until dpkg -D3 -i /var/lib/mesos/dl/d.deb || ((try\\u003e9));do echo retry $((try++));sleep $((try*try));done;systemctl --now start docker;systemctl restart docker.socket\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-docker-install.service\",\"permissions\":\"0644\"},{\"content\":\"[Service]\\nRestart=always\\nStartLimitInterval=0\\nRestartSec=15\\nExecStartPre=-/sbin/ip link del docker0\\nExecStart=\\nExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\\n\",\"path\":\"/etc/systemd/system/docker.service.d/execstart.conf\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nPartOf=docker.service\\n[Socket]\\nListenStream=/var/run/docker.sock\\nSocketMode=0660\\nSocketUser=root\\nSocketGroup=docker\\nListenStream=2375\\nBindIPv6Only=both\\n[Install]\\nWantedBy=sockets.target\\n\",\"path\":\"/etc/systemd/system/docker.socket\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nRequires=dcos-setup.service\\nAfter=dcos-setup.service\\n[Service]\\nType=oneshot\\nEnvironmentFile=/etc/environment\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/usr/bin/bash -c \\\"echo $(detect_ip) $(hostname) \\u003e /etc/hosts\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-config-writer.service\",\"permissions\":\"0644\"},{\"content\":\"MESOS_CLUSTER=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/mesos-master-provider\"},{\"content\":\"ADMINROUTER_ACTIVATE_AUTH_MODULE=',variables('oauthEnabled'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/adminrouter.env\"},{\"content\":\"[\\\"', reference(variables('masterVMNic')[0]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[1]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[2]).ipConfigurations[0].properties.privateIPAddress,'\\\"]\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/master_list\"},{\"content\":\"EXHIBITOR_BACKEND=AZURE\\nAZURE_CONTAINER=dcos-exhibitor\\nAZURE_PREFIX=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor\"},{\"content\":\"com.netflix.exhibitor.azure.account-name=',variables('masterStorageAccountExhibitorName'),'\\ncom.netflix.exhibitor.azure.account-key=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('masterStorageAccountExhibitorName')), '2015-06-15').key1,'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor.properties\"},{\"content\":\"{\\\"uiConfiguration\\\":{\\\"plugins\\\":{\\\"banner\\\":{\\\"enabled\\\":false,\\\"backgroundColor\\\":\\\"#1E232F\\\",\\\"foregroundColor\\\":\\\"#FFFFFF\\\",\\\"headerTitle\\\":null,\\\"headerContent\\\":null,\\\"footerContent\\\":null,\\\"imagePath\\\":null,\\\"dismissible\\\":null},\\\"branding\\\":{\\\"enabled\\\":false},\\\"external-links\\\": {\\\"enabled\\\": false},\\n\\n\\\"authentication\\\":{\\\"enabled\\\":false},\\n\\n\\\"oauth\\\":{\\\"enabled\\\":',variables('oauthEnabled'),',\\\"authHost\\\":\\\"https://dcos.auth0.com\\\"},\\n\\n\\n\\\"tracking\\\":{\\\"enabled\\\":false}}}}\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/ui-config.json\"},{\"content\":\"{}\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/pkginfo.json\"},{\"content\":\"[Unit]\\nBefore=dcos.target\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\nExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\",\"path\":\"/etc/systemd/system/dcos-link-env.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Download DC/OS to this host.\\nAfter=network-online.target\\nWants=network-online.target\\nConditionPathExists=!/opt/mesosphere/\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /var/lib/mesos/dl/bootstrap.tar.xz ',variables('dcosBootstrapURL'),'\\nExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\nExecStart=/usr/bin/tar -axf /var/lib/mesos/dl/bootstrap.tar.xz -C /opt/mesosphere\\nExecStartPost=-/usr/bin/rm -f /var/lib/mesos/dl/bootstrap.tar.xz\\n\",\"path\":\"/etc/systemd/system/dcos-download.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Specialize DC/OS for this host.\\nRequires=dcos-download.service\\nAfter=dcos-download.service\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n[Install]\\nWantedBy=multi-user.target\\n\",\"path\":\"/etc/systemd/system/dcos-setup.service\",\"permissions\":\"0644\"},{\"content\":\"\",\"path\":\"/etc/mesosphere/roles/azure\"},{\"content\":\"#!/bin/bash\\n\\n\\nMESOSDIR=/var/lib/mesos/dl\\nmkdir $MESOSDIR\\n\\n\\n# load the env vars\\n. /etc/mesosphere/setup-flags/dcos-deploy-environment\\n\\n\\n# default dc/os component download address (Azure CDN)\\nDOCKER_ENGINE_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libltdl7_2.4.6-0.1_amd64.deb\\n\\n\\ncase $DCOS_ENVIRONMENT in\\n# because of Chinese GreatWall Firewall, the default packages on Azure CDN is blocked. So the following Chinese local mirror url should be used instead.\\nAzureChinaCloud)\\nDOCKER_ENGINE_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libltdl7_2.4.6-0.1_amd64.deb\\n;;\\nesac\\n\\n\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/d.deb $DOCKER_ENGINE_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/1.deb $LIBIPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/2.deb $IPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/3.deb $UNZIP_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/4.deb $LIBLTDL_DOWNLOAD_URL \\u0026\\nwait\\n\\n\\nfor i in {1..300}; do\\ndpkg -i $MESOSDIR/{1,2,3,4}.deb\\nif [ \\\"$?\\\" = \\\"0\\\" ]\\nthen\\necho \\\"succeeded\\\"\\nbreak\\nfi\\nsleep 1\\ndone\\n\\n\\ntouch /etc/mesosphere/roles/slave\\n\",\"owner\":\"root\",\"path\":\"/opt/azure/containers/provision.sh\",\"permissions\":\"0744\"},{\"content\":\"\",\"owner\":\"root\",\"path\":\"/var/lib/dcos/mesos-slave-common\",\"permissions\":\"0644\"}]}'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('sshRSAPublicKey')]",
                    "path": "[variables('sshKeyPath')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": {
              "offer": "[variables('osImageOffer')]",
              "publisher": "[variables('osImagePublisher')]",
              "sku": "[variables('osImageSKU')]",
              "version": "[variables('osImageVersion')]"
            },
            "osDisk": {
              "caching": "ReadOnly",
              "createOption": "FromImage",
              "name": "vmssosdisk",
              "vhdContainers": [
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri2AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri2AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri2AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri2AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri2StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri2AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]"
              ]
            }
          }
        }
      },
      "sku": {
        "capacity": "[variables('agentpri2Count')]",
        "name": "[variables('agentpri2VMSize')]",
        "tier": "Standard"
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('agentpri2VMNamePrefix'), '-vmss')]"
      },
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('agentpri3NSGName')]",
      "properties": {
        "securityRules": []
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentpri3StorageAccountsCount')]",
        "name": "loop"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri3AccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentpri3VMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[variables('vnetID')]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri3AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri3AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri3AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri3AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri3AccountName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpri3VMNamePrefix'), '-vmss')]",
      "properties": {
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "nic",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpri3VnetSubnetID')]"
                        }
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[variables('adminUsername')]",
            "computerNamePrefix": "[variables('agentpri3VMNamePrefix')]",
            "customData": "[base64(concat('#cloud-config\n\n', '{\"bootcmd\":[\"bash -c \\\"if [ ! -f /var/lib/sdb-gpt ];then echo DCOS-5890;parted -s /dev/sdb mklabel gpt;touch /var/lib/sdb-gpt;fi\\\"\"],\"disk_setup\":{\"ephemeral0\":{\"layout\":[50,50],\"overwrite\":true,\"table_type\":\"gpt\"}},\"fs_setup\":[{\"device\":\"ephemeral0.1\",\"filesystem\":\"ext4\",\"overwrite\":true},{\"device\":\"ephemeral0.2\",\"filesystem\":\"ext4\",\"overwrite\":true}],\"mounts\":[[\"ephemeral0.1\",\"/var/lib/mesos\"],[\"ephemeral0.2\",\"/var/lib/docker\"]],\"runcmd\":[[\"ln\",\"-s\",\"/bin/rm\",\"/usr/bin/rm\"],[\"ln\",\"-s\",\"/bin/mkdir\",\"/usr/bin/mkdir\"],[\"ln\",\"-s\",\"/bin/tar\",\"/usr/bin/tar\"],[\"ln\",\"-s\",\"/bin/ln\",\"/usr/bin/ln\"],[\"ln\",\"-s\",\"/bin/cp\",\"/usr/bin/cp\"],[\"ln\",\"-s\",\"/bin/systemctl\",\"/usr/bin/systemctl\"],[\"ln\",\"-s\",\"/bin/mount\",\"/usr/bin/mount\"],[\"ln\",\"-s\",\"/bin/bash\",\"/usr/bin/bash\"],[\"ln\",\"-s\",\"/usr/sbin/useradd\",\"/usr/bin/useradd\"],[\"systemctl\",\"disable\",\"--now\",\"resolvconf.service\"],[\"systemctl\",\"mask\",\"--now\",\"lxc-net.service\"],\"/opt/azure/containers/provision.sh\",[\"cp\",\"-p\",\"/etc/resolv.conf\",\"/tmp/resolv.conf\"],[\"rm\",\"-f\",\"/etc/resolv.conf\"],[\"cp\",\"-p\",\"/tmp/resolv.conf\",\"/etc/resolv.conf\"],[\"systemctl\",\"start\",\"dcos-docker-install.service\"],[\"systemctl\",\"start\",\"dcos-config-writer.service\"],[\"systemctl\",\"restart\",\"systemd-journald.service\"],[\"systemctl\",\"restart\",\"docker.service\"],[\"systemctl\",\"start\",\"dcos-link-env.service\"],[\"systemctl\",\"enable\",\"dcos-setup.service\"],[\"systemctl\",\"--no-block\",\"start\",\"dcos-setup.service\"]],\"write_files\":[{\"content\":\"https://dcosio.azureedge.net/dcos/stable\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/repository-url\",\"permissions\":\"0644\"},{\"content\":\"DCOS_ENVIRONMENT=',variables('targetEnvironment'),'\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/dcos-deploy-environment\",\"permissions\":\"0644\"},{\"content\":\"[\\\"dcos-config--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\", \\\"dcos-metadata--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\"]\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/cluster-packages.json\",\"permissions\":\"0644\"},{\"content\":\"[Journal]\\nMaxLevelConsole=warning\\nRateLimitInterval=1s\\nRateLimitBurst=20000\\n\",\"owner\":\"root\",\"path\":\"/etc/systemd/journald.conf.d/dcos.conf\",\"permissions\":\"0644\"},{\"content\":\"rexray:\\n  loglevel: info\\n  modules:\\n    default-admin:\\n      host: tcp://127.0.0.1:61003\\n    default-docker:\\n      disabled: true\\n\",\"path\":\"/etc/rexray/config.yml\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nAfter=network-online.target\\nWants=network-online.target\\n[Service]\\nType=oneshot\\nEnvironment=DEBIAN_FRONTEND=noninteractive\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStart=/usr/bin/bash -c \\\"try=1;until dpkg -D3 -i /var/lib/mesos/dl/d.deb || ((try\\u003e9));do echo retry $((try++));sleep $((try*try));done;systemctl --now start docker;systemctl restart docker.socket\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-docker-install.service\",\"permissions\":\"0644\"},{\"content\":\"[Service]\\nRestart=always\\nStartLimitInterval=0\\nRestartSec=15\\nExecStartPre=-/sbin/ip link del docker0\\nExecStart=\\nExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\\n\",\"path\":\"/etc/systemd/system/docker.service.d/execstart.conf\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nPartOf=docker.service\\n[Socket]\\nListenStream=/var/run/docker.sock\\nSocketMode=0660\\nSocketUser=root\\nSocketGroup=docker\\nListenStream=2375\\nBindIPv6Only=both\\n[Install]\\nWantedBy=sockets.target\\n\",\"path\":\"/etc/systemd/system/docker.socket\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nRequires=dcos-setup.service\\nAfter=dcos-setup.service\\n[Service]\\nType=oneshot\\nEnvironmentFile=/etc/environment\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/usr/bin/bash -c \\\"echo $(detect_ip) $(hostname) \\u003e /etc/hosts\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-config-writer.service\",\"permissions\":\"0644\"},{\"content\":\"MESOS_CLUSTER=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/mesos-master-provider\"},{\"content\":\"ADMINROUTER_ACTIVATE_AUTH_MODULE=',variables('oauthEnabled'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/adminrouter.env\"},{\"content\":\"[\\\"', reference(variables('masterVMNic')[0]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[1]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[2]).ipConfigurations[0].properties.privateIPAddress,'\\\"]\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/master_list\"},{\"content\":\"EXHIBITOR_BACKEND=AZURE\\nAZURE_CONTAINER=dcos-exhibitor\\nAZURE_PREFIX=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor\"},{\"content\":\"com.netflix.exhibitor.azure.account-name=',variables('masterStorageAccountExhibitorName'),'\\ncom.netflix.exhibitor.azure.account-key=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('masterStorageAccountExhibitorName')), '2015-06-15').key1,'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor.properties\"},{\"content\":\"{\\\"uiConfiguration\\\":{\\\"plugins\\\":{\\\"banner\\\":{\\\"enabled\\\":false,\\\"backgroundColor\\\":\\\"#1E232F\\\",\\\"foregroundColor\\\":\\\"#FFFFFF\\\",\\\"headerTitle\\\":null,\\\"headerContent\\\":null,\\\"footerContent\\\":null,\\\"imagePath\\\":null,\\\"dismissible\\\":null},\\\"branding\\\":{\\\"enabled\\\":false},\\\"external-links\\\": {\\\"enabled\\\": false},\\n\\n\\\"authentication\\\":{\\\"enabled\\\":false},\\n\\n\\\"oauth\\\":{\\\"enabled\\\":',variables('oauthEnabled'),',\\\"authHost\\\":\\\"https://dcos.auth0.com\\\"},\\n\\n\\n\\\"tracking\\\":{\\\"enabled\\\":false}}}}\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/ui-config.json\"},{\"content\":\"{}\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/pkginfo.json\"},{\"content\":\"[Unit]\\nBefore=dcos.target\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\nExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\",\"path\":\"/etc/systemd/system/dcos-link-env.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Download DC/OS to this host.\\nAfter=network-online.target\\nWants=network-online.target\\nConditionPathExists=!/opt/mesosphere/\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /var/lib/mesos/dl/bootstrap.tar.xz ',variables('dcosBootstrapURL'),'\\nExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\nExecStart=/usr/bin/tar -axf /var/lib/mesos/dl/bootstrap.tar.xz -C /opt/mesosphere\\nExecStartPost=-/usr/bin/rm -f /var/lib/mesos/dl/bootstrap.tar.xz\\n\",\"path\":\"/etc/systemd/system/dcos-download.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Specialize DC/OS for this host.\\nRequires=dcos-download.service\\nAfter=dcos-download.service\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n[Install]\\nWantedBy=multi-user.target\\n\",\"path\":\"/etc/systemd/system/dcos-setup.service\",\"permissions\":\"0644\"},{\"content\":\"\",\"path\":\"/etc/mesosphere/roles/azure\"},{\"content\":\"#!/bin/bash\\n\\n\\nMESOSDIR=/var/lib/mesos/dl\\nmkdir $MESOSDIR\\n\\n\\n# load the env vars\\n. /etc/mesosphere/setup-flags/dcos-deploy-environment\\n\\n\\n# default dc/os component download address (Azure CDN)\\nDOCKER_ENGINE_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libltdl7_2.4.6-0.1_amd64.deb\\n\\n\\ncase $DCOS_ENVIRONMENT in\\n# because of Chinese GreatWall Firewall, the default packages on Azure CDN is blocked. So the following Chinese local mirror url should be used instead.\\nAzureChinaCloud)\\nDOCKER_ENGINE_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libltdl7_2.4.6-0.1_amd64.deb\\n;;\\nesac\\n\\n\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/d.deb $DOCKER_ENGINE_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/1.deb $LIBIPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/2.deb $IPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/3.deb $UNZIP_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/4.deb $LIBLTDL_DOWNLOAD_URL \\u0026\\nwait\\n\\n\\nfor i in {1..300}; do\\ndpkg -i $MESOSDIR/{1,2,3,4}.deb\\nif [ \\\"$?\\\" = \\\"0\\\" ]\\nthen\\necho \\\"succeeded\\\"\\nbreak\\nfi\\nsleep 1\\ndone\\n\\n\\ntouch /etc/mesosphere/roles/slave\\n\",\"owner\":\"root\",\"path\":\"/opt/azure/containers/provision.sh\",\"permissions\":\"0744\"},{\"content\":\"\",\"owner\":\"root\",\"path\":\"/var/lib/dcos/mesos-slave-common\",\"permissions\":\"0644\"}]}'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('sshRSAPublicKey')]",
                    "path": "[variables('sshKeyPath')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": {
              "offer": "[variables('osImageOffer')]",
              "publisher": "[variables('osImagePublisher')]",
              "sku": "[variables('osImageSKU')]",
              "version": "[variables('osImageVersion')]"
            },
            "osDisk": {
              "caching": "ReadOnly",
              "createOption": "FromImage",
              "name": "vmssosdisk",
              "vhdContainers": [
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri3AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri3AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri3AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri3AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri3StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri3AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]"
              ]
            }
          }
        }
      },
      "sku": {
        "capacity": "[variables('agentpri3Count')]",
        "name": "[variables('agentpri3VMSize')]",
        "tier": "Standard"
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('agentpri3VMNamePrefix'), '-vmss')]"
      },
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('agentpri4NSGName')]",
      "properties": {
        "securityRules": []
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentpri4StorageAccountsCount')]",
        "name": "loop"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri4AccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentpri4VMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[variables('vnetID')]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri4AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri4AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri4AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri4AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri4AccountName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpri4VMNamePrefix'), '-vmss')]",
      "properties": {
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "nic",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpri4VnetSubnetID')]"
                        }
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[variables('adminUsername')]",
            "computerNamePrefix": "[variables('agentpri4VMNamePrefix')]",
            "customData": "[base64(concat('#cloud-config\n\n', '{\"bootcmd\":[\"bash -c \\\"if [ ! -f /var/lib/sdb-gpt ];then echo DCOS-5890;parted -s /dev/sdb mklabel gpt;touch /var/lib/sdb-gpt;fi\\\"\"],\"disk_setup\":{\"ephemeral0\":{\"layout\":[50,50],\"overwrite\":true,\"table_type\":\"gpt\"}},\"fs_setup\":[{\"device\":\"ephemeral0.1\",\"filesystem\":\"ext4\",\"overwrite\":true},{\"device\":\"ephemeral0.2\",\"filesystem\":\"ext4\",\"overwrite\":true}],\"mounts\":[[\"ephemeral0.1\",\"/var/lib/mesos\"],[\"ephemeral0.2\",\"/var/lib/docker\"]],\"runcmd\":[[\"ln\",\"-s\",\"/bin/rm\",\"/usr/bin/rm\"],[\"ln\",\"-s\",\"/bin/mkdir\",\"/usr/bin/mkdir\"],[\"ln\",\"-s\",\"/bin/tar\",\"/usr/bin/tar\"],[\"ln\",\"-s\",\"/bin/ln\",\"/usr/bin/ln\"],[\"ln\",\"-s\",\"/bin/cp\",\"/usr/bin/cp\"],[\"ln\",\"-s\",\"/bin/systemctl\",\"/usr/bin/systemctl\"],[\"ln\",\"-s\",\"/bin/mount\",\"/usr/bin/mount\"],[\"ln\",\"-s\",\"/bin/bash\",\"/usr/bin/bash\"],[\"ln\",\"-s\",\"/usr/sbin/useradd\",\"/usr/bin/useradd\"],[\"systemctl\",\"disable\",\"--now\",\"resolvconf.service\"],[\"systemctl\",\"mask\",\"--now\",\"lxc-net.service\"],\"/opt/azure/containers/provision.sh\",[\"cp\",\"-p\",\"/etc/resolv.conf\",\"/tmp/resolv.conf\"],[\"rm\",\"-f\",\"/etc/resolv.conf\"],[\"cp\",\"-p\",\"/tmp/resolv.conf\",\"/etc/resolv.conf\"],[\"systemctl\",\"start\",\"dcos-docker-install.service\"],[\"systemctl\",\"start\",\"dcos-config-writer.service\"],[\"systemctl\",\"restart\",\"systemd-journald.service\"],[\"systemctl\",\"restart\",\"docker.service\"],[\"systemctl\",\"start\",\"dcos-link-env.service\"],[\"systemctl\",\"enable\",\"dcos-setup.service\"],[\"systemctl\",\"--no-block\",\"start\",\"dcos-setup.service\"]],\"write_files\":[{\"content\":\"https://dcosio.azureedge.net/dcos/stable\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/repository-url\",\"permissions\":\"0644\"},{\"content\":\"DCOS_ENVIRONMENT=',variables('targetEnvironment'),'\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/dcos-deploy-environment\",\"permissions\":\"0644\"},{\"content\":\"[\\\"dcos-config--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\", \\\"dcos-metadata--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\"]\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/cluster-packages.json\",\"permissions\":\"0644\"},{\"content\":\"[Journal]\\nMaxLevelConsole=warning\\nRateLimitInterval=1s\\nRateLimitBurst=20000\\n\",\"owner\":\"root\",\"path\":\"/etc/systemd/journald.conf.d/dcos.conf\",\"permissions\":\"0644\"},{\"content\":\"rexray:\\n  loglevel: info\\n  modules:\\n    default-admin:\\n      host: tcp://127.0.0.1:61003\\n    default-docker:\\n      disabled: true\\n\",\"path\":\"/etc/rexray/config.yml\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nAfter=network-online.target\\nWants=network-online.target\\n[Service]\\nType=oneshot\\nEnvironment=DEBIAN_FRONTEND=noninteractive\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStart=/usr/bin/bash -c \\\"try=1;until dpkg -D3 -i /var/lib/mesos/dl/d.deb || ((try\\u003e9));do echo retry $((try++));sleep $((try*try));done;systemctl --now start docker;systemctl restart docker.socket\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-docker-install.service\",\"permissions\":\"0644\"},{\"content\":\"[Service]\\nRestart=always\\nStartLimitInterval=0\\nRestartSec=15\\nExecStartPre=-/sbin/ip link del docker0\\nExecStart=\\nExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\\n\",\"path\":\"/etc/systemd/system/docker.service.d/execstart.conf\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nPartOf=docker.service\\n[Socket]\\nListenStream=/var/run/docker.sock\\nSocketMode=0660\\nSocketUser=root\\nSocketGroup=docker\\nListenStream=2375\\nBindIPv6Only=both\\n[Install]\\nWantedBy=sockets.target\\n\",\"path\":\"/etc/systemd/system/docker.socket\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nRequires=dcos-setup.service\\nAfter=dcos-setup.service\\n[Service]\\nType=oneshot\\nEnvironmentFile=/etc/environment\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/usr/bin/bash -c \\\"echo $(detect_ip) $(hostname) \\u003e /etc/hosts\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-config-writer.service\",\"permissions\":\"0644\"},{\"content\":\"MESOS_CLUSTER=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/mesos-master-provider\"},{\"content\":\"ADMINROUTER_ACTIVATE_AUTH_MODULE=',variables('oauthEnabled'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/adminrouter.env\"},{\"content\":\"[\\\"', reference(variables('masterVMNic')[0]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[1]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[2]).ipConfigurations[0].properties.privateIPAddress,'\\\"]\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/master_list\"},{\"content\":\"EXHIBITOR_BACKEND=AZURE\\nAZURE_CONTAINER=dcos-exhibitor\\nAZURE_PREFIX=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor\"},{\"content\":\"com.netflix.exhibitor.azure.account-name=',variables('masterStorageAccountExhibitorName'),'\\ncom.netflix.exhibitor.azure.account-key=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('masterStorageAccountExhibitorName')), '2015-06-15').key1,'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor.properties\"},{\"content\":\"{\\\"uiConfiguration\\\":{\\\"plugins\\\":{\\\"banner\\\":{\\\"enabled\\\":false,\\\"backgroundColor\\\":\\\"#1E232F\\\",\\\"foregroundColor\\\":\\\"#FFFFFF\\\",\\\"headerTitle\\\":null,\\\"headerContent\\\":null,\\\"footerContent\\\":null,\\\"imagePath\\\":null,\\\"dismissible\\\":null},\\\"branding\\\":{\\\"enabled\\\":false},\\\"external-links\\\": {\\\"enabled\\\": false},\\n\\n\\\"authentication\\\":{\\\"enabled\\\":false},\\n\\n\\\"oauth\\\":{\\\"enabled\\\":',variables('oauthEnabled'),',\\\"authHost\\\":\\\"https://dcos.auth0.com\\\"},\\n\\n\\n\\\"tracking\\\":{\\\"enabled\\\":false}}}}\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/ui-config.json\"},{\"content\":\"{}\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/pkginfo.json\"},{\"content\":\"[Unit]\\nBefore=dcos.target\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\nExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\",\"path\":\"/etc/systemd/system/dcos-link-env.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Download DC/OS to this host.\\nAfter=network-online.target\\nWants=network-online.target\\nConditionPathExists=!/opt/mesosphere/\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /var/lib/mesos/dl/bootstrap.tar.xz ',variables('dcosBootstrapURL'),'\\nExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\nExecStart=/usr/bin/tar -axf /var/lib/mesos/dl/bootstrap.tar.xz -C /opt/mesosphere\\nExecStartPost=-/usr/bin/rm -f /var/lib/mesos/dl/bootstrap.tar.xz\\n\",\"path\":\"/etc/systemd/system/dcos-download.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Specialize DC/OS for this host.\\nRequires=dcos-download.service\\nAfter=dcos-download.service\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n[Install]\\nWantedBy=multi-user.target\\n\",\"path\":\"/etc/systemd/system/dcos-setup.service\",\"permissions\":\"0644\"},{\"content\":\"\",\"path\":\"/etc/mesosphere/roles/azure\"},{\"content\":\"#!/bin/bash\\n\\n\\nMESOSDIR=/var/lib/mesos/dl\\nmkdir $MESOSDIR\\n\\n\\n# load the env vars\\n. /etc/mesosphere/setup-flags/dcos-deploy-environment\\n\\n\\n# default dc/os component download address (Azure CDN)\\nDOCKER_ENGINE_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libltdl7_2.4.6-0.1_amd64.deb\\n\\n\\ncase $DCOS_ENVIRONMENT in\\n# because of Chinese GreatWall Firewall, the default packages on Azure CDN is blocked. So the following Chinese local mirror url should be used instead.\\nAzureChinaCloud)\\nDOCKER_ENGINE_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libltdl7_2.4.6-0.1_amd64.deb\\n;;\\nesac\\n\\n\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/d.deb $DOCKER_ENGINE_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/1.deb $LIBIPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/2.deb $IPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/3.deb $UNZIP_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/4.deb $LIBLTDL_DOWNLOAD_URL \\u0026\\nwait\\n\\n\\nfor i in {1..300}; do\\ndpkg -i $MESOSDIR/{1,2,3,4}.deb\\nif [ \\\"$?\\\" = \\\"0\\\" ]\\nthen\\necho \\\"succeeded\\\"\\nbreak\\nfi\\nsleep 1\\ndone\\n\\n\\ntouch /etc/mesosphere/roles/slave\\n\",\"owner\":\"root\",\"path\":\"/opt/azure/containers/provision.sh\",\"permissions\":\"0744\"},{\"content\":\"\",\"owner\":\"root\",\"path\":\"/var/lib/dcos/mesos-slave-common\",\"permissions\":\"0644\"}]}'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('sshRSAPublicKey')]",
                    "path": "[variables('sshKeyPath')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": {
              "offer": "[variables('osImageOffer')]",
              "publisher": "[variables('osImagePublisher')]",
              "sku": "[variables('osImageSKU')]",
              "version": "[variables('osImageVersion')]"
            },
            "osDisk": {
              "caching": "ReadOnly",
              "createOption": "FromImage",
              "name": "vmssosdisk",
              "vhdContainers": [
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri4AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri4AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri4AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri4AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri4StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri4AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]"
              ]
            }
          }
        }
      },
      "sku": {
        "capacity": "[variables('agentpri4Count')]",
        "name": "[variables('agentpri4VMSize')]",
        "tier": "Standard"
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('agentpri4VMNamePrefix'), '-vmss')]"
      },
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('agentpri5NSGName')]",
      "properties": {
        "securityRules": []
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentpri5StorageAccountsCount')]",
        "name": "loop"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri5AccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentpri5VMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[variables('vnetID')]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri5AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri5AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri5AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri5AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri5AccountName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpri5VMNamePrefix'), '-vmss')]",
      "properties": {
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "nic",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpri5VnetSubnetID')]"
                        }
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[variables('adminUsername')]",
            "computerNamePrefix": "[variables('agentpri5VMNamePrefix')]",
            "customData": "[base64(concat('#cloud-config\n\n', '{\"bootcmd\":[\"bash -c \\\"if [ ! -f /var/lib/sdb-gpt ];then echo DCOS-5890;parted -s /dev/sdb mklabel gpt;touch /var/lib/sdb-gpt;fi\\\"\"],\"disk_setup\":{\"ephemeral0\":{\"layout\":[50,50],\"overwrite\":true,\"table_type\":\"gpt\"}},\"fs_setup\":[{\"device\":\"ephemeral0.1\",\"filesystem\":\"ext4\",\"overwrite\":true},{\"device\":\"ephemeral0.2\",\"filesystem\":\"ext4\",\"overwrite\":true}],\"mounts\":[[\"ephemeral0.1\",\"/var/lib/mesos\"],[\"ephemeral0.2\",\"/var/lib/docker\"]],\"runcmd\":[[\"ln\",\"-s\",\"/bin/rm\",\"/usr/bin/rm\"],[\"ln\",\"-s\",\"/bin/mkdir\",\"/usr/bin/mkdir\"],[\"ln\",\"-s\",\"/bin/tar\",\"/usr/bin/tar\"],[\"ln\",\"-s\",\"/bin/ln\",\"/usr/bin/ln\"],[\"ln\",\"-s\",\"/bin/cp\",\"/usr/bin/cp\"],[\"ln\",\"-s\",\"/bin/systemctl\",\"/usr/bin/systemctl\"],[\"ln\",\"-s\",\"/bin/mount\",\"/usr/bin/mount\"],[\"ln\",\"-s\",\"/bin/bash\",\"/usr/bin/bash\"],[\"ln\",\"-s\",\"/usr/sbin/useradd\",\"/usr/bin/useradd\"],[\"systemctl\",\"disable\",\"--now\",\"resolvconf.service\"],[\"systemctl\",\"mask\",\"--now\",\"lxc-net.service\"],\"/opt/azure/containers/provision.sh\",[\"cp\",\"-p\",\"/etc/resolv.conf\",\"/tmp/resolv.conf\"],[\"rm\",\"-f\",\"/etc/resolv.conf\"],[\"cp\",\"-p\",\"/tmp/resolv.conf\",\"/etc/resolv.conf\"],[\"systemctl\",\"start\",\"dcos-docker-install.service\"],[\"systemctl\",\"start\",\"dcos-config-writer.service\"],[\"systemctl\",\"restart\",\"systemd-journald.service\"],[\"systemctl\",\"restart\",\"docker.service\"],[\"systemctl\",\"start\",\"dcos-link-env.service\"],[\"systemctl\",\"enable\",\"dcos-setup.service\"],[\"systemctl\",\"--no-block\",\"start\",\"dcos-setup.service\"]],\"write_files\":[{\"content\":\"https://dcosio.azureedge.net/dcos/stable\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/repository-url\",\"permissions\":\"0644\"},{\"content\":\"DCOS_ENVIRONMENT=',variables('targetEnvironment'),'\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/dcos-deploy-environment\",\"permissions\":\"0644\"},{\"content\":\"[\\\"dcos-config--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\", \\\"dcos-metadata--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\"]\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/cluster-packages.json\",\"permissions\":\"0644\"},{\"content\":\"[Journal]\\nMaxLevelConsole=warning\\nRateLimitInterval=1s\\nRateLimitBurst=20000\\n\",\"owner\":\"root\",\"path\":\"/etc/systemd/journald.conf.d/dcos.conf\",\"permissions\":\"0644\"},{\"content\":\"rexray:\\n  loglevel: info\\n  modules:\\n    default-admin:\\n      host: tcp://127.0.0.1:61003\\n    default-docker:\\n      disabled: true\\n\",\"path\":\"/etc/rexray/config.yml\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nAfter=network-online.target\\nWants=network-online.target\\n[Service]\\nType=oneshot\\nEnvironment=DEBIAN_FRONTEND=noninteractive\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStart=/usr/bin/bash -c \\\"try=1;until dpkg -D3 -i /var/lib/mesos/dl/d.deb || ((try\\u003e9));do echo retry $((try++));sleep $((try*try));done;systemctl --now start docker;systemctl restart docker.socket\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-docker-install.service\",\"permissions\":\"0644\"},{\"content\":\"[Service]\\nRestart=always\\nStartLimitInterval=0\\nRestartSec=15\\nExecStartPre=-/sbin/ip link del docker0\\nExecStart=\\nExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\\n\",\"path\":\"/etc/systemd/system/docker.service.d/execstart.conf\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nPartOf=docker.service\\n[Socket]\\nListenStream=/var/run/docker.sock\\nSocketMode=0660\\nSocketUser=root\\nSocketGroup=docker\\nListenStream=2375\\nBindIPv6Only=both\\n[Install]\\nWantedBy=sockets.target\\n\",\"path\":\"/etc/systemd/system/docker.socket\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nRequires=dcos-setup.service\\nAfter=dcos-setup.service\\n[Service]\\nType=oneshot\\nEnvironmentFile=/etc/environment\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/usr/bin/bash -c \\\"echo $(detect_ip) $(hostname) \\u003e /etc/hosts\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-config-writer.service\",\"permissions\":\"0644\"},{\"content\":\"MESOS_CLUSTER=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/mesos-master-provider\"},{\"content\":\"ADMINROUTER_ACTIVATE_AUTH_MODULE=',variables('oauthEnabled'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/adminrouter.env\"},{\"content\":\"[\\\"', reference(variables('masterVMNic')[0]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[1]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[2]).ipConfigurations[0].properties.privateIPAddress,'\\\"]\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/master_list\"},{\"content\":\"EXHIBITOR_BACKEND=AZURE\\nAZURE_CONTAINER=dcos-exhibitor\\nAZURE_PREFIX=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor\"},{\"content\":\"com.netflix.exhibitor.azure.account-name=',variables('masterStorageAccountExhibitorName'),'\\ncom.netflix.exhibitor.azure.account-key=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('masterStorageAccountExhibitorName')), '2015-06-15').key1,'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor.properties\"},{\"content\":\"{\\\"uiConfiguration\\\":{\\\"plugins\\\":{\\\"banner\\\":{\\\"enabled\\\":false,\\\"backgroundColor\\\":\\\"#1E232F\\\",\\\"foregroundColor\\\":\\\"#FFFFFF\\\",\\\"headerTitle\\\":null,\\\"headerContent\\\":null,\\\"footerContent\\\":null,\\\"imagePath\\\":null,\\\"dismissible\\\":null},\\\"branding\\\":{\\\"enabled\\\":false},\\\"external-links\\\": {\\\"enabled\\\": false},\\n\\n\\\"authentication\\\":{\\\"enabled\\\":false},\\n\\n\\\"oauth\\\":{\\\"enabled\\\":',variables('oauthEnabled'),',\\\"authHost\\\":\\\"https://dcos.auth0.com\\\"},\\n\\n\\n\\\"tracking\\\":{\\\"enabled\\\":false}}}}\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/ui-config.json\"},{\"content\":\"{}\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/pkginfo.json\"},{\"content\":\"[Unit]\\nBefore=dcos.target\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\nExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\",\"path\":\"/etc/systemd/system/dcos-link-env.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Download DC/OS to this host.\\nAfter=network-online.target\\nWants=network-online.target\\nConditionPathExists=!/opt/mesosphere/\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /var/lib/mesos/dl/bootstrap.tar.xz ',variables('dcosBootstrapURL'),'\\nExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\nExecStart=/usr/bin/tar -axf /var/lib/mesos/dl/bootstrap.tar.xz -C /opt/mesosphere\\nExecStartPost=-/usr/bin/rm -f /var/lib/mesos/dl/bootstrap.tar.xz\\n\",\"path\":\"/etc/systemd/system/dcos-download.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Specialize DC/OS for this host.\\nRequires=dcos-download.service\\nAfter=dcos-download.service\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n[Install]\\nWantedBy=multi-user.target\\n\",\"path\":\"/etc/systemd/system/dcos-setup.service\",\"permissions\":\"0644\"},{\"content\":\"\",\"path\":\"/etc/mesosphere/roles/azure\"},{\"content\":\"#!/bin/bash\\n\\n\\nMESOSDIR=/var/lib/mesos/dl\\nmkdir $MESOSDIR\\n\\n\\n# load the env vars\\n. /etc/mesosphere/setup-flags/dcos-deploy-environment\\n\\n\\n# default dc/os component download address (Azure CDN)\\nDOCKER_ENGINE_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libltdl7_2.4.6-0.1_amd64.deb\\n\\n\\ncase $DCOS_ENVIRONMENT in\\n# because of Chinese GreatWall Firewall, the default packages on Azure CDN is blocked. So the following Chinese local mirror url should be used instead.\\nAzureChinaCloud)\\nDOCKER_ENGINE_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libltdl7_2.4.6-0.1_amd64.deb\\n;;\\nesac\\n\\n\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/d.deb $DOCKER_ENGINE_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/1.deb $LIBIPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/2.deb $IPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/3.deb $UNZIP_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/4.deb $LIBLTDL_DOWNLOAD_URL \\u0026\\nwait\\n\\n\\nfor i in {1..300}; do\\ndpkg -i $MESOSDIR/{1,2,3,4}.deb\\nif [ \\\"$?\\\" = \\\"0\\\" ]\\nthen\\necho \\\"succeeded\\\"\\nbreak\\nfi\\nsleep 1\\ndone\\n\\n\\ntouch /etc/mesosphere/roles/slave\\n\",\"owner\":\"root\",\"path\":\"/opt/azure/containers/provision.sh\",\"permissions\":\"0744\"},{\"content\":\"\",\"owner\":\"root\",\"path\":\"/var/lib/dcos/mesos-slave-common\",\"permissions\":\"0644\"}]}'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('sshRSAPublicKey')]",
                    "path": "[variables('sshKeyPath')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": {
              "offer": "[variables('osImageOffer')]",
              "publisher": "[variables('osImagePublisher')]",
              "sku": "[variables('osImageSKU')]",
              "version": "[variables('osImageVersion')]"
            },
            "osDisk": {
              "caching": "ReadOnly",
              "createOption": "FromImage",
              "name": "vmssosdisk",
              "vhdContainers": [
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri5AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri5AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri5AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri5AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri5StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri5AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]"
              ]
            }
          }
        }
      },
      "sku": {
        "capacity": "[variables('agentpri5Count')]",
        "name": "[variables('agentpri5VMSize')]",
        "tier": "Standard"
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('agentpri5VMNamePrefix'), '-vmss')]"
      },
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('agentpri6NSGName')]",
      "properties": {
        "securityRules": []
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentpri6StorageAccountsCount')]",
        "name": "loop"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri6AccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentpri6VMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[variables('vnetID')]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri6AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri6AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri6AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri6AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri6AccountName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpri6VMNamePrefix'), '-vmss')]",
      "properties": {
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "nic",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpri6VnetSubnetID')]"
                        }
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[variables('adminUsername')]",
            "computerNamePrefix": "[variables('agentpri6VMNamePrefix')]",
            "customData": "[base64(concat('#cloud-config\n\n', '{\"bootcmd\":[\"bash -c \\\"if [ ! -f /var/lib/sdb-gpt ];then echo DCOS-5890;parted -s /dev/sdb mklabel gpt;touch /var/lib/sdb-gpt;fi\\\"\"],\"disk_setup\":{\"ephemeral0\":{\"layout\":[50,50],\"overwrite\":true,\"table_type\":\"gpt\"}},\"fs_setup\":[{\"device\":\"ephemeral0.1\",\"filesystem\":\"ext4\",\"overwrite\":true},{\"device\":\"ephemeral0.2\",\"filesystem\":\"ext4\",\"overwrite\":true}],\"mounts\":[[\"ephemeral0.1\",\"/var/lib/mesos\"],[\"ephemeral0.2\",\"/var/lib/docker\"]],\"runcmd\":[[\"ln\",\"-s\",\"/bin/rm\",\"/usr/bin/rm\"],[\"ln\",\"-s\",\"/bin/mkdir\",\"/usr/bin/mkdir\"],[\"ln\",\"-s\",\"/bin/tar\",\"/usr/bin/tar\"],[\"ln\",\"-s\",\"/bin/ln\",\"/usr/bin/ln\"],[\"ln\",\"-s\",\"/bin/cp\",\"/usr/bin/cp\"],[\"ln\",\"-s\",\"/bin/systemctl\",\"/usr/bin/systemctl\"],[\"ln\",\"-s\",\"/bin/mount\",\"/usr/bin/mount\"],[\"ln\",\"-s\",\"/bin/bash\",\"/usr/bin/bash\"],[\"ln\",\"-s\",\"/usr/sbin/useradd\",\"/usr/bin/useradd\"],[\"systemctl\",\"disable\",\"--now\",\"resolvconf.service\"],[\"systemctl\",\"mask\",\"--now\",\"lxc-net.service\"],\"/opt/azure/containers/provision.sh\",[\"cp\",\"-p\",\"/etc/resolv.conf\",\"/tmp/resolv.conf\"],[\"rm\",\"-f\",\"/etc/resolv.conf\"],[\"cp\",\"-p\",\"/tmp/resolv.conf\",\"/etc/resolv.conf\"],[\"systemctl\",\"start\",\"dcos-docker-install.service\"],[\"systemctl\",\"start\",\"dcos-config-writer.service\"],[\"systemctl\",\"restart\",\"systemd-journald.service\"],[\"systemctl\",\"restart\",\"docker.service\"],[\"systemctl\",\"start\",\"dcos-link-env.service\"],[\"systemctl\",\"enable\",\"dcos-setup.service\"],[\"systemctl\",\"--no-block\",\"start\",\"dcos-setup.service\"]],\"write_files\":[{\"content\":\"https://dcosio.azureedge.net/dcos/stable\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/repository-url\",\"permissions\":\"0644\"},{\"content\":\"DCOS_ENVIRONMENT=',variables('targetEnvironment'),'\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/dcos-deploy-environment\",\"permissions\":\"0644\"},{\"content\":\"[\\\"dcos-config--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\", \\\"dcos-metadata--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\"]\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/cluster-packages.json\",\"permissions\":\"0644\"},{\"content\":\"[Journal]\\nMaxLevelConsole=warning\\nRateLimitInterval=1s\\nRateLimitBurst=20000\\n\",\"owner\":\"root\",\"path\":\"/etc/systemd/journald.conf.d/dcos.conf\",\"permissions\":\"0644\"},{\"content\":\"rexray:\\n  loglevel: info\\n  modules:\\n    default-admin:\\n      host: tcp://127.0.0.1:61003\\n    default-docker:\\n      disabled: true\\n\",\"path\":\"/etc/rexray/config.yml\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nAfter=network-online.target\\nWants=network-online.target\\n[Service]\\nType=oneshot\\nEnvironment=DEBIAN_FRONTEND=noninteractive\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStart=/usr/bin/bash -c \\\"try=1;until dpkg -D3 -i /var/lib/mesos/dl/d.deb || ((try\\u003e9));do echo retry $((try++));sleep $((try*try));done;systemctl --now start docker;systemctl restart docker.socket\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-docker-install.service\",\"permissions\":\"0644\"},{\"content\":\"[Service]\\nRestart=always\\nStartLimitInterval=0\\nRestartSec=15\\nExecStartPre=-/sbin/ip link del docker0\\nExecStart=\\nExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\\n\",\"path\":\"/etc/systemd/system/docker.service.d/execstart.conf\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nPartOf=docker.service\\n[Socket]\\nListenStream=/var/run/docker.sock\\nSocketMode=0660\\nSocketUser=root\\nSocketGroup=docker\\nListenStream=2375\\nBindIPv6Only=both\\n[Install]\\nWantedBy=sockets.target\\n\",\"path\":\"/etc/systemd/system/docker.socket\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nRequires=dcos-setup.service\\nAfter=dcos-setup.service\\n[Service]\\nType=oneshot\\nEnvironmentFile=/etc/environment\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/usr/bin/bash -c \\\"echo $(detect_ip) $(hostname) \\u003e /etc/hosts\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-config-writer.service\",\"permissions\":\"0644\"},{\"content\":\"MESOS_CLUSTER=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/mesos-master-provider\"},{\"content\":\"ADMINROUTER_ACTIVATE_AUTH_MODULE=',variables('oauthEnabled'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/adminrouter.env\"},{\"content\":\"[\\\"', reference(variables('masterVMNic')[0]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[1]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[2]).ipConfigurations[0].properties.privateIPAddress,'\\\"]\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/master_list\"},{\"content\":\"EXHIBITOR_BACKEND=AZURE\\nAZURE_CONTAINER=dcos-exhibitor\\nAZURE_PREFIX=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor\"},{\"content\":\"com.netflix.exhibitor.azure.account-name=',variables('masterStorageAccountExhibitorName'),'\\ncom.netflix.exhibitor.azure.account-key=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('masterStorageAccountExhibitorName')), '2015-06-15').key1,'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor.properties\"},{\"content\":\"{\\\"uiConfiguration\\\":{\\\"plugins\\\":{\\\"banner\\\":{\\\"enabled\\\":false,\\\"backgroundColor\\\":\\\"#1E232F\\\",\\\"foregroundColor\\\":\\\"#FFFFFF\\\",\\\"headerTitle\\\":null,\\\"headerContent\\\":null,\\\"footerContent\\\":null,\\\"imagePath\\\":null,\\\"dismissible\\\":null},\\\"branding\\\":{\\\"enabled\\\":false},\\\"external-links\\\": {\\\"enabled\\\": false},\\n\\n\\\"authentication\\\":{\\\"enabled\\\":false},\\n\\n\\\"oauth\\\":{\\\"enabled\\\":',variables('oauthEnabled'),',\\\"authHost\\\":\\\"https://dcos.auth0.com\\\"},\\n\\n\\n\\\"tracking\\\":{\\\"enabled\\\":false}}}}\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/ui-config.json\"},{\"content\":\"{}\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/pkginfo.json\"},{\"content\":\"[Unit]\\nBefore=dcos.target\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\nExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\",\"path\":\"/etc/systemd/system/dcos-link-env.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Download DC/OS to this host.\\nAfter=network-online.target\\nWants=network-online.target\\nConditionPathExists=!/opt/mesosphere/\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /var/lib/mesos/dl/bootstrap.tar.xz ',variables('dcosBootstrapURL'),'\\nExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\nExecStart=/usr/bin/tar -axf /var/lib/mesos/dl/bootstrap.tar.xz -C /opt/mesosphere\\nExecStartPost=-/usr/bin/rm -f /var/lib/mesos/dl/bootstrap.tar.xz\\n\",\"path\":\"/etc/systemd/system/dcos-download.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Specialize DC/OS for this host.\\nRequires=dcos-download.service\\nAfter=dcos-download.service\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n[Install]\\nWantedBy=multi-user.target\\n\",\"path\":\"/etc/systemd/system/dcos-setup.service\",\"permissions\":\"0644\"},{\"content\":\"\",\"path\":\"/etc/mesosphere/roles/azure\"},{\"content\":\"#!/bin/bash\\n\\n\\nMESOSDIR=/var/lib/mesos/dl\\nmkdir $MESOSDIR\\n\\n\\n# load the env vars\\n. /etc/mesosphere/setup-flags/dcos-deploy-environment\\n\\n\\n# default dc/os component download address (Azure CDN)\\nDOCKER_ENGINE_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libltdl7_2.4.6-0.1_amd64.deb\\n\\n\\ncase $DCOS_ENVIRONMENT in\\n# because of Chinese GreatWall Firewall, the default packages on Azure CDN is blocked. So the following Chinese local mirror url should be used instead.\\nAzureChinaCloud)\\nDOCKER_ENGINE_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libltdl7_2.4.6-0.1_amd64.deb\\n;;\\nesac\\n\\n\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/d.deb $DOCKER_ENGINE_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/1.deb $LIBIPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/2.deb $IPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/3.deb $UNZIP_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/4.deb $LIBLTDL_DOWNLOAD_URL \\u0026\\nwait\\n\\n\\nfor i in {1..300}; do\\ndpkg -i $MESOSDIR/{1,2,3,4}.deb\\nif [ \\\"$?\\\" = \\\"0\\\" ]\\nthen\\necho \\\"succeeded\\\"\\nbreak\\nfi\\nsleep 1\\ndone\\n\\n\\ntouch /etc/mesosphere/roles/slave\\n\",\"owner\":\"root\",\"path\":\"/opt/azure/containers/provision.sh\",\"permissions\":\"0744\"},{\"content\":\"\",\"owner\":\"root\",\"path\":\"/var/lib/dcos/mesos-slave-common\",\"permissions\":\"0644\"}]}'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('sshRSAPublicKey')]",
                    "path": "[variables('sshKeyPath')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": {
              "offer": "[variables('osImageOffer')]",
              "publisher": "[variables('osImagePublisher')]",
              "sku": "[variables('osImageSKU')]",
              "version": "[variables('osImageVersion')]"
            },
            "osDisk": {
              "caching": "ReadOnly",
              "createOption": "FromImage",
              "name": "vmssosdisk",
              "vhdContainers": [
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri6AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri6AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri6AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri6AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri6StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri6AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]"
              ]
            }
          }
        }
      },
      "sku": {
        "capacity": "[variables('agentpri6Count')]",
        "name": "[variables('agentpri6VMSize')]",
        "tier": "Standard"
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('agentpri6VMNamePrefix'), '-vmss')]"
      },
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('agentpri7NSGName')]",
      "properties": {
        "securityRules": []
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentpri7StorageAccountsCount')]",
        "name": "loop"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri7AccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentpri7VMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[variables('vnetID')]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri7AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri7AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri7AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri7AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri7AccountName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpri7VMNamePrefix'), '-vmss')]",
      "properties": {
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "nic",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpri7VnetSubnetID')]"
                        }
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[variables('adminUsername')]",
            "computerNamePrefix": "[variables('agentpri7VMNamePrefix')]",
            "customData": "[base64(concat('#cloud-config\n\n', '{\"bootcmd\":[\"bash -c \\\"if [ ! -f /var/lib/sdb-gpt ];then echo DCOS-5890;parted -s /dev/sdb mklabel gpt;touch /var/lib/sdb-gpt;fi\\\"\"],\"disk_setup\":{\"ephemeral0\":{\"layout\":[50,50],\"overwrite\":true,\"table_type\":\"gpt\"}},\"fs_setup\":[{\"device\":\"ephemeral0.1\",\"filesystem\":\"ext4\",\"overwrite\":true},{\"device\":\"ephemeral0.2\",\"filesystem\":\"ext4\",\"overwrite\":true}],\"mounts\":[[\"ephemeral0.1\",\"/var/lib/mesos\"],[\"ephemeral0.2\",\"/var/lib/docker\"]],\"runcmd\":[[\"ln\",\"-s\",\"/bin/rm\",\"/usr/bin/rm\"],[\"ln\",\"-s\",\"/bin/mkdir\",\"/usr/bin/mkdir\"],[\"ln\",\"-s\",\"/bin/tar\",\"/usr/bin/tar\"],[\"ln\",\"-s\",\"/bin/ln\",\"/usr/bin/ln\"],[\"ln\",\"-s\",\"/bin/cp\",\"/usr/bin/cp\"],[\"ln\",\"-s\",\"/bin/systemctl\",\"/usr/bin/systemctl\"],[\"ln\",\"-s\",\"/bin/mount\",\"/usr/bin/mount\"],[\"ln\",\"-s\",\"/bin/bash\",\"/usr/bin/bash\"],[\"ln\",\"-s\",\"/usr/sbin/useradd\",\"/usr/bin/useradd\"],[\"systemctl\",\"disable\",\"--now\",\"resolvconf.service\"],[\"systemctl\",\"mask\",\"--now\",\"lxc-net.service\"],\"/opt/azure/containers/provision.sh\",[\"cp\",\"-p\",\"/etc/resolv.conf\",\"/tmp/resolv.conf\"],[\"rm\",\"-f\",\"/etc/resolv.conf\"],[\"cp\",\"-p\",\"/tmp/resolv.conf\",\"/etc/resolv.conf\"],[\"systemctl\",\"start\",\"dcos-docker-install.service\"],[\"systemctl\",\"start\",\"dcos-config-writer.service\"],[\"systemctl\",\"restart\",\"systemd-journald.service\"],[\"systemctl\",\"restart\",\"docker.service\"],[\"systemctl\",\"start\",\"dcos-link-env.service\"],[\"systemctl\",\"enable\",\"dcos-setup.service\"],[\"systemctl\",\"--no-block\",\"start\",\"dcos-setup.service\"]],\"write_files\":[{\"content\":\"https://dcosio.azureedge.net/dcos/stable\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/repository-url\",\"permissions\":\"0644\"},{\"content\":\"DCOS_ENVIRONMENT=',variables('targetEnvironment'),'\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/dcos-deploy-environment\",\"permissions\":\"0644\"},{\"content\":\"[\\\"dcos-config--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\", \\\"dcos-metadata--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\"]\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/cluster-packages.json\",\"permissions\":\"0644\"},{\"content\":\"[Journal]\\nMaxLevelConsole=warning\\nRateLimitInterval=1s\\nRateLimitBurst=20000\\n\",\"owner\":\"root\",\"path\":\"/etc/systemd/journald.conf.d/dcos.conf\",\"permissions\":\"0644\"},{\"content\":\"rexray:\\n  loglevel: info\\n  modules:\\n    default-admin:\\n      host: tcp://127.0.0.1:61003\\n    default-docker:\\n      disabled: true\\n\",\"path\":\"/etc/rexray/config.yml\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nAfter=network-online.target\\nWants=network-online.target\\n[Service]\\nType=oneshot\\nEnvironment=DEBIAN_FRONTEND=noninteractive\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStart=/usr/bin/bash -c \\\"try=1;until dpkg -D3 -i /var/lib/mesos/dl/d.deb || ((try\\u003e9));do echo retry $((try++));sleep $((try*try));done;systemctl --now start docker;systemctl restart docker.socket\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-docker-install.service\",\"permissions\":\"0644\"},{\"content\":\"[Service]\\nRestart=always\\nStartLimitInterval=0\\nRestartSec=15\\nExecStartPre=-/sbin/ip link del docker0\\nExecStart=\\nExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\\n\",\"path\":\"/etc/systemd/system/docker.service.d/execstart.conf\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nPartOf=docker.service\\n[Socket]\\nListenStream=/var/run/docker.sock\\nSocketMode=0660\\nSocketUser=root\\nSocketGroup=docker\\nListenStream=2375\\nBindIPv6Only=both\\n[Install]\\nWantedBy=sockets.target\\n\",\"path\":\"/etc/systemd/system/docker.socket\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nRequires=dcos-setup.service\\nAfter=dcos-setup.service\\n[Service]\\nType=oneshot\\nEnvironmentFile=/etc/environment\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/usr/bin/bash -c \\\"echo $(detect_ip) $(hostname) \\u003e /etc/hosts\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-config-writer.service\",\"permissions\":\"0644\"},{\"content\":\"MESOS_CLUSTER=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/mesos-master-provider\"},{\"content\":\"ADMINROUTER_ACTIVATE_AUTH_MODULE=',variables('oauthEnabled'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/adminrouter.env\"},{\"content\":\"[\\\"', reference(variables('masterVMNic')[0]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[1]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[2]).ipConfigurations[0].properties.privateIPAddress,'\\\"]\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/master_list\"},{\"content\":\"EXHIBITOR_BACKEND=AZURE\\nAZURE_CONTAINER=dcos-exhibitor\\nAZURE_PREFIX=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor\"},{\"content\":\"com.netflix.exhibitor.azure.account-name=',variables('masterStorageAccountExhibitorName'),'\\ncom.netflix.exhibitor.azure.account-key=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('masterStorageAccountExhibitorName')), '2015-06-15').key1,'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor.properties\"},{\"content\":\"{\\\"uiConfiguration\\\":{\\\"plugins\\\":{\\\"banner\\\":{\\\"enabled\\\":false,\\\"backgroundColor\\\":\\\"#1E232F\\\",\\\"foregroundColor\\\":\\\"#FFFFFF\\\",\\\"headerTitle\\\":null,\\\"headerContent\\\":null,\\\"footerContent\\\":null,\\\"imagePath\\\":null,\\\"dismissible\\\":null},\\\"branding\\\":{\\\"enabled\\\":false},\\\"external-links\\\": {\\\"enabled\\\": false},\\n\\n\\\"authentication\\\":{\\\"enabled\\\":false},\\n\\n\\\"oauth\\\":{\\\"enabled\\\":',variables('oauthEnabled'),',\\\"authHost\\\":\\\"https://dcos.auth0.com\\\"},\\n\\n\\n\\\"tracking\\\":{\\\"enabled\\\":false}}}}\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/ui-config.json\"},{\"content\":\"{}\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/pkginfo.json\"},{\"content\":\"[Unit]\\nBefore=dcos.target\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\nExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\",\"path\":\"/etc/systemd/system/dcos-link-env.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Download DC/OS to this host.\\nAfter=network-online.target\\nWants=network-online.target\\nConditionPathExists=!/opt/mesosphere/\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /var/lib/mesos/dl/bootstrap.tar.xz ',variables('dcosBootstrapURL'),'\\nExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\nExecStart=/usr/bin/tar -axf /var/lib/mesos/dl/bootstrap.tar.xz -C /opt/mesosphere\\nExecStartPost=-/usr/bin/rm -f /var/lib/mesos/dl/bootstrap.tar.xz\\n\",\"path\":\"/etc/systemd/system/dcos-download.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Specialize DC/OS for this host.\\nRequires=dcos-download.service\\nAfter=dcos-download.service\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n[Install]\\nWantedBy=multi-user.target\\n\",\"path\":\"/etc/systemd/system/dcos-setup.service\",\"permissions\":\"0644\"},{\"content\":\"\",\"path\":\"/etc/mesosphere/roles/azure\"},{\"content\":\"#!/bin/bash\\n\\n\\nMESOSDIR=/var/lib/mesos/dl\\nmkdir $MESOSDIR\\n\\n\\n# load the env vars\\n. /etc/mesosphere/setup-flags/dcos-deploy-environment\\n\\n\\n# default dc/os component download address (Azure CDN)\\nDOCKER_ENGINE_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libltdl7_2.4.6-0.1_amd64.deb\\n\\n\\ncase $DCOS_ENVIRONMENT in\\n# because of Chinese GreatWall Firewall, the default packages on Azure CDN is blocked. So the following Chinese local mirror url should be used instead.\\nAzureChinaCloud)\\nDOCKER_ENGINE_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libltdl7_2.4.6-0.1_amd64.deb\\n;;\\nesac\\n\\n\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/d.deb $DOCKER_ENGINE_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/1.deb $LIBIPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/2.deb $IPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/3.deb $UNZIP_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/4.deb $LIBLTDL_DOWNLOAD_URL \\u0026\\nwait\\n\\n\\nfor i in {1..300}; do\\ndpkg -i $MESOSDIR/{1,2,3,4}.deb\\nif [ \\\"$?\\\" = \\\"0\\\" ]\\nthen\\necho \\\"succeeded\\\"\\nbreak\\nfi\\nsleep 1\\ndone\\n\\n\\ntouch /etc/mesosphere/roles/slave\\n\",\"owner\":\"root\",\"path\":\"/opt/azure/containers/provision.sh\",\"permissions\":\"0744\"},{\"content\":\"\",\"owner\":\"root\",\"path\":\"/var/lib/dcos/mesos-slave-common\",\"permissions\":\"0644\"}]}'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('sshRSAPublicKey')]",
                    "path": "[variables('sshKeyPath')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": {
              "offer": "[variables('osImageOffer')]",
              "publisher": "[variables('osImagePublisher')]",
              "sku": "[variables('osImageSKU')]",
              "version": "[variables('osImageVersion')]"
            },
            "osDisk": {
              "caching": "ReadOnly",
              "createOption": "FromImage",
              "name": "vmssosdisk",
              "vhdContainers": [
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri7AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri7AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri7AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri7AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri7StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri7AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]"
              ]
            }
          }
        }
      },
      "sku": {
        "capacity": "[variables('agentpri7Count')]",
        "name": "[variables('agentpri7VMSize')]",
        "tier": "Standard"
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('agentpri7VMNamePrefix'), '-vmss')]"
      },
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('agentpri8NSGName')]",
      "properties": {
        "securityRules": []
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentpri8StorageAccountsCount')]",
        "name": "loop"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri8AccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentpri8VMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[variables('vnetID')]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri8AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri8AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri8AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri8AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri8AccountName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpri8VMNamePrefix'), '-vmss')]",
      "properties": {
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "nic",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpri8VnetSubnetID')]"
                        }
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[variables('adminUsername')]",
            "computerNamePrefix": "[variables('agentpri8VMNamePrefix')]",
            "customData": "[base64(concat('#cloud-config\n\n', '{\"bootcmd\":[\"bash -c \\\"if [ ! -f /var/lib/sdb-gpt ];then echo DCOS-5890;parted -s /dev/sdb mklabel gpt;touch /var/lib/sdb-gpt;fi\\\"\"],\"disk_setup\":{\"ephemeral0\":{\"layout\":[50,50],\"overwrite\":true,\"table_type\":\"gpt\"}},\"fs_setup\":[{\"device\":\"ephemeral0.1\",\"filesystem\":\"ext4\",\"overwrite\":true},{\"device\":\"ephemeral0.2\",\"filesystem\":\"ext4\",\"overwrite\":true}],\"mounts\":[[\"ephemeral0.1\",\"/var/lib/mesos\"],[\"ephemeral0.2\",\"/var/lib/docker\"]],\"runcmd\":[[\"ln\",\"-s\",\"/bin/rm\",\"/usr/bin/rm\"],[\"ln\",\"-s\",\"/bin/mkdir\",\"/usr/bin/mkdir\"],[\"ln\",\"-s\",\"/bin/tar\",\"/usr/bin/tar\"],[\"ln\",\"-s\",\"/bin/ln\",\"/usr/bin/ln\"],[\"ln\",\"-s\",\"/bin/cp\",\"/usr/bin/cp\"],[\"ln\",\"-s\",\"/bin/systemctl\",\"/usr/bin/systemctl\"],[\"ln\",\"-s\",\"/bin/mount\",\"/usr/bin/mount\"],[\"ln\",\"-s\",\"/bin/bash\",\"/usr/bin/bash\"],[\"ln\",\"-s\",\"/usr/sbin/useradd\",\"/usr/bin/useradd\"],[\"systemctl\",\"disable\",\"--now\",\"resolvconf.service\"],[\"systemctl\",\"mask\",\"--now\",\"lxc-net.service\"],\"/opt/azure/containers/provision.sh\",[\"cp\",\"-p\",\"/etc/resolv.conf\",\"/tmp/resolv.conf\"],[\"rm\",\"-f\",\"/etc/resolv.conf\"],[\"cp\",\"-p\",\"/tmp/resolv.conf\",\"/etc/resolv.conf\"],[\"systemctl\",\"start\",\"dcos-docker-install.service\"],[\"systemctl\",\"start\",\"dcos-config-writer.service\"],[\"systemctl\",\"restart\",\"systemd-journald.service\"],[\"systemctl\",\"restart\",\"docker.service\"],[\"systemctl\",\"start\",\"dcos-link-env.service\"],[\"systemctl\",\"enable\",\"dcos-setup.service\"],[\"systemctl\",\"--no-block\",\"start\",\"dcos-setup.service\"]],\"write_files\":[{\"content\":\"https://dcosio.azureedge.net/dcos/stable\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/repository-url\",\"permissions\":\"0644\"},{\"content\":\"DCOS_ENVIRONMENT=',variables('targetEnvironment'),'\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/dcos-deploy-environment\",\"permissions\":\"0644\"},{\"content\":\"[\\\"dcos-config--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\", \\\"dcos-metadata--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\"]\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/cluster-packages.json\",\"permissions\":\"0644\"},{\"content\":\"[Journal]\\nMaxLevelConsole=warning\\nRateLimitInterval=1s\\nRateLimitBurst=20000\\n\",\"owner\":\"root\",\"path\":\"/etc/systemd/journald.conf.d/dcos.conf\",\"permissions\":\"0644\"},{\"content\":\"rexray:\\n  loglevel: info\\n  modules:\\n    default-admin:\\n      host: tcp://127.0.0.1:61003\\n    default-docker:\\n      disabled: true\\n\",\"path\":\"/etc/rexray/config.yml\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nAfter=network-online.target\\nWants=network-online.target\\n[Service]\\nType=oneshot\\nEnvironment=DEBIAN_FRONTEND=noninteractive\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStart=/usr/bin/bash -c \\\"try=1;until dpkg -D3 -i /var/lib/mesos/dl/d.deb || ((try\\u003e9));do echo retry $((try++));sleep $((try*try));done;systemctl --now start docker;systemctl restart docker.socket\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-docker-install.service\",\"permissions\":\"0644\"},{\"content\":\"[Service]\\nRestart=always\\nStartLimitInterval=0\\nRestartSec=15\\nExecStartPre=-/sbin/ip link del docker0\\nExecStart=\\nExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\\n\",\"path\":\"/etc/systemd/system/docker.service.d/execstart.conf\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nPartOf=docker.service\\n[Socket]\\nListenStream=/var/run/docker.sock\\nSocketMode=0660\\nSocketUser=root\\nSocketGroup=docker\\nListenStream=2375\\nBindIPv6Only=both\\n[Install]\\nWantedBy=sockets.target\\n\",\"path\":\"/etc/systemd/system/docker.socket\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nRequires=dcos-setup.service\\nAfter=dcos-setup.service\\n[Service]\\nType=oneshot\\nEnvironmentFile=/etc/environment\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/usr/bin/bash -c \\\"echo $(detect_ip) $(hostname) \\u003e /etc/hosts\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-config-writer.service\",\"permissions\":\"0644\"},{\"content\":\"MESOS_CLUSTER=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/mesos-master-provider\"},{\"content\":\"ADMINROUTER_ACTIVATE_AUTH_MODULE=',variables('oauthEnabled'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/adminrouter.env\"},{\"content\":\"[\\\"', reference(variables('masterVMNic')[0]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[1]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[2]).ipConfigurations[0].properties.privateIPAddress,'\\\"]\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/master_list\"},{\"content\":\"EXHIBITOR_BACKEND=AZURE\\nAZURE_CONTAINER=dcos-exhibitor\\nAZURE_PREFIX=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor\"},{\"content\":\"com.netflix.exhibitor.azure.account-name=',variables('masterStorageAccountExhibitorName'),'\\ncom.netflix.exhibitor.azure.account-key=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('masterStorageAccountExhibitorName')), '2015-06-15').key1,'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor.properties\"},{\"content\":\"{\\\"uiConfiguration\\\":{\\\"plugins\\\":{\\\"banner\\\":{\\\"enabled\\\":false,\\\"backgroundColor\\\":\\\"#1E232F\\\",\\\"foregroundColor\\\":\\\"#FFFFFF\\\",\\\"headerTitle\\\":null,\\\"headerContent\\\":null,\\\"footerContent\\\":null,\\\"imagePath\\\":null,\\\"dismissible\\\":null},\\\"branding\\\":{\\\"enabled\\\":false},\\\"external-links\\\": {\\\"enabled\\\": false},\\n\\n\\\"authentication\\\":{\\\"enabled\\\":false},\\n\\n\\\"oauth\\\":{\\\"enabled\\\":',variables('oauthEnabled'),',\\\"authHost\\\":\\\"https://dcos.auth0.com\\\"},\\n\\n\\n\\\"tracking\\\":{\\\"enabled\\\":false}}}}\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/ui-config.json\"},{\"content\":\"{}\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/pkginfo.json\"},{\"content\":\"[Unit]\\nBefore=dcos.target\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\nExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\",\"path\":\"/etc/systemd/system/dcos-link-env.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Download DC/OS to this host.\\nAfter=network-online.target\\nWants=network-online.target\\nConditionPathExists=!/opt/mesosphere/\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /var/lib/mesos/dl/bootstrap.tar.xz ',variables('dcosBootstrapURL'),'\\nExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\nExecStart=/usr/bin/tar -axf /var/lib/mesos/dl/bootstrap.tar.xz -C /opt/mesosphere\\nExecStartPost=-/usr/bin/rm -f /var/lib/mesos/dl/bootstrap.tar.xz\\n\",\"path\":\"/etc/systemd/system/dcos-download.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Specialize DC/OS for this host.\\nRequires=dcos-download.service\\nAfter=dcos-download.service\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n[Install]\\nWantedBy=multi-user.target\\n\",\"path\":\"/etc/systemd/system/dcos-setup.service\",\"permissions\":\"0644\"},{\"content\":\"\",\"path\":\"/etc/mesosphere/roles/azure\"},{\"content\":\"#!/bin/bash\\n\\n\\nMESOSDIR=/var/lib/mesos/dl\\nmkdir $MESOSDIR\\n\\n\\n# load the env vars\\n. /etc/mesosphere/setup-flags/dcos-deploy-environment\\n\\n\\n# default dc/os component download address (Azure CDN)\\nDOCKER_ENGINE_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libltdl7_2.4.6-0.1_amd64.deb\\n\\n\\ncase $DCOS_ENVIRONMENT in\\n# because of Chinese GreatWall Firewall, the default packages on Azure CDN is blocked. So the following Chinese local mirror url should be used instead.\\nAzureChinaCloud)\\nDOCKER_ENGINE_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libltdl7_2.4.6-0.1_amd64.deb\\n;;\\nesac\\n\\n\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/d.deb $DOCKER_ENGINE_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/1.deb $LIBIPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/2.deb $IPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/3.deb $UNZIP_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/4.deb $LIBLTDL_DOWNLOAD_URL \\u0026\\nwait\\n\\n\\nfor i in {1..300}; do\\ndpkg -i $MESOSDIR/{1,2,3,4}.deb\\nif [ \\\"$?\\\" = \\\"0\\\" ]\\nthen\\necho \\\"succeeded\\\"\\nbreak\\nfi\\nsleep 1\\ndone\\n\\n\\ntouch /etc/mesosphere/roles/slave\\n\",\"owner\":\"root\",\"path\":\"/opt/azure/containers/provision.sh\",\"permissions\":\"0744\"},{\"content\":\"\",\"owner\":\"root\",\"path\":\"/var/lib/dcos/mesos-slave-common\",\"permissions\":\"0644\"}]}'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('sshRSAPublicKey')]",
                    "path": "[variables('sshKeyPath')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": {
              "offer": "[variables('osImageOffer')]",
              "publisher": "[variables('osImagePublisher')]",
              "sku": "[variables('osImageSKU')]",
              "version": "[variables('osImageVersion')]"
            },
            "osDisk": {
              "caching": "ReadOnly",
              "createOption": "FromImage",
              "name": "vmssosdisk",
              "vhdContainers": [
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri8AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri8AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri8AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri8AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri8StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri8AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]"
              ]
            }
          }
        }
      },
      "sku": {
        "capacity": "[variables('agentpri8Count')]",
        "name": "[variables('agentpri8VMSize')]",
        "tier": "Standard"
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('agentpri8VMNamePrefix'), '-vmss')]"
      },
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('agentpri9NSGName')]",
      "properties": {
        "securityRules": []
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentpri9StorageAccountsCount')]",
        "name": "loop"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri9AccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentpri9VMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[variables('vnetID')]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri9AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri9AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri9AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri9AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri9AccountName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpri9VMNamePrefix'), '-vmss')]",
      "properties": {
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "nic",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpri9VnetSubnetID')]"
                        }
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[variables('adminUsername')]",
            "computerNamePrefix": "[variables('agentpri9VMNamePrefix')]",
            "customData": "[base64(concat('#cloud-config\n\n', '{\"bootcmd\":[\"bash -c \\\"if [ ! -f /var/lib/sdb-gpt ];then echo DCOS-5890;parted -s /dev/sdb mklabel gpt;touch /var/lib/sdb-gpt;fi\\\"\"],\"disk_setup\":{\"ephemeral0\":{\"layout\":[50,50],\"overwrite\":true,\"table_type\":\"gpt\"}},\"fs_setup\":[{\"device\":\"ephemeral0.1\",\"filesystem\":\"ext4\",\"overwrite\":true},{\"device\":\"ephemeral0.2\",\"filesystem\":\"ext4\",\"overwrite\":true}],\"mounts\":[[\"ephemeral0.1\",\"/var/lib/mesos\"],[\"ephemeral0.2\",\"/var/lib/docker\"]],\"runcmd\":[[\"ln\",\"-s\",\"/bin/rm\",\"/usr/bin/rm\"],[\"ln\",\"-s\",\"/bin/mkdir\",\"/usr/bin/mkdir\"],[\"ln\",\"-s\",\"/bin/tar\",\"/usr/bin/tar\"],[\"ln\",\"-s\",\"/bin/ln\",\"/usr/bin/ln\"],[\"ln\",\"-s\",\"/bin/cp\",\"/usr/bin/cp\"],[\"ln\",\"-s\",\"/bin/systemctl\",\"/usr/bin/systemctl\"],[\"ln\",\"-s\",\"/bin/mount\",\"/usr/bin/mount\"],[\"ln\",\"-s\",\"/bin/bash\",\"/usr/bin/bash\"],[\"ln\",\"-s\",\"/usr/sbin/useradd\",\"/usr/bin/useradd\"],[\"systemctl\",\"disable\",\"--now\",\"resolvconf.service\"],[\"systemctl\",\"mask\",\"--now\",\"lxc-net.service\"],\"/opt/azure/containers/provision.sh\",[\"cp\",\"-p\",\"/etc/resolv.conf\",\"/tmp/resolv.conf\"],[\"rm\",\"-f\",\"/etc/resolv.conf\"],[\"cp\",\"-p\",\"/tmp/resolv.conf\",\"/etc/resolv.conf\"],[\"systemctl\",\"start\",\"dcos-docker-install.service\"],[\"systemctl\",\"start\",\"dcos-config-writer.service\"],[\"systemctl\",\"restart\",\"systemd-journald.service\"],[\"systemctl\",\"restart\",\"docker.service\"],[\"systemctl\",\"start\",\"dcos-link-env.service\"],[\"systemctl\",\"enable\",\"dcos-setup.service\"],[\"systemctl\",\"--no-block\",\"start\",\"dcos-setup.service\"]],\"write_files\":[{\"content\":\"https://dcosio.azureedge.net/dcos/stable\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/repository-url\",\"permissions\":\"0644\"},{\"content\":\"DCOS_ENVIRONMENT=',variables('targetEnvironment'),'\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/dcos-deploy-environment\",\"permissions\":\"0644\"},{\"content\":\"[\\\"dcos-config--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\", \\\"dcos-metadata--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\"]\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/cluster-packages.json\",\"permissions\":\"0644\"},{\"content\":\"[Journal]\\nMaxLevelConsole=warning\\nRateLimitInterval=1s\\nRateLimitBurst=20000\\n\",\"owner\":\"root\",\"path\":\"/etc/systemd/journald.conf.d/dcos.conf\",\"permissions\":\"0644\"},{\"content\":\"rexray:\\n  loglevel: info\\n  modules:\\n    default-admin:\\n      host: tcp://127.0.0.1:61003\\n    default-docker:\\n      disabled: true\\n\",\"path\":\"/etc/rexray/config.yml\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nAfter=network-online.target\\nWants=network-online.target\\n[Service]\\nType=oneshot\\nEnvironment=DEBIAN_FRONTEND=noninteractive\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStart=/usr/bin/bash -c \\\"try=1;until dpkg -D3 -i /var/lib/mesos/dl/d.deb || ((try\\u003e9));do echo retry $((try++));sleep $((try*try));done;systemctl --now start docker;systemctl restart docker.socket\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-docker-install.service\",\"permissions\":\"0644\"},{\"content\":\"[Service]\\nRestart=always\\nStartLimitInterval=0\\nRestartSec=15\\nExecStartPre=-/sbin/ip link del docker0\\nExecStart=\\nExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\\n\",\"path\":\"/etc/systemd/system/docker.service.d/execstart.conf\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nPartOf=docker.service\\n[Socket]\\nListenStream=/var/run/docker.sock\\nSocketMode=0660\\nSocketUser=root\\nSocketGroup=docker\\nListenStream=2375\\nBindIPv6Only=both\\n[Install]\\nWantedBy=sockets.target\\n\",\"path\":\"/etc/systemd/system/docker.socket\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nRequires=dcos-setup.service\\nAfter=dcos-setup.service\\n[Service]\\nType=oneshot\\nEnvironmentFile=/etc/environment\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/usr/bin/bash -c \\\"echo $(detect_ip) $(hostname) \\u003e /etc/hosts\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-config-writer.service\",\"permissions\":\"0644\"},{\"content\":\"MESOS_CLUSTER=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/mesos-master-provider\"},{\"content\":\"ADMINROUTER_ACTIVATE_AUTH_MODULE=',variables('oauthEnabled'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/adminrouter.env\"},{\"content\":\"[\\\"', reference(variables('masterVMNic')[0]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[1]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[2]).ipConfigurations[0].properties.privateIPAddress,'\\\"]\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/master_list\"},{\"content\":\"EXHIBITOR_BACKEND=AZURE\\nAZURE_CONTAINER=dcos-exhibitor\\nAZURE_PREFIX=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor\"},{\"content\":\"com.netflix.exhibitor.azure.account-name=',variables('masterStorageAccountExhibitorName'),'\\ncom.netflix.exhibitor.azure.account-key=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('masterStorageAccountExhibitorName')), '2015-06-15').key1,'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor.properties\"},{\"content\":\"{\\\"uiConfiguration\\\":{\\\"plugins\\\":{\\\"banner\\\":{\\\"enabled\\\":false,\\\"backgroundColor\\\":\\\"#1E232F\\\",\\\"foregroundColor\\\":\\\"#FFFFFF\\\",\\\"headerTitle\\\":null,\\\"headerContent\\\":null,\\\"footerContent\\\":null,\\\"imagePath\\\":null,\\\"dismissible\\\":null},\\\"branding\\\":{\\\"enabled\\\":false},\\\"external-links\\\": {\\\"enabled\\\": false},\\n\\n\\\"authentication\\\":{\\\"enabled\\\":false},\\n\\n\\\"oauth\\\":{\\\"enabled\\\":',variables('oauthEnabled'),',\\\"authHost\\\":\\\"https://dcos.auth0.com\\\"},\\n\\n\\n\\\"tracking\\\":{\\\"enabled\\\":false}}}}\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/ui-config.json\"},{\"content\":\"{}\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/pkginfo.json\"},{\"content\":\"[Unit]\\nBefore=dcos.target\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\nExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\",\"path\":\"/etc/systemd/system/dcos-link-env.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Download DC/OS to this host.\\nAfter=network-online.target\\nWants=network-online.target\\nConditionPathExists=!/opt/mesosphere/\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /var/lib/mesos/dl/bootstrap.tar.xz ',variables('dcosBootstrapURL'),'\\nExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\nExecStart=/usr/bin/tar -axf /var/lib/mesos/dl/bootstrap.tar.xz -C /opt/mesosphere\\nExecStartPost=-/usr/bin/rm -f /var/lib/mesos/dl/bootstrap.tar.xz\\n\",\"path\":\"/etc/systemd/system/dcos-download.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Specialize DC/OS for this host.\\nRequires=dcos-download.service\\nAfter=dcos-download.service\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n[Install]\\nWantedBy=multi-user.target\\n\",\"path\":\"/etc/systemd/system/dcos-setup.service\",\"permissions\":\"0644\"},{\"content\":\"\",\"path\":\"/etc/mesosphere/roles/azure\"},{\"content\":\"#!/bin/bash\\n\\n\\nMESOSDIR=/var/lib/mesos/dl\\nmkdir $MESOSDIR\\n\\n\\n# load the env vars\\n. /etc/mesosphere/setup-flags/dcos-deploy-environment\\n\\n\\n# default dc/os component download address (Azure CDN)\\nDOCKER_ENGINE_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libltdl7_2.4.6-0.1_amd64.deb\\n\\n\\ncase $DCOS_ENVIRONMENT in\\n# because of Chinese GreatWall Firewall, the default packages on Azure CDN is blocked. So the following Chinese local mirror url should be used instead.\\nAzureChinaCloud)\\nDOCKER_ENGINE_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libltdl7_2.4.6-0.1_amd64.deb\\n;;\\nesac\\n\\n\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/d.deb $DOCKER_ENGINE_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/1.deb $LIBIPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/2.deb $IPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/3.deb $UNZIP_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/4.deb $LIBLTDL_DOWNLOAD_URL \\u0026\\nwait\\n\\n\\nfor i in {1..300}; do\\ndpkg -i $MESOSDIR/{1,2,3,4}.deb\\nif [ \\\"$?\\\" = \\\"0\\\" ]\\nthen\\necho \\\"succeeded\\\"\\nbreak\\nfi\\nsleep 1\\ndone\\n\\n\\ntouch /etc/mesosphere/roles/slave\\n\",\"owner\":\"root\",\"path\":\"/opt/azure/containers/provision.sh\",\"permissions\":\"0744\"},{\"content\":\"\",\"owner\":\"root\",\"path\":\"/var/lib/dcos/mesos-slave-common\",\"permissions\":\"0644\"}]}'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('sshRSAPublicKey')]",
                    "path": "[variables('sshKeyPath')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": {
              "offer": "[variables('osImageOffer')]",
              "publisher": "[variables('osImagePublisher')]",
              "sku": "[variables('osImageSKU')]",
              "version": "[variables('osImageVersion')]"
            },
            "osDisk": {
              "caching": "ReadOnly",
              "createOption": "FromImage",
              "name": "vmssosdisk",
              "vhdContainers": [
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri9AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri9AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri9AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri9AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri9StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri9AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]"
              ]
            }
          }
        }
      },
      "sku": {
        "capacity": "[variables('agentpri9Count')]",
        "name": "[variables('agentpri9VMSize')]",
        "tier": "Standard"
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('agentpri9VMNamePrefix'), '-vmss')]"
      },
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('agentpri10NSGName')]",
      "properties": {
        "securityRules": []
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentpri10StorageAccountsCount')]",
        "name": "loop"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri10AccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentpri10VMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[variables('vnetID')]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri10AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri10AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri10AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri10AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri10AccountName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpri10VMNamePrefix'), '-vmss')]",
      "properties": {
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "nic",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentpri10VnetSubnetID')]"
                        }
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[variables('adminUsername')]",
            "computerNamePrefix": "[variables('agentpri10VMNamePrefix')]",
            "customData": "[base64(concat('#cloud-config\n\n', '{\"bootcmd\":[\"bash -c \\\"if [ ! -f /var/lib/sdb-gpt ];then echo DCOS-5890;parted -s /dev/sdb mklabel gpt;touch /var/lib/sdb-gpt;fi\\\"\"],\"disk_setup\":{\"ephemeral0\":{\"layout\":[50,50],\"overwrite\":true,\"table_type\":\"gpt\"}},\"fs_setup\":[{\"device\":\"ephemeral0.1\",\"filesystem\":\"ext4\",\"overwrite\":true},{\"device\":\"ephemeral0.2\",\"filesystem\":\"ext4\",\"overwrite\":true}],\"mounts\":[[\"ephemeral0.1\",\"/var/lib/mesos\"],[\"ephemeral0.2\",\"/var/lib/docker\"]],\"runcmd\":[[\"ln\",\"-s\",\"/bin/rm\",\"/usr/bin/rm\"],[\"ln\",\"-s\",\"/bin/mkdir\",\"/usr/bin/mkdir\"],[\"ln\",\"-s\",\"/bin/tar\",\"/usr/bin/tar\"],[\"ln\",\"-s\",\"/bin/ln\",\"/usr/bin/ln\"],[\"ln\",\"-s\",\"/bin/cp\",\"/usr/bin/cp\"],[\"ln\",\"-s\",\"/bin/systemctl\",\"/usr/bin/systemctl\"],[\"ln\",\"-s\",\"/bin/mount\",\"/usr/bin/mount\"],[\"ln\",\"-s\",\"/bin/bash\",\"/usr/bin/bash\"],[\"ln\",\"-s\",\"/usr/sbin/useradd\",\"/usr/bin/useradd\"],[\"systemctl\",\"disable\",\"--now\",\"resolvconf.service\"],[\"systemctl\",\"mask\",\"--now\",\"lxc-net.service\"],\"/opt/azure/containers/provision.sh\",[\"cp\",\"-p\",\"/etc/resolv.conf\",\"/tmp/resolv.conf\"],[\"rm\",\"-f\",\"/etc/resolv.conf\"],[\"cp\",\"-p\",\"/tmp/resolv.conf\",\"/etc/resolv.conf\"],[\"systemctl\",\"start\",\"dcos-docker-install.service\"],[\"systemctl\",\"start\",\"dcos-config-writer.service\"],[\"systemctl\",\"restart\",\"systemd-journald.service\"],[\"systemctl\",\"restart\",\"docker.service\"],[\"systemctl\",\"start\",\"dcos-link-env.service\"],[\"systemctl\",\"enable\",\"dcos-setup.service\"],[\"systemctl\",\"--no-block\",\"start\",\"dcos-setup.service\"]],\"write_files\":[{\"content\":\"https://dcosio.azureedge.net/dcos/stable\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/repository-url\",\"permissions\":\"0644\"},{\"content\":\"DCOS_ENVIRONMENT=',variables('targetEnvironment'),'\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/dcos-deploy-environment\",\"permissions\":\"0644\"},{\"content\":\"[\\\"dcos-config--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\", \\\"dcos-metadata--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\"]\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/cluster-packages.json\",\"permissions\":\"0644\"},{\"content\":\"[Journal]\\nMaxLevelConsole=warning\\nRateLimitInterval=1s\\nRateLimitBurst=20000\\n\",\"owner\":\"root\",\"path\":\"/etc/systemd/journald.conf.d/dcos.conf\",\"permissions\":\"0644\"},{\"content\":\"rexray:\\n  loglevel: info\\n  modules:\\n    default-admin:\\n      host: tcp://127.0.0.1:61003\\n    default-docker:\\n      disabled: true\\n\",\"path\":\"/etc/rexray/config.yml\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nAfter=network-online.target\\nWants=network-online.target\\n[Service]\\nType=oneshot\\nEnvironment=DEBIAN_FRONTEND=noninteractive\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStart=/usr/bin/bash -c \\\"try=1;until dpkg -D3 -i /var/lib/mesos/dl/d.deb || ((try\\u003e9));do echo retry $((try++));sleep $((try*try));done;systemctl --now start docker;systemctl restart docker.socket\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-docker-install.service\",\"permissions\":\"0644\"},{\"content\":\"[Service]\\nRestart=always\\nStartLimitInterval=0\\nRestartSec=15\\nExecStartPre=-/sbin/ip link del docker0\\nExecStart=\\nExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\\n\",\"path\":\"/etc/systemd/system/docker.service.d/execstart.conf\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nPartOf=docker.service\\n[Socket]\\nListenStream=/var/run/docker.sock\\nSocketMode=0660\\nSocketUser=root\\nSocketGroup=docker\\nListenStream=2375\\nBindIPv6Only=both\\n[Install]\\nWantedBy=sockets.target\\n\",\"path\":\"/etc/systemd/system/docker.socket\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nRequires=dcos-setup.service\\nAfter=dcos-setup.service\\n[Service]\\nType=oneshot\\nEnvironmentFile=/etc/environment\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/usr/bin/bash -c \\\"echo $(detect_ip) $(hostname) \\u003e /etc/hosts\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-config-writer.service\",\"permissions\":\"0644\"},{\"content\":\"MESOS_CLUSTER=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/mesos-master-provider\"},{\"content\":\"ADMINROUTER_ACTIVATE_AUTH_MODULE=',variables('oauthEnabled'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/adminrouter.env\"},{\"content\":\"[\\\"', reference(variables('masterVMNic')[0]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[1]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[2]).ipConfigurations[0].properties.privateIPAddress,'\\\"]\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/master_list\"},{\"content\":\"EXHIBITOR_BACKEND=AZURE\\nAZURE_CONTAINER=dcos-exhibitor\\nAZURE_PREFIX=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor\"},{\"content\":\"com.netflix.exhibitor.azure.account-name=',variables('masterStorageAccountExhibitorName'),'\\ncom.netflix.exhibitor.azure.account-key=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('masterStorageAccountExhibitorName')), '2015-06-15').key1,'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor.properties\"},{\"content\":\"{\\\"uiConfiguration\\\":{\\\"plugins\\\":{\\\"banner\\\":{\\\"enabled\\\":false,\\\"backgroundColor\\\":\\\"#1E232F\\\",\\\"foregroundColor\\\":\\\"#FFFFFF\\\",\\\"headerTitle\\\":null,\\\"headerContent\\\":null,\\\"footerContent\\\":null,\\\"imagePath\\\":null,\\\"dismissible\\\":null},\\\"branding\\\":{\\\"enabled\\\":false},\\\"external-links\\\": {\\\"enabled\\\": false},\\n\\n\\\"authentication\\\":{\\\"enabled\\\":false},\\n\\n\\\"oauth\\\":{\\\"enabled\\\":',variables('oauthEnabled'),',\\\"authHost\\\":\\\"https://dcos.auth0.com\\\"},\\n\\n\\n\\\"tracking\\\":{\\\"enabled\\\":false}}}}\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/ui-config.json\"},{\"content\":\"{}\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/pkginfo.json\"},{\"content\":\"[Unit]\\nBefore=dcos.target\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\nExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\",\"path\":\"/etc/systemd/system/dcos-link-env.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Download DC/OS to this host.\\nAfter=network-online.target\\nWants=network-online.target\\nConditionPathExists=!/opt/mesosphere/\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /var/lib/mesos/dl/bootstrap.tar.xz ',variables('dcosBootstrapURL'),'\\nExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\nExecStart=/usr/bin/tar -axf /var/lib/mesos/dl/bootstrap.tar.xz -C /opt/mesosphere\\nExecStartPost=-/usr/bin/rm -f /var/lib/mesos/dl/bootstrap.tar.xz\\n\",\"path\":\"/etc/systemd/system/dcos-download.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Specialize DC/OS for this host.\\nRequires=dcos-download.service\\nAfter=dcos-download.service\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n[Install]\\nWantedBy=multi-user.target\\n\",\"path\":\"/etc/systemd/system/dcos-setup.service\",\"permissions\":\"0644\"},{\"content\":\"\",\"path\":\"/etc/mesosphere/roles/azure\"},{\"content\":\"#!/bin/bash\\n\\n\\nMESOSDIR=/var/lib/mesos/dl\\nmkdir $MESOSDIR\\n\\n\\n# load the env vars\\n. /etc/mesosphere/setup-flags/dcos-deploy-environment\\n\\n\\n# default dc/os component download address (Azure CDN)\\nDOCKER_ENGINE_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libltdl7_2.4.6-0.1_amd64.deb\\n\\n\\ncase $DCOS_ENVIRONMENT in\\n# because of Chinese GreatWall Firewall, the default packages on Azure CDN is blocked. So the following Chinese local mirror url should be used instead.\\nAzureChinaCloud)\\nDOCKER_ENGINE_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libltdl7_2.4.6-0.1_amd64.deb\\n;;\\nesac\\n\\n\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/d.deb $DOCKER_ENGINE_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/1.deb $LIBIPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/2.deb $IPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/3.deb $UNZIP_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/4.deb $LIBLTDL_DOWNLOAD_URL \\u0026\\nwait\\n\\n\\nfor i in {1..300}; do\\ndpkg -i $MESOSDIR/{1,2,3,4}.deb\\nif [ \\\"$?\\\" = \\\"0\\\" ]\\nthen\\necho \\\"succeeded\\\"\\nbreak\\nfi\\nsleep 1\\ndone\\n\\n\\ntouch /etc/mesosphere/roles/slave\\n\",\"owner\":\"root\",\"path\":\"/opt/azure/containers/provision.sh\",\"permissions\":\"0744\"},{\"content\":\"\",\"owner\":\"root\",\"path\":\"/var/lib/dcos/mesos-slave-common\",\"permissions\":\"0644\"}]}'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('sshRSAPublicKey')]",
                    "path": "[variables('sshKeyPath')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": {
              "offer": "[variables('osImageOffer')]",
              "publisher": "[variables('osImagePublisher')]",
              "sku": "[variables('osImageSKU')]",
              "version": "[variables('osImageVersion')]"
            },
            "osDisk": {
              "caching": "ReadOnly",
              "createOption": "FromImage",
              "name": "vmssosdisk",
              "vhdContainers": [
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri10AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri10AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri10AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri10AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpri10StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpri10AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]"
              ]
            }
          }
        }
      },
      "sku": {
        "capacity": "[variables('agentpri10Count')]",
        "name": "[variables('agentpri10VMSize')]",
        "tier": "Standard"
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('agentpri10VMNamePrefix'), '-vmss')]"
      },
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('agentpublic1NSGName')]",
      "properties": {
        "securityRules": [
          {
            "name": "Allow_80",
            "properties": {
              "access": "Allow",
              "description": "Allow traffic from the Internet to port 80",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "80",
              "direction": "Inbound",
              "priority": 200,
              "protocol": "*",
              "sourceAddressPrefix": "Internet",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "Allow_443",
            "properties": {
              "access": "Allow",
              "description": "Allow traffic from the Internet to port 443",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "443",
              "direction": "Inbound",
              "priority": 201,
              "protocol": "*",
              "sourceAddressPrefix": "Internet",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "Allow_8080",
            "properties": {
              "access": "Allow",
              "description": "Allow traffic from the Internet to port 8080",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "8080",
              "direction": "Inbound",
              "priority": 202,
              "protocol": "*",
              "sourceAddressPrefix": "Internet",
              "sourcePortRange": "*"
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentpublic1StorageAccountsCount')]",
        "name": "loop"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublic1AccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentpublic1VMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('agentpublic1IPAddressName')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('agentpublic1EndpointDNSNamePrefix')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('agentpublic1IPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('agentpublic1LbName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('agentpublic1LbBackendPoolName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('agentpublic1LbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('agentpublic1IPAddressName'))]"
              }
            }
          }
        ],
        "inboundNatRules": [],
        "loadBalancingRules": [
          {
            "name": "LBRule80",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('agentpublic1LbID'), '/backendAddressPools/', variables('agentpublic1LbBackendPoolName'))]"
              },
              "backendPort": 80,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('agentpublic1LbIPConfigID')]"
              },
              "frontendPort": 80,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentpublic1LbID'),'/probes/tcp80Probe')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "LBRule443",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('agentpublic1LbID'), '/backendAddressPools/', variables('agentpublic1LbBackendPoolName'))]"
              },
              "backendPort": 443,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('agentpublic1LbIPConfigID')]"
              },
              "frontendPort": 443,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentpublic1LbID'),'/probes/tcp443Probe')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "LBRule8080",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('agentpublic1LbID'), '/backendAddressPools/', variables('agentpublic1LbBackendPoolName'))]"
              },
              "backendPort": 8080,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('agentpublic1LbIPConfigID')]"
              },
              "frontendPort": 8080,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentpublic1LbID'),'/probes/tcp8080Probe')]"
              },
              "protocol": "tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "tcp80Probe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 80,
              "protocol": "tcp"
            }
          },
          {
            "name": "tcp443Probe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 443,
              "protocol": "tcp"
            }
          },
          {
            "name": "tcp8080Probe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 8080,
              "protocol": "tcp"
            }
          }
        ]
      },
      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[variables('vnetID')]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublic1AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublic1AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublic1AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublic1AccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublic1AccountName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('agentpublic1LbName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpublic1VMNamePrefix'), '-vmss')]",
      "properties": {
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "nic",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "properties": {
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('agentpublic1LbName'), '/backendAddressPools/',variables('agentpublic1LbBackendPoolName'))]"
                          }
                        ],
                        "subnet": {
                          "id": "[variables('agentpublic1VnetSubnetID')]"
                        }
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[variables('adminUsername')]",
            "computerNamePrefix": "[variables('agentpublic1VMNamePrefix')]",
            "customData": "[base64(concat('#cloud-config\n\n', '{\"bootcmd\":[\"bash -c \\\"if [ ! -f /var/lib/sdb-gpt ];then echo DCOS-5890;parted -s /dev/sdb mklabel gpt;touch /var/lib/sdb-gpt;fi\\\"\"],\"disk_setup\":{\"ephemeral0\":{\"layout\":[50,50],\"overwrite\":true,\"table_type\":\"gpt\"}},\"fs_setup\":[{\"device\":\"ephemeral0.1\",\"filesystem\":\"ext4\",\"overwrite\":true},{\"device\":\"ephemeral0.2\",\"filesystem\":\"ext4\",\"overwrite\":true}],\"mounts\":[[\"ephemeral0.1\",\"/var/lib/mesos\"],[\"ephemeral0.2\",\"/var/lib/docker\"]],\"runcmd\":[[\"ln\",\"-s\",\"/bin/rm\",\"/usr/bin/rm\"],[\"ln\",\"-s\",\"/bin/mkdir\",\"/usr/bin/mkdir\"],[\"ln\",\"-s\",\"/bin/tar\",\"/usr/bin/tar\"],[\"ln\",\"-s\",\"/bin/ln\",\"/usr/bin/ln\"],[\"ln\",\"-s\",\"/bin/cp\",\"/usr/bin/cp\"],[\"ln\",\"-s\",\"/bin/systemctl\",\"/usr/bin/systemctl\"],[\"ln\",\"-s\",\"/bin/mount\",\"/usr/bin/mount\"],[\"ln\",\"-s\",\"/bin/bash\",\"/usr/bin/bash\"],[\"ln\",\"-s\",\"/usr/sbin/useradd\",\"/usr/bin/useradd\"],[\"systemctl\",\"disable\",\"--now\",\"resolvconf.service\"],[\"systemctl\",\"mask\",\"--now\",\"lxc-net.service\"],\"/opt/azure/containers/provision.sh\",[\"cp\",\"-p\",\"/etc/resolv.conf\",\"/tmp/resolv.conf\"],[\"rm\",\"-f\",\"/etc/resolv.conf\"],[\"cp\",\"-p\",\"/tmp/resolv.conf\",\"/etc/resolv.conf\"],[\"systemctl\",\"start\",\"dcos-docker-install.service\"],[\"systemctl\",\"start\",\"dcos-config-writer.service\"],[\"systemctl\",\"restart\",\"systemd-journald.service\"],[\"systemctl\",\"restart\",\"docker.service\"],[\"systemctl\",\"start\",\"dcos-link-env.service\"],[\"systemctl\",\"enable\",\"dcos-setup.service\"],[\"systemctl\",\"--no-block\",\"start\",\"dcos-setup.service\"]],\"write_files\":[{\"content\":\"https://dcosio.azureedge.net/dcos/stable\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/repository-url\",\"permissions\":\"0644\"},{\"content\":\"DCOS_ENVIRONMENT=',variables('targetEnvironment'),'\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/dcos-deploy-environment\",\"permissions\":\"0644\"},{\"content\":\"[\\\"dcos-config--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\", \\\"dcos-metadata--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\"]\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/cluster-packages.json\",\"permissions\":\"0644\"},{\"content\":\"[Journal]\\nMaxLevelConsole=warning\\nRateLimitInterval=1s\\nRateLimitBurst=20000\\n\",\"owner\":\"root\",\"path\":\"/etc/systemd/journald.conf.d/dcos.conf\",\"permissions\":\"0644\"},{\"content\":\"rexray:\\n  loglevel: info\\n  modules:\\n    default-admin:\\n      host: tcp://127.0.0.1:61003\\n    default-docker:\\n      disabled: true\\n\",\"path\":\"/etc/rexray/config.yml\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nAfter=network-online.target\\nWants=network-online.target\\n[Service]\\nType=oneshot\\nEnvironment=DEBIAN_FRONTEND=noninteractive\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStart=/usr/bin/bash -c \\\"try=1;until dpkg -D3 -i /var/lib/mesos/dl/d.deb || ((try\\u003e9));do echo retry $((try++));sleep $((try*try));done;systemctl --now start docker;systemctl restart docker.socket\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-docker-install.service\",\"permissions\":\"0644\"},{\"content\":\"[Service]\\nRestart=always\\nStartLimitInterval=0\\nRestartSec=15\\nExecStartPre=-/sbin/ip link del docker0\\nExecStart=\\nExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\\n\",\"path\":\"/etc/systemd/system/docker.service.d/execstart.conf\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nPartOf=docker.service\\n[Socket]\\nListenStream=/var/run/docker.sock\\nSocketMode=0660\\nSocketUser=root\\nSocketGroup=docker\\nListenStream=2375\\nBindIPv6Only=both\\n[Install]\\nWantedBy=sockets.target\\n\",\"path\":\"/etc/systemd/system/docker.socket\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nRequires=dcos-setup.service\\nAfter=dcos-setup.service\\n[Service]\\nType=oneshot\\nEnvironmentFile=/etc/environment\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/usr/bin/bash -c \\\"echo $(detect_ip) $(hostname) \\u003e /etc/hosts\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-config-writer.service\",\"permissions\":\"0644\"},{\"content\":\"MESOS_CLUSTER=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/mesos-master-provider\"},{\"content\":\"ADMINROUTER_ACTIVATE_AUTH_MODULE=',variables('oauthEnabled'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/adminrouter.env\"},{\"content\":\"[\\\"', reference(variables('masterVMNic')[0]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[1]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[2]).ipConfigurations[0].properties.privateIPAddress,'\\\"]\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/master_list\"},{\"content\":\"EXHIBITOR_BACKEND=AZURE\\nAZURE_CONTAINER=dcos-exhibitor\\nAZURE_PREFIX=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor\"},{\"content\":\"com.netflix.exhibitor.azure.account-name=',variables('masterStorageAccountExhibitorName'),'\\ncom.netflix.exhibitor.azure.account-key=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('masterStorageAccountExhibitorName')), '2015-06-15').key1,'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor.properties\"},{\"content\":\"{\\\"uiConfiguration\\\":{\\\"plugins\\\":{\\\"banner\\\":{\\\"enabled\\\":false,\\\"backgroundColor\\\":\\\"#1E232F\\\",\\\"foregroundColor\\\":\\\"#FFFFFF\\\",\\\"headerTitle\\\":null,\\\"headerContent\\\":null,\\\"footerContent\\\":null,\\\"imagePath\\\":null,\\\"dismissible\\\":null},\\\"branding\\\":{\\\"enabled\\\":false},\\\"external-links\\\": {\\\"enabled\\\": false},\\n\\n\\\"authentication\\\":{\\\"enabled\\\":false},\\n\\n\\\"oauth\\\":{\\\"enabled\\\":',variables('oauthEnabled'),',\\\"authHost\\\":\\\"https://dcos.auth0.com\\\"},\\n\\n\\n\\\"tracking\\\":{\\\"enabled\\\":false}}}}\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/ui-config.json\"},{\"content\":\"{}\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/pkginfo.json\"},{\"content\":\"[Unit]\\nBefore=dcos.target\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\nExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\",\"path\":\"/etc/systemd/system/dcos-link-env.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Download DC/OS to this host.\\nAfter=network-online.target\\nWants=network-online.target\\nConditionPathExists=!/opt/mesosphere/\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /var/lib/mesos/dl/bootstrap.tar.xz ',variables('dcosBootstrapURL'),'\\nExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\nExecStart=/usr/bin/tar -axf /var/lib/mesos/dl/bootstrap.tar.xz -C /opt/mesosphere\\nExecStartPost=-/usr/bin/rm -f /var/lib/mesos/dl/bootstrap.tar.xz\\n\",\"path\":\"/etc/systemd/system/dcos-download.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Specialize DC/OS for this host.\\nRequires=dcos-download.service\\nAfter=dcos-download.service\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n[Install]\\nWantedBy=multi-user.target\\n\",\"path\":\"/etc/systemd/system/dcos-setup.service\",\"permissions\":\"0644\"},{\"content\":\"\",\"path\":\"/etc/mesosphere/roles/azure\"},{\"content\":\"#!/bin/bash\\n\\n\\nMESOSDIR=/var/lib/mesos/dl\\nmkdir $MESOSDIR\\n\\n\\n# load the env vars\\n. /etc/mesosphere/setup-flags/dcos-deploy-environment\\n\\n\\n# default dc/os component download address (Azure CDN)\\nDOCKER_ENGINE_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libltdl7_2.4.6-0.1_amd64.deb\\n\\n\\ncase $DCOS_ENVIRONMENT in\\n# because of Chinese GreatWall Firewall, the default packages on Azure CDN is blocked. So the following Chinese local mirror url should be used instead.\\nAzureChinaCloud)\\nDOCKER_ENGINE_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libltdl7_2.4.6-0.1_amd64.deb\\n;;\\nesac\\n\\n\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/d.deb $DOCKER_ENGINE_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/1.deb $LIBIPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/2.deb $IPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/3.deb $UNZIP_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/4.deb $LIBLTDL_DOWNLOAD_URL \\u0026\\nwait\\n\\n\\nfor i in {1..300}; do\\ndpkg -i $MESOSDIR/{1,2,3,4}.deb\\nif [ \\\"$?\\\" = \\\"0\\\" ]\\nthen\\necho \\\"succeeded\\\"\\nbreak\\nfi\\nsleep 1\\ndone\\n\\n\\ntouch /etc/mesosphere/roles/slave_public\\n\",\"owner\":\"root\",\"path\":\"/opt/azure/containers/provision.sh\",\"permissions\":\"0744\"},{\"content\":\"\",\"owner\":\"root\",\"path\":\"/var/lib/dcos/mesos-slave-common\",\"permissions\":\"0644\"}]}'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('sshRSAPublicKey')]",
                    "path": "[variables('sshKeyPath')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": {
              "offer": "[variables('osImageOffer')]",
              "publisher": "[variables('osImagePublisher')]",
              "sku": "[variables('osImageSKU')]",
              "version": "[variables('osImageVersion')]"
            },
            "osDisk": {
              "caching": "ReadOnly",
              "createOption": "FromImage",
              "name": "vmssosdisk",
              "vhdContainers": [
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublic1AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublic1AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublic1AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublic1AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpublic1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublic1AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]"
              ]
            }
          }
        }
      },
      "sku": {
        "capacity": "[variables('agentpublic1Count')]",
        "name": "[variables('agentpublic1VMSize')]",
        "tier": "Standard"
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('agentpublic1VMNamePrefix'), '-vmss')]"
      },
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('masterStorageAccountName')]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('masterVMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('masterStorageAccountExhibitorName')]",
      "properties": {
        "accountType": "Standard_LRS"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('agentpri0NSGName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('agentpri1NSGName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('agentpri2NSGName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('agentpri3NSGName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('agentpri4NSGName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('agentpri5NSGName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('agentpri6NSGName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('agentpri7NSGName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('agentpri8NSGName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('agentpri9NSGName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('agentpri10NSGName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('agentpublic1NSGName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('virtualNetworkName')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('masterSubnet')]",
            "[variables('agentpri0Subnet')]",
            "[variables('agentpri1Subnet')]",
            "[variables('agentpri2Subnet')]",
            "[variables('agentpri3Subnet')]",
            "[variables('agentpri4Subnet')]",
            "[variables('agentpri5Subnet')]",
            "[variables('agentpri6Subnet')]",
            "[variables('agentpri7Subnet')]",
            "[variables('agentpri8Subnet')]",
            "[variables('agentpri9Subnet')]",
            "[variables('agentpri10Subnet')]",
            "[variables('agentpublic1Subnet')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('masterSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('masterSubnet')]"
            }
          },
          {
            "name": "[variables('agentpri0SubnetName')]",
            "properties": {
              "addressPrefix": "[variables('agentpri0Subnet')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('agentpri0NSGName'))]"
              }
            }
          },
          {
            "name": "[variables('agentpri1SubnetName')]",
            "properties": {
              "addressPrefix": "[variables('agentpri1Subnet')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('agentpri1NSGName'))]"
              }
            }
          },
          {
            "name": "[variables('agentpri2SubnetName')]",
            "properties": {
              "addressPrefix": "[variables('agentpri2Subnet')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('agentpri2NSGName'))]"
              }
            }
          },
          {
            "name": "[variables('agentpri3SubnetName')]",
            "properties": {
              "addressPrefix": "[variables('agentpri3Subnet')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('agentpri3NSGName'))]"
              }
            }
          },
          {
            "name": "[variables('agentpri4SubnetName')]",
            "properties": {
              "addressPrefix": "[variables('agentpri4Subnet')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('agentpri4NSGName'))]"
              }
            }
          },
          {
            "name": "[variables('agentpri5SubnetName')]",
            "properties": {
              "addressPrefix": "[variables('agentpri5Subnet')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('agentpri5NSGName'))]"
              }
            }
          },
          {
            "name": "[variables('agentpri6SubnetName')]",
            "properties": {
              "addressPrefix": "[variables('agentpri6Subnet')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('agentpri6NSGName'))]"
              }
            }
          },
          {
            "name": "[variables('agentpri7SubnetName')]",
            "properties": {
              "addressPrefix": "[variables('agentpri7Subnet')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('agentpri7NSGName'))]"
              }
            }
          },
          {
            "name": "[variables('agentpri8SubnetName')]",
            "properties": {
              "addressPrefix": "[variables('agentpri8Subnet')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('agentpri8NSGName'))]"
              }
            }
          },
          {
            "name": "[variables('agentpri9SubnetName')]",
            "properties": {
              "addressPrefix": "[variables('agentpri9Subnet')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('agentpri9NSGName'))]"
              }
            }
          },
          {
            "name": "[variables('agentpri10SubnetName')]",
            "properties": {
              "addressPrefix": "[variables('agentpri10Subnet')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('agentpri10NSGName'))]"
              }
            }
          },
          {
            "name": "[variables('agentpublic1SubnetName')]",
            "properties": {
              "addressPrefix": "[variables('agentpublic1Subnet')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('agentpublic1NSGName'))]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/virtualNetworks"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('masterAvailabilitySet')]",
      "properties": {},
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('masterPublicIPAddressName')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('masterEndpointDNSNamePrefix')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('masterLbName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('masterLbBackendPoolName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('masterLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "masterLbLoopNode"
      },
      "dependsOn": [
        "[variables('masterLbID')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterLbName'), '/', 'SSH-', variables('masterVMNamePrefix'), copyIndex())]",
      "properties": {
        "backendPort": 22,
        "enableFloatingIP": false,
        "frontendIPConfiguration": {
          "id": "[variables('masterLbIPConfigID')]"
        },
        "frontendPort": "[copyIndex(2200)]",
        "protocol": "tcp"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('masterNSGName')]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh",
            "properties": {
              "access": "Allow",
              "description": "Allow SSH",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22",
              "direction": "Inbound",
              "priority": 200,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "nicLoopNode"
      },
      "dependsOn": [
        "[variables('masterNSGID')]",
        "[variables('vnetID')]",
        "[variables('masterLbID')]",
        "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipConfigNode",
            "properties": {
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]"
                }
              ],
              "privateIPAddress": "[concat(variables('masterFirstAddrPrefix'), copyIndex(int(variables('masterFirstAddrOctet4'))))]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('masterVnetSubnetID')]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[variables('masterNSGID')]"
        }
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/',variables('masterAvailabilitySet'))]",
        "[variables('masterStorageAccountName')]",
        "[variables('masterStorageAccountExhibitorName')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('masterAvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('masterVMSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'), 'nic-', copyIndex()))]"
            }
          ]
        },
        "osProfile": {
          "adminUsername": "[variables('adminUsername')]",
          "computername": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
          "customData": "[base64(concat('#cloud-config\n\n', '{\"bootcmd\":[\"bash -c \\\"if [ ! -f /var/lib/sdb-gpt ];then echo DCOS-5890;parted -s /dev/sdb mklabel gpt;touch /var/lib/sdb-gpt;fi\\\"\"],\"disk_setup\":{\"ephemeral0\":{\"layout\":[50,50],\"overwrite\":true,\"table_type\":\"gpt\"}},\"fs_setup\":[{\"device\":\"ephemeral0.1\",\"filesystem\":\"ext4\",\"overwrite\":true},{\"device\":\"ephemeral0.2\",\"filesystem\":\"ext4\",\"overwrite\":true}],\"mounts\":[[\"ephemeral0.1\",\"/var/lib/mesos\"],[\"ephemeral0.2\",\"/var/lib/docker\"]],\"runcmd\":[[\"ln\",\"-s\",\"/bin/rm\",\"/usr/bin/rm\"],[\"ln\",\"-s\",\"/bin/mkdir\",\"/usr/bin/mkdir\"],[\"ln\",\"-s\",\"/bin/tar\",\"/usr/bin/tar\"],[\"ln\",\"-s\",\"/bin/ln\",\"/usr/bin/ln\"],[\"ln\",\"-s\",\"/bin/cp\",\"/usr/bin/cp\"],[\"ln\",\"-s\",\"/bin/systemctl\",\"/usr/bin/systemctl\"],[\"ln\",\"-s\",\"/bin/mount\",\"/usr/bin/mount\"],[\"ln\",\"-s\",\"/bin/bash\",\"/usr/bin/bash\"],[\"ln\",\"-s\",\"/usr/sbin/useradd\",\"/usr/bin/useradd\"],[\"systemctl\",\"disable\",\"--now\",\"resolvconf.service\"],[\"systemctl\",\"mask\",\"--now\",\"lxc-net.service\"],\"/opt/azure/containers/provision.sh\",[\"cp\",\"-p\",\"/etc/resolv.conf\",\"/tmp/resolv.conf\"],[\"rm\",\"-f\",\"/etc/resolv.conf\"],[\"cp\",\"-p\",\"/tmp/resolv.conf\",\"/etc/resolv.conf\"],[\"systemctl\",\"start\",\"dcos-docker-install.service\"],[\"systemctl\",\"start\",\"dcos-config-writer.service\"],[\"systemctl\",\"restart\",\"systemd-journald.service\"],[\"systemctl\",\"restart\",\"docker.service\"],[\"systemctl\",\"start\",\"dcos-link-env.service\"],[\"systemctl\",\"enable\",\"dcos-setup.service\"],[\"systemctl\",\"--no-block\",\"start\",\"dcos-setup.service\"]],\"write_files\":[{\"content\":\"https://dcosio.azureedge.net/dcos/stable\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/repository-url\",\"permissions\":\"0644\"},{\"content\":\"DCOS_ENVIRONMENT=',variables('targetEnvironment'),'\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/dcos-deploy-environment\",\"permissions\":\"0644\"},{\"content\":\"[\\\"dcos-config--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\", \\\"dcos-metadata--setup_b1cd359287504efb780257bd12cc3a63704e42d4\\\"]\\n\",\"owner\":\"root\",\"path\":\"/etc/mesosphere/setup-flags/cluster-packages.json\",\"permissions\":\"0644\"},{\"content\":\"[Journal]\\nMaxLevelConsole=warning\\nRateLimitInterval=1s\\nRateLimitBurst=20000\\n\",\"owner\":\"root\",\"path\":\"/etc/systemd/journald.conf.d/dcos.conf\",\"permissions\":\"0644\"},{\"content\":\"rexray:\\n  loglevel: info\\n  modules:\\n    default-admin:\\n      host: tcp://127.0.0.1:61003\\n    default-docker:\\n      disabled: true\\n\",\"path\":\"/etc/rexray/config.yml\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nAfter=network-online.target\\nWants=network-online.target\\n[Service]\\nType=oneshot\\nEnvironment=DEBIAN_FRONTEND=noninteractive\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStart=/usr/bin/bash -c \\\"try=1;until dpkg -D3 -i /var/lib/mesos/dl/d.deb || ((try\\u003e9));do echo retry $((try++));sleep $((try*try));done;systemctl --now start docker;systemctl restart docker.socket\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-docker-install.service\",\"permissions\":\"0644\"},{\"content\":\"[Service]\\nRestart=always\\nStartLimitInterval=0\\nRestartSec=15\\nExecStartPre=-/sbin/ip link del docker0\\nExecStart=\\nExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\\n\",\"path\":\"/etc/systemd/system/docker.service.d/execstart.conf\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nPartOf=docker.service\\n[Socket]\\nListenStream=/var/run/docker.sock\\nSocketMode=0660\\nSocketUser=root\\nSocketGroup=docker\\nListenStream=2375\\nBindIPv6Only=both\\n[Install]\\nWantedBy=sockets.target\\n\",\"path\":\"/etc/systemd/system/docker.socket\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nRequires=dcos-setup.service\\nAfter=dcos-setup.service\\n[Service]\\nType=oneshot\\nEnvironmentFile=/etc/environment\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/usr/bin/bash -c \\\"echo $(detect_ip) $(hostname) \\u003e /etc/hosts\\\"\\n\",\"path\":\"/etc/systemd/system/dcos-config-writer.service\",\"permissions\":\"0644\"},{\"content\":\"MESOS_CLUSTER=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/mesos-master-provider\"},{\"content\":\"ADMINROUTER_ACTIVATE_AUTH_MODULE=',variables('oauthEnabled'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/adminrouter.env\"},{\"content\":\"[\\\"', reference(variables('masterVMNic')[0]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[1]).ipConfigurations[0].properties.privateIPAddress,'\\\", \\\"', reference(variables('masterVMNic')[2]).ipConfigurations[0].properties.privateIPAddress,'\\\"]\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/master_list\"},{\"content\":\"EXHIBITOR_BACKEND=AZURE\\nAZURE_CONTAINER=dcos-exhibitor\\nAZURE_PREFIX=',variables('masterPublicIPAddressName'),'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor\"},{\"content\":\"com.netflix.exhibitor.azure.account-name=',variables('masterStorageAccountExhibitorName'),'\\ncom.netflix.exhibitor.azure.account-key=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('masterStorageAccountExhibitorName')), '2015-06-15').key1,'\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor.properties\"},{\"content\":\"{\\\"uiConfiguration\\\":{\\\"plugins\\\":{\\\"banner\\\":{\\\"enabled\\\":false,\\\"backgroundColor\\\":\\\"#1E232F\\\",\\\"foregroundColor\\\":\\\"#FFFFFF\\\",\\\"headerTitle\\\":null,\\\"headerContent\\\":null,\\\"footerContent\\\":null,\\\"imagePath\\\":null,\\\"dismissible\\\":null},\\\"branding\\\":{\\\"enabled\\\":false},\\\"external-links\\\": {\\\"enabled\\\": false},\\n\\n\\\"authentication\\\":{\\\"enabled\\\":false},\\n\\n\\\"oauth\\\":{\\\"enabled\\\":',variables('oauthEnabled'),',\\\"authHost\\\":\\\"https://dcos.auth0.com\\\"},\\n\\n\\n\\\"tracking\\\":{\\\"enabled\\\":false}}}}\\n\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/ui-config.json\"},{\"content\":\"{}\",\"path\":\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/pkginfo.json\"},{\"content\":\"[Unit]\\nBefore=dcos.target\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\nExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\",\"path\":\"/etc/systemd/system/dcos-link-env.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Download DC/OS to this host.\\nAfter=network-online.target\\nWants=network-online.target\\nConditionPathExists=!/opt/mesosphere/\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /var/lib/mesos/dl/bootstrap.tar.xz ',variables('dcosBootstrapURL'),'\\nExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\nExecStart=/usr/bin/tar -axf /var/lib/mesos/dl/bootstrap.tar.xz -C /opt/mesosphere\\nExecStartPost=-/usr/bin/rm -f /var/lib/mesos/dl/bootstrap.tar.xz\\n\",\"path\":\"/etc/systemd/system/dcos-download.service\",\"permissions\":\"0644\"},{\"content\":\"[Unit]\\nDescription=Pkgpanda: Specialize DC/OS for this host.\\nRequires=dcos-download.service\\nAfter=dcos-download.service\\n[Service]\\nType=oneshot\\nStandardOutput=journal+console\\nStandardError=journal+console\\nEnvironmentFile=/opt/mesosphere/environment\\nExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n[Install]\\nWantedBy=multi-user.target\\n\",\"path\":\"/etc/systemd/system/dcos-setup.service\",\"permissions\":\"0644\"},{\"content\":\"\",\"path\":\"/etc/mesosphere/roles/azure\"},{\"content\":\"#!/bin/bash\\n\\n\\nMESOSDIR=/var/lib/mesos/dl\\nmkdir $MESOSDIR\\n\\n\\n# load the env vars\\n. /etc/mesosphere/setup-flags/dcos-deploy-environment\\n\\n\\n# default dc/os component download address (Azure CDN)\\nDOCKER_ENGINE_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=https://az837203.vo.msecnd.net/dcos-deps/libltdl7_2.4.6-0.1_amd64.deb\\n\\n\\ncase $DCOS_ENVIRONMENT in\\n# because of Chinese GreatWall Firewall, the default packages on Azure CDN is blocked. So the following Chinese local mirror url should be used instead.\\nAzureChinaCloud)\\nDOCKER_ENGINE_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/docker-engine_1.11.2-0~xenial_amd64.deb\\nLIBIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libipset3_6.29-1_amd64.deb\\nIPSET_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/ipset_6.29-1_amd64.deb\\nUNZIP_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/unzip_6.0-20ubuntu1_amd64.deb\\nLIBLTDL_DOWNLOAD_URL=http://acsengine.blob.core.chinacloudapi.cn/dcos/libltdl7_2.4.6-0.1_amd64.deb\\n;;\\nesac\\n\\n\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/d.deb $DOCKER_ENGINE_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/1.deb $LIBIPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/2.deb $IPSET_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/3.deb $UNZIP_DOWNLOAD_URL \\u0026\\ncurl -fLsSv --retry 20 -Y 100000 -y 60 -o $MESOSDIR/4.deb $LIBLTDL_DOWNLOAD_URL \\u0026\\nwait\\n\\n\\nfor i in {1..300}; do\\ndpkg -i $MESOSDIR/{1,2,3,4}.deb\\nif [ \\\"$?\\\" = \\\"0\\\" ]\\nthen\\necho \\\"succeeded\\\"\\nbreak\\nfi\\nsleep 1\\ndone\\n\\n\\ntouch /etc/mesosphere/roles/master\\ntouch /etc/mesosphere/roles/azure_master\\n\",\"owner\":\"root\",\"path\":\"/opt/azure/containers/provision.sh\",\"permissions\":\"0744\"},{\"content\":\"\",\"owner\":\"root\",\"path\":\"/var/lib/dcos/mesos-slave-common\",\"permissions\":\"0644\"}]}'))]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "keyData": "[variables('sshRSAPublicKey')]",
                  "path": "[variables('sshKeyPath')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('osImageOffer')]",
            "publisher": "[variables('osImagePublisher')]",
            "sku": "[variables('osImageSKU')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'-osdisk')]",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('masterStorageAccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'vhds/',variables('masterVMNamePrefix'),copyIndex(),'-osdisk.vhd')]"
            }
          }
        }
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('masterVMNamePrefix'), copyIndex())]"
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('masterVMNamePrefix'), sub(variables('masterCount'), 1))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterVMNamePrefix'), sub(variables('masterCount'), 1), '/waitforleader')]",
      "properties": {
        "autoUpgradeMinorVersion": true,
        "publisher": "Microsoft.OSTCExtensions",
        "settings": {
          "commandToExecute": "sh -c 'until ping -c1 leader.mesos;do echo waiting for leader.mesos;sleep 15;done;echo leader.mesos up'"
        },
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.4"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    }
  ],
  "outputs": {
    "agentpublic1FQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('agentpublic1IPAddressName'))).dnsSettings.fqdn]"
    },
    "masterFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))).dnsSettings.fqdn]"
    }
  }
}
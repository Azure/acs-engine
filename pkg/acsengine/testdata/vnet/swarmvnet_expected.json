{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "agentprivateCount": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentprivateVMSize": {
      "allowedValues": [
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "agentprivateVnetSubnetID": {
      "metadata": {
        "description": "Sets the vnet subnet of agent pool 'agentprivate'."
      },
      "type": "string"
    },
    "agentpublicCount": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentpublicEndpointDNSNamePrefix": {
      "metadata": {
        "description": "Sets the Domain name label for the agent pool IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      },
      "type": "string"
    },
    "agentpublicVMSize": {
      "allowedValues": [
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "agentpublicVnetSubnetID": {
      "metadata": {
        "description": "Sets the vnet subnet of agent pool 'agentpublic'."
      },
      "type": "string"
    },
    "firstConsecutiveStaticIP": {
      "defaultValue": "10.100.0.5",
      "metadata": {
        "description": "Sets the static IP of the first master"
      },
      "type": "string"
    },
    "linuxAdminUsername": {
      "metadata": {
        "description": "User name for the Linux Virtual Machines (SSH or Password)."
      },
      "type": "string"
    },
    "masterEndpointDNSNamePrefix": {
      "metadata": {
        "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      },
      "type": "string"
    },
    "masterVMSize": {
      "allowedValues": [
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F8",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "masterVnetSubnetID": {
      "metadata": {
        "description": "Sets the vnet subnet of the master."
      },
      "type": "string"
    },
    "nameSuffix": {
      "defaultValue": "31559618",
      "metadata": {
        "description": "A string hash of the master DNS name to uniquely identify the cluster."
      },
      "type": "string"
    },
    "sshRSAPublicKey": {
      "metadata": {
        "description": "SSH public key used for auth to all Linux machines.  Not Required.  If not set, you must provide a password key."
      },
      "type": "string"
    },
    "targetEnvironment": {
      "defaultValue": "AzurePublicCloud",
      "metadata": {
        "description": "The azure deploy environment. eg. AzurePublicCloud, AzureChinaCloud, AzureGermanCloud, AzureUSGovermentCloud"
      },
      "type": "string"
    }
  },
  "variables": {
    "adminUsername": "[parameters('linuxAdminUsername')]",
    "agentCustomScript": "[concat('/usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/configure-swarm-cluster.sh ',variables('clusterInstallParameters'),' >> /var/log/azure/cluster-bootstrap.log 2>&1 &\" &')]",
    "agentMaxVMs": 100,
    "agentRunCmd": "[concat('runcmd:\n -  [ /bin/bash, /opt/azure/containers/install-cluster.sh ]\n\n')]",
    "agentRunCmdFile": "[concat(' -  content: |\n        #!/bin/bash\n        ',variables('agentCustomScript'),'\n    path: /opt/azure/containers/install-cluster.sh\n    permissions: \"0744\"\n')]",
    "agentprivateAccountName": "[concat(variables('storageAccountBaseName'), 'agnt0')]",
    "agentprivateCount": "[parameters('agentprivateCount')]",
    "agentprivateStorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),0)]",
    "agentprivateStorageAccountsCount": "[variables('maxStorageAccountsPerAgent')]",
    "agentprivateVMNamePrefix": "[concat(variables('orchestratorName'), '-agentprivate-', variables('nameSuffix'))]",
    "agentprivateVMSize": "[parameters('agentprivateVMSize')]",
    "agentprivateVnetSubnetID": "[parameters('agentprivateVnetSubnetID')]",
    "agentpublicAccountName": "[concat(variables('storageAccountBaseName'), 'agnt1')]",
    "agentpublicCount": "[parameters('agentpublicCount')]",
    "agentpublicEndpointDNSNamePrefix": "[tolower(parameters('agentpublicEndpointDNSNamePrefix'))]",
    "agentpublicIPAddressName": "[concat(variables('orchestratorName'), '-agent-ip-', variables('agentpublicEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
    "agentpublicLbBackendPoolName": "[concat(variables('orchestratorName'), '-agentpublic-', variables('nameSuffix'))]",
    "agentpublicLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('agentpublicLbName'))]",
    "agentpublicLbIPConfigID": "[concat(variables('agentpublicLbID'),'/frontendIPConfigurations/', variables('agentpublicLbIPConfigName'))]",
    "agentpublicLbIPConfigName": "[concat(variables('orchestratorName'), '-agentpublic-', variables('nameSuffix'))]",
    "agentpublicLbName": "[concat(variables('orchestratorName'), '-agentpublic-', variables('nameSuffix'))]",
    "agentpublicStorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),1)]",
    "agentpublicStorageAccountsCount": "[variables('maxStorageAccountsPerAgent')]",
    "agentpublicVMNamePrefix": "[concat(variables('orchestratorName'), '-agentpublic-', variables('nameSuffix'))]",
    "agentpublicVMSize": "[parameters('agentpublicVMSize')]",
    "agentpublicVnetSubnetID": "[parameters('agentpublicVnetSubnetID')]",
    "apiVersionDefault": "2016-03-30",
    "apiVersionStorage": "2015-06-15",
    "clusterInstallParameters": "[concat(variables('masterCount'), ' ',variables('masterVMNamePrefix'), ' ',variables('masterFirstAddrOctet4'), ' ',variables('adminUsername'),' ',variables('postInstallScriptURI'),' ',variables('masterFirstAddrPrefix'))]",
    "dataStorageAccountPrefixSeed": 97,
    "masterAvailabilitySet": "[concat(variables('orchestratorName'), '-master-availabilitySet-', variables('nameSuffix'))]",
    "masterCount": 3,
    "masterCustomScript": "[concat('/bin/bash -c \"/bin/bash /opt/azure/containers/configure-swarm-cluster.sh ',variables('clusterInstallParameters'),' >> /var/log/azure/cluster-bootstrap.log 2>&1\"')]",
    "masterEndpointDNSNamePrefix": "[tolower(parameters('masterEndpointDNSNamePrefix'))]",
    "masterFirstAddrOctet4": "[variables('masterFirstAddrOctets')[3]]",
    "masterFirstAddrOctets": "[split(parameters('firstConsecutiveStaticIP'),'.')]",
    "masterFirstAddrPrefix": "[concat(variables('masterFirstAddrOctets')[0],'.',variables('masterFirstAddrOctets')[1],'.',variables('masterFirstAddrOctets')[2],'.')]",
    "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
    "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
    "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
    "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
    "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
    "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
    "masterStorageAccountName": "[concat(variables('storageAccountBaseName'), '0')]",
    "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
    "masterVMSize": "[parameters('masterVMSize')]",
    "masterVnetSubnetID": "[parameters('masterVnetSubnetID')]",
    "maxStorageAccountsPerAgent": "[div(variables('maxVMsPerPool'),variables('maxVMsPerStorageAccount'))]",
    "maxVMsPerPool": 100,
    "maxVMsPerStorageAccount": 20,
    "nameSuffix": "[parameters('nameSuffix')]",
    "orchestratorName": "swarm",
    "osImageOffer": "UbuntuServer",
    "osImagePublisher": "Canonical",
    "osImageSKU": "14.04.4-LTS",
    "osImageVersion": "latest",
    "postInstallScriptURI": "disabled",
    "sshKeyPath": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]",
    "sshRSAPublicKey": "[parameters('sshRSAPublicKey')]",
    "storageAccountBaseName": "[uniqueString(concat(variables('masterEndpointDNSNamePrefix'),resourceGroup().location))]",
    "storageAccountPrefixes": [
      "0",
      "6",
      "c",
      "i",
      "o",
      "u",
      "1",
      "7",
      "d",
      "j",
      "p",
      "v",
      "2",
      "8",
      "e",
      "k",
      "q",
      "w",
      "3",
      "9",
      "f",
      "l",
      "r",
      "x",
      "4",
      "a",
      "g",
      "m",
      "s",
      "y",
      "5",
      "b",
      "h",
      "n",
      "t",
      "z"
    ],
    "storageAccountPrefixesCount": "[length(variables('storageAccountPrefixes'))]",
    "vmSizesMap": {
      "Basic_A2": {
        "storageAccountType": "Standard_LRS"
      },
      "Basic_A3": {
        "storageAccountType": "Standard_LRS"
      },
      "Basic_A4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A10": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A7": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A9": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D15_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D5_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_DS11": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS15_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS5_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F16": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F16s": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F2s": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F4s": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F8s": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_GS1": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS5": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_H16": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16m": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16mr": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16r": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H8m": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC24": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV24": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV6": {
        "storageAccountType": "Standard_LRS"
      }
    },
    "vmsPerStorageAccount": 20
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentprivateStorageAccountsCount')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentprivateAccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentprivateVMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(0,variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentprivateAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(1,variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentprivateAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(2,variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentprivateAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(3,variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentprivateAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(4,variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentprivateAccountName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('agentprivateVMNamePrefix'), '-vmss')]",
      "properties": {
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "virtualMachineProfile": {
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "nic",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "properties": {
                        "subnet": {
                          "id": "[variables('agentprivateVnetSubnetID')]"
                        }
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[variables('adminUsername')]",
            "computerNamePrefix": "[variables('agentprivateVMNamePrefix')]",
            "customData": "[base64(concat('#cloud-config\n\nwrite_files:\n -  encoding: gzip\n    content: !!binary |\n        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\n    path: /opt/azure/containers/configure-swarm-cluster.sh\n    permissions: \"0744\"\n\n',variables('agentRunCmdFile'),variables('agentRunCmd')))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('sshRSAPublicKey')]",
                    "path": "[variables('sshKeyPath')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": {
              "offer": "[variables('osImageOffer')]",
              "publisher": "[variables('osImagePublisher')]",
              "sku": "[variables('osImageSKU')]",
              "version": "latest"
            },
            "osDisk": {
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "name": "vmssosdisk",
              "vhdContainers": [
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentprivateAccountName')), variables('apiVersionStorage') ).primaryEndpoints.blob, 'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentprivateAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob, 'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentprivateAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob, 'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentprivateAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob, 'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentprivateStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentprivateAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob, 'osdisk')]"
              ]
            }
          }
        }
      },
      "sku": {
        "capacity": "[variables('agentprivateCount')]",
        "name": "[variables('agentprivateVMSize')]",
        "tier": "Standard"
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('agentprivateVMNamePrefix'), '-vmss')]"
      },
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentpublicStorageAccountsCount')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublicAccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentpublicVMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('agentpublicIPAddressName')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('agentpublicEndpointDNSNamePrefix')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('agentpublicIPAddressName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[variables('agentpublicLbName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('agentpublicLbBackendPoolName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('agentpublicLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('agentpublicIPAddressName'))]"
              }
            }
          }
        ],
        "inboundNatRules": [],
        "loadBalancingRules": [
          {
            "name": "LBRule80",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('agentpublicLbID'), '/backendAddressPools/', variables('agentpublicLbBackendPoolName'))]"
              },
              "backendPort": 80,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('agentpublicLbIPConfigID')]"
              },
              "frontendPort": 80,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentpublicLbID'),'/probes/tcp80Probe')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "LBRule443",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('agentpublicLbID'), '/backendAddressPools/', variables('agentpublicLbBackendPoolName'))]"
              },
              "backendPort": 443,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('agentpublicLbIPConfigID')]"
              },
              "frontendPort": 443,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentpublicLbID'),'/probes/tcp443Probe')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "LBRule8080",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('agentpublicLbID'), '/backendAddressPools/', variables('agentpublicLbBackendPoolName'))]"
              },
              "backendPort": 8080,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('agentpublicLbIPConfigID')]"
              },
              "frontendPort": 8080,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentpublicLbID'),'/probes/tcp8080Probe')]"
              },
              "protocol": "tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "tcp80Probe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 80,
              "protocol": "tcp"
            }
          },
          {
            "name": "tcp443Probe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 443,
              "protocol": "tcp"
            }
          },
          {
            "name": "tcp8080Probe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 8080,
              "protocol": "tcp"
            }
          }
        ]
      },
      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(0,variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublicAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(1,variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublicAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(2,variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublicAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(3,variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublicAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(4,variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublicAccountName'))]",
        "[variables('agentpublicLbID')]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('agentpublicVMNamePrefix'), '-vmss')]",
      "properties": {
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "virtualMachineProfile": {
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "nic",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "properties": {
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat(variables('agentpublicLbID'), '/backendAddressPools/', variables('agentpublicLbBackendPoolName'))]"
                          }
                        ],
                        "subnet": {
                          "id": "[variables('agentpublicVnetSubnetID')]"
                        }
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[variables('adminUsername')]",
            "computerNamePrefix": "[variables('agentpublicVMNamePrefix')]",
            "customData": "[base64(concat('#cloud-config\n\nwrite_files:\n -  encoding: gzip\n    content: !!binary |\n        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\n    path: /opt/azure/containers/configure-swarm-cluster.sh\n    permissions: \"0744\"\n\n',variables('agentRunCmdFile'),variables('agentRunCmd')))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('sshRSAPublicKey')]",
                    "path": "[variables('sshKeyPath')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": {
              "offer": "[variables('osImageOffer')]",
              "publisher": "[variables('osImagePublisher')]",
              "sku": "[variables('osImageSKU')]",
              "version": "latest"
            },
            "osDisk": {
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "name": "vmssosdisk",
              "vhdContainers": [
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(0,variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(0,variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublicAccountName')), variables('apiVersionStorage') ).primaryEndpoints.blob, 'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(1,variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(1,variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublicAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob, 'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(2,variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(2,variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublicAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob, 'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(3,variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(3,variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublicAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob, 'osdisk')]",
                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(4,variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(4,variables('agentpublicStorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpublicAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob, 'osdisk')]"
              ]
            }
          }
        }
      },
      "sku": {
        "capacity": "[variables('agentpublicCount')]",
        "name": "[variables('agentpublicVMSize')]",
        "tier": "Standard"
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('agentpublicVMNamePrefix'), '-vmss')]"
      },
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[variables('masterStorageAccountName')]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('masterVMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('masterAvailabilitySet')]",
      "properties": {},
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('masterPublicIPAddressName')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('masterEndpointDNSNamePrefix')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[variables('masterLbName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('masterLbBackendPoolName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('masterLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "masterLbLoopNode"
      },
      "dependsOn": [
        "[variables('masterLbID')]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('masterLbName'), '/', 'SSH-', variables('masterVMNamePrefix'), copyIndex())]",
      "properties": {
        "backendPort": 22,
        "enableFloatingIP": false,
        "frontendIPConfiguration": {
          "id": "[variables('masterLbIPConfigID')]"
        },
        "frontendPort": "[copyIndex(2200)]",
        "protocol": "tcp"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "nicLoopNode"
      },
      "dependsOn": [
        "[variables('masterLbID')]",
        "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipConfigNode",
            "properties": {
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]"
                }
              ],
              "privateIPAddress": "[concat(variables('masterFirstAddrPrefix'), copyIndex(int(variables('masterFirstAddrOctet4'))))]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('masterVnetSubnetID')]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/',variables('masterAvailabilitySet'))]",
        "[variables('masterStorageAccountName')]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('masterAvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('masterVMSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'), 'nic-', copyIndex()))]"
            }
          ]
        },
        "osProfile": {
          "adminUsername": "[variables('adminUsername')]",
          "computername": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
          "customData": "[base64('#cloud-config\n\nwrite_files:\n -  encoding: gzip\n    content: !!binary |\n        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\n    path: /opt/azure/containers/configure-swarm-cluster.sh\n    permissions: \"0744\"\n\n')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "keyData": "[variables('sshRSAPublicKey')]",
                  "path": "[variables('sshKeyPath')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('osImageOffer')]",
            "publisher": "[variables('osImagePublisher')]",
            "sku": "[variables('osImageSKU')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'-osdisk')]",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('masterStorageAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob, 'vhds/', variables('masterVMNamePrefix'), copyIndex(), '-osdisk.vhd')]"
            }
          }
        }
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('masterVMNamePrefix'), copyIndex())]"
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', concat(variables('masterVMNamePrefix'), copyIndex()))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex(), '/configuremaster')]",
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "settings": {
          "commandToExecute": "[variables('masterCustomScript')]",
          "fileUris": []
        },
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.4"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    }
  ],
  "outputs": {
    "agentpublicFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('agentpublicIPAddressName'))).dnsSettings.fqdn]"
    },
    "masterFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))).dnsSettings.fqdn]"
    }
  }
}
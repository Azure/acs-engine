apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-dns
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: kube-dns
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: KubeDNS
  name: kube-dns
  namespace: kube-system
spec:
  clusterIP: 10.0.0.10
  ports:
  - name: dns
    port: 53
    protocol: UDP
  - name: dns-tcp
    port: 53
    protocol: TCP
  selector:
    k8s-app: kube-dns
---
apiVersion: rbac.authorization.k8s.io/v1alpha1
kind: ClusterRole
metadata:
  name: system:kube-dns
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  - services
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1alpha1
kind: ClusterRoleBinding
metadata:
  name: system:kube-dns
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:kube-dns
subjects:
- kind: ServiceAccount
  name: kube-dns
  namespace: kube-system
---
apiVersion: v1
kind: ReplicationController
metadata:
  labels:
    kubernetes.io/cluster-service: "true"
    k8s-app: kube-dns
    version: v19
  name: kube-dns-v19
  namespace: kube-system
spec:
  replicas: 2
  selector:
    k8s-app: kube-dns
    version: v19
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
        scheduler.alpha.kubernetes.io/tolerations: "[{\"key\":\"CriticalAddonsOnly\",\"operator\":\"Exists\"}]"
      labels:
        k8s-app: kube-dns
        kubernetes.io/cluster-service: "true"
        version: v19
    spec:
      containers:
      - args:
        - "--domain=cluster.local."
        - "--dns-port=10053"
        image: <kubernetesKubeDNSSpec>
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: "/healthz-kubedns"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          successThreshold: 1
          timeoutSeconds: 5
        name: kubedns
        ports:
        - containerPort: 10053
          name: dns-local
          protocol: UDP
        - containerPort: 10053
          name: dns-tcp-local
          protocol: TCP
        readinessProbe:
          httpGet:
            path: "/readiness"
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        resources:
          limits:
            memory: 170Mi
          requests:
            cpu: 100m
            memory: 70Mi
      - args:
        - "--cache-size=1000"
        - "--no-resolv"
        - "--server=127.0.0.1#10053"
        - "--log-facility=-"
        image: <kubernetesDNSMasqSpec>
        name: dnsmasq
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
      - args:
        - "--cmd=nslookup kubernetes.default.svc.cluster.local 127.0.0.1 >/dev/null"
        - "--url=/healthz-dnsmasq"
        - "--cmd=nslookup kubernetes.default.svc.cluster.local 127.0.0.1:10053 >/dev/null"
        - "--url=/healthz-kubedns"
        - "--port=8080"
        - "--quiet"
        image: <kubernetesExecHealthzSpec>
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: "/healthz-dnsmasq"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          successThreshold: 1
          timeoutSeconds: 5
        name: healthz
        ports:
        - containerPort: 8080
          protocol: TCP
        resources:
          limits:
            memory: 50Mi
          requests:
            cpu: 10m
            memory: 50Mi
      dnsPolicy: Default
      serviceAccountName: kube-dns
      nodeSelector:
        beta.kubernetes.io/os: linux

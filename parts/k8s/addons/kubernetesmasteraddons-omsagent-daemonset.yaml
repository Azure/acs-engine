    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: omsagent
      namespace: kube-system
      labels:
        kubernetes.io/cluster-service: "true"
        addonmanager.kubernetes.io/mode: Reconcile
    ---
    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1beta1
    metadata:
      name: omsagent-reader
      labels:
        kubernetes.io/cluster-service: "true"
        addonmanager.kubernetes.io/mode: Reconcile
    rules:
    - apiGroups: [""]
      resources: ["pods", "events", "nodes", "namespaces", "services"]
      verbs: ["list"]
    ---
    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1beta1
    metadata:
      name: omsagentclusterrolebinding
      labels:
        kubernetes.io/cluster-service: "true"
        addonmanager.kubernetes.io/mode: Reconcile
    subjects:
      - kind: ServiceAccount
        name: omsagent
        namespace: kube-system
    roleRef:
      kind: ClusterRole
      name: omsagent-reader
      apiGroup: rbac.authorization.k8s.io
    ---
    apiVersion: extensions/v1beta1
    kind: DaemonSet
    metadata:
      labels:
        component: oms-agent
        tier: node
        kubernetes.io/cluster-service: "true"
        addonmanager.kubernetes.io/mode: Reconcile
      name: omsagent
      namespace: kube-system
    spec:
      selector:
        matchLabels:
          component: oms-agent
          tier: node
      template:
        metadata:
          annotations:
            agentVersion: "{{ .Values.global.OmsAgent.agentVersion }}"
            dockerProviderVersion: "{{ .Values.global.OmsAgent.dockerProviderVersion }}"
          labels:
            component: oms-agent
            tier: node
        spec:
          serviceAccountName: omsagent
          containers:
            - name: omsagent
              image: "{{ .Values.global.OmsAgent.image }}"
              imagePullPolicy: Always
              resources:
                limits:
                  cpu: 150m
                  memory: 750Mi
                requests:
                  cpu: 50m
                  memory: 200Mi
              env:
                - name: NODE_IP
                  valueFrom:
                    fieldRef:
                      fieldPath: status.hostIP
                - name: AKS_CLUSTER_NAME
                  value: "{{ .Values.global.OmsAgent.aksClusterName }}"
                - name: AKS_RESOURCE_ID
                  value: "{{ .Values.global.OmsAgent.aksResourceID }}"
                - name: AKS_NODE_RESOURCE_GROUP
                  value: "{{ .Values.global.OmsAgent.aksNodeResourceGroup }}"
                - name: AKS_REGION
                  value: "{{ .Values.global.OmsAgent.aksRegion }}"
                - name: DISABLE_KUBE_SYSTEM_LOG_COLLECTION
                  value: "true"
              livenessProbe:
                exec:
                  command:
                    - /bin/bash
                    - "-c"
                    - "ps -ef | grep omsagent | grep -v \"grep\""
                initialDelaySeconds: 60
                periodSeconds: 60
              ports:
                - containerPort: 25225
                  protocol: TCP
                - containerPort: 25224
                  protocol: UDP
              securityContext:
                privileged: true
              volumeMounts:
                - mountPath: /var/run/docker.sock
                  name: docker-sock
                - mountPath: /var/log
                  name: host-log
                - mountPath: /var/lib/docker/containers
                  name: containerlog-path
                - mountPath: /etc/omsagent-secret
                  name: omsagent-secret
                  readOnly: true
          nodeSelector:
            beta.kubernetes.io/os: linux
          tolerations:
            - effect: NoSchedule
              key: node-role.kubernetes.io/master
              operator: Equal
              value: "true"
          volumes:
            - name: docker-sock
              hostPath:
                path: /var/run/docker.sock
            - name: container-hostname
              hostPath:
                path: /etc/hostname
            - name: host-log
              hostPath:
                path: /var/log
            - name: containerlog-path
              hostPath:
                path: /var/lib/docker/containers
            - name: omsagent-secret
              secret:
                secretName: omsagent-secret
      updateStrategy:
        type: RollingUpdate

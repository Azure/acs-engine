#cloud-config

write_files:
{{if not .IsCoreOS}}
- path: "/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf"
  permissions: "0644"
  owner: "root"
  content: |
    [Service]
    MountFlags=shared
{{end}}
- path: "/etc/systemd/system/docker.service.d/exec_start.conf"
  permissions: "0644"
  owner: "root"
  content: |
    [Service]
    ExecStart=
    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay2 --bip={{WrapAsVariable "dockerBridgeCidr"}}

- path: "/etc/docker/daemon.json"
  permissions: "0644"
  owner: "root"
  content: |
    {
      "live-restore": true,
      "log-driver": "json-file",
      "log-opts":  {
         "max-size": "50m",
         "max-file": "5"
      }
    }

- path: "/etc/kubernetes/certs/ca.crt"
  permissions: "0644"
  encoding: "base64"
  owner: "root"
  content: |
    {{WrapAsVariable "caCertificate"}}

- path: "/etc/kubernetes/certs/client.crt"
  permissions: "0644"
  encoding: "base64"
  owner: "root"
  content: |
    {{WrapAsVariable "clientCertificate"}}

- path: "/var/lib/kubelet/kubeconfig"
  permissions: "0644"
  owner: "root"
  content: |
    apiVersion: v1
    kind: Config
    clusters:
    - name: localcluster
      cluster:
        certificate-authority: /etc/kubernetes/certs/ca.crt
        server: https://{{WrapAsVariable "kubernetesAPIServerIP"}}:443
    users:
    - name: client
      user:
        client-certificate: /etc/kubernetes/certs/client.crt
        client-key: /etc/kubernetes/certs/client.key
    contexts:
    - context:
        cluster: localcluster
        user: client
      name: localclustercontext
    current-context: localclustercontext

- path: "/etc/systemd/system/kubectl-extract.service"
  permissions: "0644"
  owner: "root"
  content: |
    [Unit]
    Description=Kubectl extraction
    Requires=docker.service
    After=docker.service
{{if .IsCoreOS}}
    ConditionPathExists=!/opt/kubectl
{{else}}
    ConditionPathExists=!/usr/local/bin/kubectl
{{end}}

    [Service]
    TimeoutStartSec=0
    Restart=on-failure
    RestartSec=5s
    ExecStartPre=/bin/mkdir -p /tmp/kubectldir
    ExecStartPre=/usr/bin/docker pull {{WrapAsVariable "kubernetesHyperkubeSpec"}}
    ExecStartPre=/usr/bin/docker run --rm -v /tmp/kubectldir:/opt/kubectldir {{WrapAsVariable "kubernetesHyperkubeSpec"}} /bin/bash -c "cp /hyperkube /opt/kubectldir/"
{{if .IsCoreOS}}
    ExecStartPre=/bin/mv /tmp/kubectldir/hyperkube /opt/kubectl
    ExecStart=/bin/chmod a+x /opt/kubectl
{{else}}    
    ExecStartPre=/bin/mv /tmp/kubectldir/hyperkube /usr/local/bin/kubectl
    ExecStart=/bin/chmod a+x /usr/local/bin/kubectl
{{end}}

    [Install]
    WantedBy=multi-user.target

- path: "/etc/default/kubelet"
  permissions: "0644"
  owner: "root"
  content: |
    KUBELET_IMAGE={{WrapAsVariable "kubernetesHyperkubeSpec"}}
    DOCKER_OPTS=
    KUBELET_REGISTER_SCHEDULABLE=true
    KUBELET_NODE_LABELS={{GetAgentKubernetesLabels . "',variables('labelResourceGroup'),'"}}
{{if IsKubernetesVersionGe "1.6.0"}}
    KUBELET_NON_MASQUERADE_CIDR={{WrapAsVariable "kubernetesNonMasqueradeCidr"}}
{{end}}

- path: "/etc/systemd/system/kubelet.service"
  permissions: "0644"
  owner: "root"
  content: |
    [Unit]
    Description=Kubelet
    Requires=docker.service
    After=docker.service

    [Service]
    Restart=always
    EnvironmentFile=/etc/default/kubelet
    SuccessExitStatus=143
    ExecStartPre=/bin/bash /opt/azure/containers/kubelet.sh
    ExecStartPre=/bin/mkdir -p /var/lib/kubelet
    ExecStartPre=/bin/bash -c "if [ $(mount | grep \"/var/lib/kubelet\" | wc -l) -le 0 ] ; then /bin/mount --bind /var/lib/kubelet /var/lib/kubelet ; fi"
    ExecStartPre=/bin/mount --make-shared /var/lib/kubelet
    # This is a partial workaround to this upstream Kubernetes issue:
    #  https://github.com/kubernetes/kubernetes/issues/41916#issuecomment-312428731
    ExecStartPre=/sbin/sysctl -w net.ipv4.tcp_retries2=8
    ExecStartPre=-/sbin/ebtables -t nat --list
    ExecStartPre=-/sbin/iptables -t nat --list
    ExecStart=/usr/bin/docker run \
    --net=host \
    --pid=host \
    --privileged \
    --rm \
    --volume=/dev:/dev \
    --volume=/sys:/sys:ro \
    --volume=/var/run:/var/run:rw \
    --volume=/var/lib/docker/:/var/lib/docker:rw \
    --volume=/var/lib/kubelet/:/var/lib/kubelet:shared \
    --volume=/var/log:/var/log:rw \
    --volume=/etc/kubernetes/:/etc/kubernetes:ro \
    --volume=/srv/kubernetes/:/srv/kubernetes:ro $DOCKER_OPTS \
    --volume=/var/lib/waagent/ManagedIdentity-Settings:/var/lib/waagent/ManagedIdentity-Settings:ro \
    --volume=/usr/libexec/kubernetes/kubelet-plugins:/usr/libexec/kubernetes/kubelet-plugins \
        ${KUBELET_IMAGE} \
        /hyperkube kubelet \
            --v=2 \
            --require-kubeconfig \
            --node-labels="${KUBELET_NODE_LABELS}" \
            --non-masquerade-cidr=${KUBELET_NON_MASQUERADE_CIDR} \
            {{range $key, $val := .KubernetesConfig.KubeletConfig}}{{$key}}={{$val}} {{end}}\
            --enable-server \
            --feature-gates=Accelerators=true

    [Install]
    WantedBy=multi-user.target

- path: "/opt/azure/containers/kubelet.sh"
  permissions: "0755"
  owner: "root"
  content: |
    #!/bin/bash

{{if IsAzureCNI}}
    # SNAT outbound traffic from pods to destinations outside of VNET.
    iptables -t nat -A POSTROUTING -m iprange ! --dst-range 168.63.129.16 -m addrtype ! --dst-type local ! -d {{WrapAsVariable "vnetCidr"}} -j MASQUERADE
{{end}}

    exit 0

- path: "/opt/azure/containers/provision.sh"
  permissions: "0744"
  encoding: gzip
  owner: "root"
  content: !!binary |
    {{WrapAsVariable "provisionScript"}}

{{if .IsCoreOS}}
- path: "/opt/azure/containers/provision-setup.sh"
  permissions: "0755"
  owner: "root"
  content: |
    #!/bin/bash
    /usr/bin/mkdir -p /etc/kubernetes/manifests
    usermod -aG docker {{WrapAsVariable "username"}}

    systemctl enable rpcbind
    systemctl enable rpc-statd
    systemctl start rpcbind
    systemctl start rpc-statd

    # Simulates runcmd completion
    touch /opt/azure/containers/runcmd.complete

coreos:
  units:
    - name: start-provision-setup.service
      command: "start"
      content: |
        # Note: Initiated as a service since there is no runcmd within CoreOS on cloud-config/Ignition
        [Unit] 
        Description=Start provision setup service

        [Service]
        ExecStart=/opt/azure/containers/provision-setup.sh
{{else}}
runcmd:
- echo `date`,`hostname`, startruncmd>>/opt/m 
- apt-mark hold walinuxagent{{GetKubernetesAgentPreprovisionYaml .}}
- echo `date`,`hostname`, preaptupdate>>/opt/m 
- apt-get update
- echo `date`,`hostname`, postaptupdate>>/opt/m 
- apt-get install -y apt-transport-https ca-certificates nfs-common
- echo `date`,`hostname`, aptinstall>>/opt/m 
- systemctl enable rpcbind
- systemctl enable rpc-statd
- systemctl start rpcbind
- systemctl start rpc-statd
- echo `date`,`hostname`, predockerinstall>>/opt/m
- for i in 1 2 3 4 5; do curl --max-time 60 -fsSL https://aptdocker.azureedge.net/gpg | apt-key add -; [ $? -eq 0 ] && break || sleep 5; done
- echo "deb {{WrapAsVariable "dockerEngineDownloadRepo"}} ubuntu-xenial main" | sudo tee /etc/apt/sources.list.d/docker.list
- "echo \"Package: docker-engine\nPin: version {{WrapAsVariable "dockerEngineVersion"}}\nPin-Priority: 550\n\" > /etc/apt/preferences.d/docker.pref"
- apt-get update
- apt-get install -y ebtables
- apt-get install -y docker-engine
- echo `date`,`hostname`, postdockerinstall>>/opt/m
- systemctl restart docker
- mkdir -p /etc/kubernetes/manifests
- usermod -aG docker {{WrapAsVariable "username"}}
{{GetGPUDriversInstallScript .}}
- echo `date`,`hostname`, PRE-APT-SYSTEMD-DAILY>>/opt/m
- /usr/lib/apt/apt.systemd.daily
- echo `date`,`hostname`, POST-APT-SYSTEMD-DAILY>>/opt/m
- apt-mark unhold walinuxagent
- mkdir -p /opt/azure/containers && touch /opt/azure/containers/runcmd.complete
- echo `date`,`hostname`, endruncmd>>/opt/m 
{{end}}

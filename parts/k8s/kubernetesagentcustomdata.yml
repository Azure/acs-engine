#cloud-config

write_files:
- path: "/opt/azure/containers/provision_source.sh"
  permissions: "0744"
  encoding: gzip
  owner: "root"
  content: !!binary |
    {{WrapAsVariable "provisionSource"}}

- path: "/etc/ssh/sshd_config"
  permissions: "0644"
  encoding: gzip
  owner: "root"
  content: !!binary |
    {{WrapAsVariable "sshdConfig"}}

- path: "/opt/azure/containers/provision_installs.sh"
  permissions: "0744"
  encoding: gzip
  owner: "root"
  content: !!binary |
    {{WrapAsVariable "provisionInstalls"}}

- path: "/opt/azure/containers/provision_configs.sh"
  permissions: "0744"
  encoding: gzip
  owner: "root"
  content: !!binary |
    {{WrapAsVariable "provisionConfigs"}}

{{if .KubernetesConfig.RequiresDocker}}
    {{if not .IsCoreOS}}
- path: "/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf"
  permissions: "0644"
  owner: "root"
  content: |
    [Service]
    MountFlags=shared
    {{end}}
- path: "/etc/systemd/system/docker.service.d/exec_start.conf"
  permissions: "0644"
  owner: "root"
  content: |
    [Service]
    ExecStart=
    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay2 --bip={{WrapAsParameter "dockerBridgeCidr"}}

- path: "/etc/docker/daemon.json"
  permissions: "0644"
  owner: "root"
  content: |
    {
      "live-restore": true,
      "log-driver": "json-file",
      "log-opts":  {
         "max-size": "50m",
         "max-file": "5"
      }{{if IsNSeriesSKU .}}{{if IsNVIDIADevicePluginEnabled}}
      ,"default-runtime": "nvidia",
      "runtimes": {
         "nvidia": {
             "path": "/usr/bin/nvidia-container-runtime",
             "runtimeArgs": []
        }
      }{{end}}{{end}}
    }

- path: "/usr/local/bin/health-monitor.sh"
  permissions: "0544"
  encoding: gzip
  owner: "root"
  content: !!binary |
    {{WrapAsVariable "healthMonitorScript"}}

- path: "/etc/systemd/system/docker-monitor.service"
  permissions: "0644"
  owner: "root"
  content: |
    [Unit]
    Description=a script that checks docker health and restarts if needed
    After=docker.service
    [Service]
    Restart=always
    RestartSec=10
    RemainAfterExit=yes
    ExecStart=/usr/local/bin/health-monitor.sh container-runtime
    [Install]
    WantedBy=multi-user.target

- path: "/etc/systemd/system/kubelet-monitor.service"
  permissions: "0644"
  owner: "root"
  content: |
    [Unit]
    Description=a script that checks kubelet health and restarts if needed
    After=kubelet.service
    [Service]
    Restart=always
    RestartSec=10
    RemainAfterExit=yes
    ExecStart=/usr/local/bin/health-monitor.sh kubelet
    [Install]
    WantedBy=multi-user.target
{{end}}

{{if IsNSeriesSKU .}}
- path: "/etc/systemd/system/nvidia-modprobe.service"
  permissions: "0644"
  owner: "root"
  content: |
    [Unit]
    Description=Installs and loads Nvidia GPU kernel module
    [Service]
    Type=oneshot
    RemainAfterExit=true
    ExecStartPre=/bin/sh -c "dkms autoinstall --verbose"
    ExecStart=/bin/sh -c "nvidia-modprobe -u -c0"
    ExecStartPost=/bin/sh -c "sleep 10 && systemctl restart kubelet"
    [Install]
    WantedBy=multi-user.target
{{end}}

- path: "/etc/kubernetes/certs/ca.crt"
  permissions: "0644"
  encoding: "base64"
  owner: "root"
  content: |
    {{WrapAsParameter "caCertificate"}}

- path: "/etc/kubernetes/certs/client.crt"
  permissions: "0644"
  encoding: "base64"
  owner: "root"
  content: |
    {{WrapAsParameter "clientCertificate"}}

{{if HasCustomSearchDomain}}
- path: "/opt/azure/containers/setup-custom-search-domains.sh"
  permissions: "0744"
  encoding: gzip
  owner: "root"
  content: !!binary |
    {{WrapAsVariable "customSearchDomainsScript"}}
{{end}}

- path: "/var/lib/kubelet/kubeconfig"
  permissions: "0644"
  owner: "root"
  content: |
    apiVersion: v1
    kind: Config
    clusters:
    - name: localcluster
      cluster:
        certificate-authority: /etc/kubernetes/certs/ca.crt
        server: https://{{WrapAsVariable "kubernetesAPIServerIP"}}:443
    users:
    - name: client
      user:
        client-certificate: /etc/kubernetes/certs/client.crt
        client-key: /etc/kubernetes/certs/client.key
    contexts:
    - context:
        cluster: localcluster
        user: client
      name: localclustercontext
    current-context: localclustercontext

- path: "/etc/default/kubelet"
  permissions: "0644"
  owner: "root"
  content: |
{{if IsKubernetesVersionLt "1.8.0"}}
    KUBELET_OPTS=--require-kubeconfig
{{else}}
    KUBELET_OPTS=
{{end}}
    KUBELET_CONFIG={{GetKubeletConfigKeyVals .KubernetesConfig }}
    KUBELET_IMAGE={{WrapAsParameter "kubernetesHyperkubeSpec"}}
    KUBELET_REGISTER_SCHEDULABLE=true
    KUBELET_NODE_LABELS={{GetAgentKubernetesLabels . "',variables('labelResourceGroup'),'"}}

AGENT_ARTIFACTS_CONFIG_PLACEHOLDER

- path: "/opt/azure/containers/kubelet.sh"
  permissions: "0755"
  owner: "root"
  content: |
    #!/bin/bash
{{if IsAzureCNI}}
    # SNAT outbound traffic from pods to destinations outside of VNET.
    iptables -t nat -A POSTROUTING -m iprange ! --dst-range 168.63.129.16 -m addrtype ! --dst-type local ! -d {{WrapAsParameter "vnetCidr"}} -j MASQUERADE
{{end}}
{{if not EnablePodSecurityPolicy}}
    sed -i "s|apparmor_parser|d|g" "/etc/systemd/system/kubelet.service"
{{end}}
{{if HasCustomSearchDomain}}
    sed -i "s|<searchDomainName>|{{WrapAsParameter "searchDomainName"}}|g" "/opt/azure/containers/setup-custom-search-domains.sh"
    sed -i "s|<searchDomainRealmUser>|{{WrapAsParameter "searchDomainRealmUser"}}|g" "/opt/azure/containers/setup-custom-search-domains.sh"
    sed -i "s|<searchDomainRealmPassword>|{{WrapAsParameter "searchDomainRealmPassword"}}|g" "/opt/azure/containers/setup-custom-search-domains.sh"
{{end}}

- path: "/opt/azure/containers/provision.sh"
  permissions: "0744"
  encoding: gzip
  owner: "root"
  content: !!binary |
    {{WrapAsVariable "provisionScript"}}

{{if .IsCoreOS}}
- path: "/opt/azure/containers/provision-setup.sh"
  permissions: "0755"
  owner: "root"
  content: |
    #!/bin/bash
    /usr/bin/mkdir -p /etc/kubernetes/manifests

    {{if .KubernetesConfig.RequiresDocker}}
    usermod -aG docker {{WrapAsParameter "linuxAdminUsername"}}
    {{end}}

    systemctl enable rpcbind
    systemctl enable rpc-statd
    systemctl start rpcbind
    systemctl start rpc-statd

    # Simulates runcmd completion
    touch /opt/azure/containers/runcmd.complete

coreos:
  units:
    - name: start-provision-setup.service
      command: "start"
      content: |
        # Note: Initiated as a service since there is no runcmd within CoreOS on cloud-config/Ignition
        [Unit]
        Description=Start provision setup service

        [Service]
        ExecStart=/opt/azure/containers/provision-setup.sh
{{else}}
runcmd:
- set -x
- . /opt/azure/containers/provision_source.sh
- timeout 10 apt-mark hold walinuxagent{{GetKubernetesAgentPreprovisionYaml .}}
- timeout 10 apt-mark unhold walinuxagent
{{end}}

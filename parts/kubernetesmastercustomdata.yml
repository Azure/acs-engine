#cloud-config

# { { { variable } } }

packages:
 - etcd
 - jq
 - traceroute

runcmd:
- /bin/echo DAEMON_ARGS=--name "<<<variables('masterVMNames')[copyIndex()]>>>" --initial-advertise-peer-urls "<<<variables('masterEtcdPeerURLs')[copyIndex()]>>>" --listen-peer-urls "<<<variables('masterEtcdPeerURLs')[copyIndex()]>>>" --advertise-client-urls "<<<variables('masterEtcdClientURLs')[copyIndex()]>>>" --listen-client-urls "<<<concat(variables('masterEtcdClientURLs')[copyIndex()], ',http://127.0.0.1:', variables('masterEtcdClientPort'))>>>" --initial-cluster-token "k8s-etcd-cluster" --initial-cluster "<<<variables('masterEtcdClusterStates')[div(variables('masterCount'), 2)]>>>" --initial-cluster-state "new" | tee -a /etc/default/etcd
- apt-get update
- apt-get install -y apt-transport-https ca-certificates
- apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
- echo "deb https://apt.dockerproject.org/repo ubuntu-xenial main" | sudo tee /etc/apt/sources.list.d/docker.list
- "echo \"Package: docker-engine\nPin: version {{{dockerEngineVersion}}}\nPin-Priority: 550\n\" > /etc/apt/preferences.d/docker.pref"
- apt-get update
- apt-get install -y docker-engine
- systemctl restart docker
- /usr/bin/curl -sSL --retry 12 --retry-delay 10 https://storage.googleapis.com/kubernetes-release/release/{{{kubectlVersion}}}/bin/linux/amd64/kubectl > /usr/local/bin/kubectl
- chmod +x /usr/local/bin/kubectl
- mkdir -p /etc/kubernetes/manifests
- usermod -aG docker {{{username}}}

write_files:
- path: "/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf"
  permissions: "0644"
  owner: "root"
  content: |
    [Service]
    MountFlags=shared

- path: "/etc/systemd/system/docker.service.d/overlay.conf"
  permissions: "0644"
  owner: "root"
  content: |
    [Service]
    ExecStart=
    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay

- path: "/etc/docker/daemon.json"
  permissions: "0644"
  owner: "root"
  content: |
    {
      "live-restore": true
    }

- path: "/etc/kubernetes/certs/ca.crt"
  permissions: "0644"
  encoding: "base64"
  owner: "root"
  content: |
    {{{caCertificate}}}

- path: "/etc/kubernetes/certs/apiserver.crt"
  permissions: "0644"
  encoding: "base64"
  owner: "root"
  content: |
    {{{apiServerCertificate}}}

- path: "/etc/kubernetes/certs/client.crt"
  permissions: "0644"
  encoding: "base64"
  owner: "root"
  content: |
    {{{clientCertificate}}}

- path: "/var/lib/kubelet/kubeconfig"
  permissions: "0644"
  owner: "root"
  content: |
    apiVersion: v1
    kind: Config
    clusters:
    - name: localcluster
      cluster:
        certificate-authority: /etc/kubernetes/certs/ca.crt
        server: <<<concat('https://', variables('masterPrivateIpAddrs')[copyIndex()], ':443')>>>
    users:
    - name: client
      user:
        client-certificate: /etc/kubernetes/certs/client.crt
        client-key: /etc/kubernetes/certs/client.key
    contexts:
    - context:
        cluster: localcluster
        user: client
      name: localclustercontext
    current-context: localclustercontext

- path: /etc/kubernetes/manifests/kube-apiserver.yaml
  permissions: "0644"
  owner: "root"
  content: |
      apiVersion: "v1"
      kind: "Pod"
      metadata:
        name: "kube-apiserver"
        namespace: "kube-system"
        labels:
          tier: control-plane
          component: kube-apiserver
      spec:
        hostNetwork: true
        containers:
          - name: "kube-apiserver"
            image: "{{{kubernetesHyperkubeSpec}}}"
            command: 
              - "/hyperkube"
              - "apiserver"
              - "--admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota"
              - "--address=0.0.0.0"
              - "--allow-privileged"
              - "--insecure-port=8080"
              - "--secure-port=443"
              - "--cloud-provider=azure"
              - "--cloud-config=/etc/kubernetes/azure.json"
              - "--service-cluster-ip-range={{{kubeServiceCidr}}}"
              - "--etcd-servers=http://127.0.0.1:{{{masterEtcdClientPort}}}"
              - "--etcd-quorum-read=true"
              - "--apiserver-count={{{masterCount}}}"
              - "--tls-cert-file=/etc/kubernetes/certs/apiserver.crt"
              - "--tls-private-key-file=/etc/kubernetes/certs/apiserver.key"
              - "--client-ca-file=/etc/kubernetes/certs/ca.crt"
              - "--service-account-key-file=/etc/kubernetes/certs/apiserver.key"
              - "--storage-backend=etcd2"
              - "--v=4"
            volumeMounts:
              - name: "etc-kubernetes"
                mountPath: "/etc/kubernetes"
              - name: "var-lib-kubelet"
                mountPath: "/var/lib/kubelet"
        volumes:
          - name: "etc-kubernetes"
            hostPath:
              path: "/etc/kubernetes"
          - name: "var-lib-kubelet"
            hostPath:
              path: "/var/lib/kubelet"

- path: /etc/kubernetes/manifests/kube-controller-manager.yaml
  permissions: "0644"
  owner: "root"
  content: |
      apiVersion: "v1"
      kind: "Pod"
      metadata:
        name: "kube-controller-manager"
        namespace: "kube-system"
        labels:
          tier: control-plane
          component: kube-controller-manager
      spec:
        hostNetwork: true
        containers:
          - name: "kube-controller-manager"
            image: "{{{kubernetesHyperkubeSpec}}}"
            command: 
              - "/hyperkube"
              - "controller-manager"
              - "--master=127.0.0.1:8080"
              - "--kubeconfig=/var/lib/kubelet/kubeconfig"
              - "--allocate-node-cidrs=true"
              - "--cluster-cidr=10.244.0.0/16"
              - "--cluster-name={{{masterFqdnPrefix}}}"
              - "--cloud-provider=azure"
              - "--cloud-config=/etc/kubernetes/azure.json"
              - "--root-ca-file=/etc/kubernetes/certs/ca.crt"
              - "--service-account-private-key-file=/etc/kubernetes/certs/apiserver.key"
              - "--leader-elect=true"
              - "--v=2"
            volumeMounts: 
              - name: "etc-kubernetes"
                mountPath: "/etc/kubernetes"
              - name: "var-lib-kubelet"
                mountPath: "/var/lib/kubelet"
        volumes:
          - name: "etc-kubernetes"
            hostPath:
              path: "/etc/kubernetes"
          - name: "var-lib-kubelet"
            hostPath:
              path: "/var/lib/kubelet"

- path: /etc/kubernetes/manifests/kube-scheduler.yaml
  permissions: "0644"
  owner: "root"
  content: |
      apiVersion: "v1"
      kind: "Pod"
      metadata:
        name: "kube-scheduler"
        namespace: "kube-system"
        labels:
          tier: control-plane
          component: kube-scheduler
      spec:
        hostNetwork: true
        containers:
          - name: "kube-scheduler"
            image: "{{{kubernetesHyperkubeSpec}}}"
            command:
              - "/hyperkube"
              - "scheduler"
              - "--master=127.0.0.1:8080"
              - "--kubeconfig=/var/lib/kubelet/kubeconfig"
              - "--leader-elect=true"
              - "--v=2"
            volumeMounts:
              - name: "etc-kubernetes"
                mountPath: "/etc/kubernetes"
              - name: "var-lib-kubelet"
                mountPath: "/var/lib/kubelet"
        volumes:
          - name: "etc-kubernetes"
            hostPath:
              path: "/etc/kubernetes"
          - name: "var-lib-kubelet"
            hostPath:
              path: "/var/lib/kubelet"

- path: /etc/kubernetes/manifests/kube-addon-manager.yml
  permissions: "0644"
  owner: "root"
  content: |
    apiVersion: v1
    kind: Pod
    metadata:
      name: kube-addon-manager
      namespace: kube-system
      version: v1
    spec:
      hostNetwork: true
      containers:
      - name: kube-addon-manager
        # TODO: consider if hardcoding this is the right thing to do...
        image: gcr.io/google_containers/kube-addon-manager-amd64:v6.2
        resources:
          requests:
            cpu: 5m
            memory: 50Mi
        volumeMounts:
        - name: addons
          mountPath: "/etc/kubernetes/addons"
          readOnly: true
      volumes:
      - name: addons
        hostPath:
          path: "/etc/kubernetes/addons"

- path: /etc/kubernetes/addons/kube-dns-service.yaml
  permissions: "0644"
  encoding: gzip
  owner: "root"
  content: !!binary |
    MASTER_ADDON_KUBE_DNS_SERVICE_B64_GZIP_STR

- path: /etc/kubernetes/addons/kube-dns-deployment.yaml
  permissions: "0644"
  encoding: gzip
  owner: "root"
  content: !!binary |
    MASTER_ADDON_KUBE_DNS_DEPLOYMENT_B64_GZIP_STR

- path: /etc/kubernetes/addons/kube-proxy-daemonset.yaml
  permissions: "0644"
  encoding: gzip
  owner: "root"
  content: !!binary |
    MASTER_ADDON_KUBE_PROXY_DAEMONSET_B64_GZIP_STR

- path: /etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml
  permissions: "0644"
  encoding: gzip
  owner: "root"
  content: !!binary |
    MASTER_ADDON_KUBERNETES_DASHBOARD_DEPLOYMENT_B64_GZIP_STR

- path: /etc/kubernetes/addons/kubernetes-dashboard-service.yaml
  permissions: "0644"
  encoding: gzip
  owner: "root"
  content: !!binary |
    MASTER_ADDON_KUBERNETES_DASHBOARD_SERVICE_B64_GZIP_STR

- path: /etc/kubernetes/addons/kube-heapster-service.yaml
  permissions: "0644"
  encoding: gzip
  owner: "root"
  content: !!binary |
    MASTER_ADDON_HEAPSTER_SERVICE_B64_GZIP_STR

- path: /etc/kubernetes/addons/kube-heapster-deployment.yaml
  permissions: "0644"
  encoding: gzip
  owner: "root"
  content: !!binary |
    MASTER_ADDON_HEAPSTER_DEPLOYMENT_B64_GZIP_STR

- path: /etc/kubernetes/addons/default-storage-class.yaml
  permissions: "0644"
  encoding: gzip
  owner: "root"
  content: !!binary |
    MASTER_ADDON_DEFAULT_STORAGE_CLASS_B64_GZIP_STR

- path: "/etc/systemd/system/kubelet.service"
  permissions: "0644"
  owner: "root"
  content: |
    [Unit]
    Description=Kubelet
    Requires=docker.service
    After=docker.service

    [Service]
    Restart=always
    ExecStartPre=/bin/mkdir -p /var/lib/kubelet
    # Azure does not support two LoadBalancers(LB) sharing the same nic and backend port.
    # As a workaround, the Internal LB(ILB) listens for apiserver traffic on port 4443 and the External LB(ELB) on port 443
    # This IPTable rule then redirects ILB traffic to port 443 in the prerouting chain
    ExecStartPre=/bin/bash -c "iptables -t nat -A PREROUTING -p tcp --dport 4443 -j REDIRECT --to-port 443"
    ExecStartPre=/bin/sed -i "s|<kubernetesHyperkubeSpec>|{{{kubernetesHyperkubeSpec}}}|g" "/etc/kubernetes/addons/kube-proxy-daemonset.yaml"
    ExecStartPre=/bin/mount --bind /var/lib/kubelet /var/lib/kubelet
    ExecStartPre=/bin/mount --make-shared /var/lib/kubelet
    ExecStart=/usr/bin/docker run \
      --name=kubelet \
      --net=host \
      --pid=host \
      --privileged \
      --volume=/dev:/dev \
      --volume=/sys:/sys:ro \
      --volume=/var/run:/var/run:rw \
      --volume=/var/lib/docker/:/var/lib/docker:rw \
      --volume=/var/lib/kubelet/:/var/lib/kubelet:shared \
      --volume=/var/log:/var/log:rw \
      --volume=/etc/kubernetes/:/etc/kubernetes:ro \
      --volume=/srv/kubernetes/:/srv/kubernetes:ro \
        {{{kubernetesHyperkubeSpec}}} \
          /hyperkube kubelet \
            --api-servers="<<<concat('https://', variables('masterPrivateIpAddrs')[copyIndex()], ':443')>>>" \
            --kubeconfig=/var/lib/kubelet/kubeconfig \
            --address=0.0.0.0 \
            --allow-privileged=true \
            --enable-server \
            --enable-debugging-handlers \
            --pod-manifest-path=/etc/kubernetes/manifests \
            --cluster-dns={{{kubeDnsServiceIP}}} \
            --cluster-domain=cluster.local \
            --register-schedulable={{{registerSchedulable}}} \
            --cloud-provider=azure \
            --cloud-config=/etc/kubernetes/azure.json \
            --hairpin-mode=promiscuous-bridge \
            --network-plugin=kubenet \
            --azure-container-registry-config=/etc/kubernetes/azure.json \
            --v=2
    ExecStop=/usr/bin/docker stop -t 10 kubelet
    ExecStopPost=/usr/bin/docker rm -f kubelet

    [Install]
    WantedBy=multi-user.target

- path: "/opt/azure/containers/provision.sh"
  permissions: "0744"
  encoding: gzip
  owner: "root"
  content: !!binary |
    {{{provisionScript}}}
